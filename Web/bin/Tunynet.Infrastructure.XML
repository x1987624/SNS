<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Tunynet.Infrastructure</name>
    </assembly>
    <members>
        <member name="T:Tunynet.Caching.CachingExpirationType">
            <summary>
            缓存期限类型
            </summary>
        </member>
        <member name="F:Tunynet.Caching.CachingExpirationType.Invariable">
            <summary>
            永久不变的
            </summary>
        </member>
        <member name="F:Tunynet.Caching.CachingExpirationType.Stable">
            <summary>
            稳定数据      
            </summary>
            <remarks>
            例如： Resources.xml/Area/School
            </remarks>
        </member>
        <member name="F:Tunynet.Caching.CachingExpirationType.RelativelyStable">
            <summary>
            相对稳定
            </summary>
            <remarks>
            例如：权限配置、审核配置
            </remarks>
        </member>
        <member name="F:Tunynet.Caching.CachingExpirationType.UsualSingleObject">
            <summary>
            常用的单个对象
            </summary>
            <remarks>
            例如： 用户、圈子
            </remarks>
        </member>
        <member name="F:Tunynet.Caching.CachingExpirationType.UsualObjectCollection">
            <summary>
            常用的对象集合
            </summary>
            <remarks>
             例如： 用户的朋友
            </remarks>
        </member>
        <member name="F:Tunynet.Caching.CachingExpirationType.SingleObject">
            <summary>
            单个对象
            </summary>
            <remarks>
            例如： 博文、帖子
            </remarks>
        </member>
        <member name="F:Tunynet.Caching.CachingExpirationType.ObjectCollection">
            <summary>
            对象集合
            </summary>
            <remarks>
            例如： 用于分页的私信数据
            </remarks>
        </member>
        <member name="T:Tunynet.Caching.CacheVersionType">
            <summary>
            列表缓存版本设置
            </summary>
        </member>
        <member name="F:Tunynet.Caching.CacheVersionType.None">
            <summary>
            不使用缓存版本
            </summary>
        </member>
        <member name="F:Tunynet.Caching.CacheVersionType.GlobalVersion">
            <summary>
            使用全局缓存版本
            </summary>
        </member>
        <member name="F:Tunynet.Caching.CacheVersionType.AreaVersion">
            <summary>
            使用分区缓存版本
            </summary>
        </member>
        <member name="T:Tunynet.Caching.CacheSettingAttribute">
            <summary>
            实体缓存设置属性
            </summary>
        </member>
        <member name="M:Tunynet.Caching.CacheSettingAttribute.#ctor(System.Boolean)">
            <summary>
            构造函数
            </summary>
            <param name="enableCache">是否使用缓存</param>
        </member>
        <member name="P:Tunynet.Caching.CacheSettingAttribute.EnableCache">
            <summary>
            是否使用缓存
            </summary>
        </member>
        <member name="P:Tunynet.Caching.CacheSettingAttribute.ExpirationPolicy">
            <summary>
            缓存过期策略
            </summary>
        </member>
        <member name="P:Tunynet.Caching.CacheSettingAttribute.PropertyNameOfBody">
            <summary>
            实体正文缓存对应的属性名称（如果不需单独存储实体正文缓存，则不要设置该属性）
            </summary>
        </member>
        <member name="P:Tunynet.Caching.CacheSettingAttribute.PropertyNamesOfArea">
            <summary>
            缓存分区的属性名称（可以设置多个，用逗号分隔）
            </summary>
            <remarks>
            必须是实体包含的属性，自动维护维护这些分区属性的版本号
            </remarks>
        </member>
        <member name="T:Tunynet.Caching.EntityCacheExpirationPolicies">
            <summary>
            实体缓存期限类型
            </summary>
        </member>
        <member name="F:Tunynet.Caching.EntityCacheExpirationPolicies.Stable">
            <summary>
            稳定数据      
            </summary>
            <remarks>
            例如： Area/School
            </remarks>
        </member>
        <member name="F:Tunynet.Caching.EntityCacheExpirationPolicies.Usual">
            <summary>
            常用的单个实体
            </summary>
            <remarks>
            例如： 用户、圈子
            </remarks>
        </member>
        <member name="F:Tunynet.Caching.EntityCacheExpirationPolicies.Normal">
            <summary>
            单个实体
            </summary>
            <remarks>
            例如： 博文、帖子
            </remarks>
        </member>
        <member name="T:Tunynet.Caching.DefaultCacheService">
            <summary>
            默认提供的缓存服务
            </summary>
        </member>
        <member name="T:Tunynet.Caching.ICacheService">
            <summary>
            缓存服务接口
            </summary>
            <example>
        <para>使用缓存功能时，建议通过DI容器参照以下代码进行注册：</para>
        <code language="c#">
          <![CDATA[
            //注册缓存
            containerBuilder.Register(c => new DefaultCacheService(new RuntimeMemoryCache(), new RuntimeMemoryCache(), 1.0F, true))
                .As<ICacheService>().SingleInstance();
          ]]>
        </code>
      </example>
        </member>
        <member name="M:Tunynet.Caching.ICacheService.Add(System.String,System.Object,Tunynet.Caching.CachingExpirationType)">
            <summary>
            添加到缓存
            </summary>
            <param name="cacheKey">缓存项标识</param>
            <param name="value">缓存项</param>
            <param name="cachingExpirationType">缓存期限类型</param>
        </member>
        <member name="M:Tunynet.Caching.ICacheService.Add(System.String,System.Object,System.TimeSpan)">
            <summary>
            添加到缓存
            </summary>
            <param name="cacheKey">缓存项标识</param>
            <param name="value">缓存项</param>
            <param name="timeSpan">缓存失效时间</param>
        </member>
        <member name="M:Tunynet.Caching.ICacheService.Set(System.String,System.Object,Tunynet.Caching.CachingExpirationType)">
            <summary>
            添加或更新缓存
            </summary>
            <param name="cacheKey">缓存项标识</param>
            <param name="value">缓存项</param>
            <param name="cachingExpirationType">缓存期限类型</param>
        </member>
        <member name="M:Tunynet.Caching.ICacheService.Set(System.String,System.Object,System.TimeSpan)">
            <summary>
            添加或更新缓存
            </summary>
            <param name="cacheKey">缓存项标识</param>
            <param name="value">缓存项</param>
            <param name="timeSpan">缓存失效时间间隔</param>
        </member>
        <member name="M:Tunynet.Caching.ICacheService.Remove(System.String)">
            <summary>
            移除缓存
            </summary>
            <param name="cacheKey">缓存项标识</param>
        </member>
        <member name="M:Tunynet.Caching.ICacheService.MarkDeletion(System.String,Tunynet.IEntity,Tunynet.Caching.CachingExpirationType)">
            <summary>
            标识为删除
            </summary>
            <param name="cacheKey">缓存项标识</param>
            <param name="entity">缓存的实体</param>
            <param name="cachingExpirationType">缓存期限类型</param>
        </member>
        <member name="M:Tunynet.Caching.ICacheService.Clear">
            <summary>
            清空缓存
            </summary>
        </member>
        <member name="M:Tunynet.Caching.ICacheService.Get(System.String)">
            <summary>
            从缓存获取
            </summary>
            <param name="cacheKey">缓存项标识</param>
            <returns>返回cacheKey对应的缓存项，如果不存在则返回null</returns>
        </member>
        <member name="M:Tunynet.Caching.ICacheService.Get``1(System.String)">
            <summary>
            从缓存获取(缓存项必须是引用类型)
            </summary>
            <remarks>支持 class,Array,Collection,delegate</remarks>
            <typeparam name="T">缓存项类型</typeparam>
            <param name="cacheKey">缓存项标识</param>
            <returns>返回cacheKey对应的缓存项，如果不存在则返回null</returns>
        </member>
        <member name="M:Tunynet.Caching.ICacheService.GetFromFirstLevel(System.String)">
            <summary>
            从一层缓存获取
            </summary>
            <param name="cacheKey">缓存项标识</param>
            <returns>返回cacheKey对应的缓存项，如果不存在则返回null</returns>
        </member>
        <member name="M:Tunynet.Caching.ICacheService.GetFromFirstLevel``1(System.String)">
            <summary>
            从一层缓存获取(缓存项必须是引用类型)
            </summary>
            <typeparam name="T">缓存项类型</typeparam>
            <param name="cacheKey">缓存项标识</param>
            <returns>返回cacheKey对应的缓存项，如果不存在则返回null</returns>
        </member>
        <member name="P:Tunynet.Caching.ICacheService.EnableDistributedCache">
            <summary>
            是否启用分布式缓存
            </summary>
        </member>
        <member name="M:Tunynet.Caching.DefaultCacheService.#ctor(Tunynet.Caching.ICache,System.Single)">
            <summary>
            构造函数(仅本机缓存)
            </summary>
            <param name="cache">本机缓存</param>
            <param name="cacheExpirationFactor">缓存过期时间因子</param>
        </member>
        <member name="M:Tunynet.Caching.DefaultCacheService.#ctor(Tunynet.Caching.ICache,Tunynet.Caching.ICache,System.Single,System.Boolean)">
            <summary>
            构造函数
            </summary>
            <param name="cache">缓存</param>
            <param name="localCache">本机缓存</param>
            <param name="cacheExpirationFactor">缓存过期时间因子</param>
            <param name="enableDistributedCache">是否启用分布式缓存</param>
        </member>
        <member name="M:Tunynet.Caching.DefaultCacheService.Add(System.String,System.Object,Tunynet.Caching.CachingExpirationType)">
            <summary>
            添加到缓存
            </summary>
            <param name="cacheKey">缓存项标识</param>
            <param name="value">缓存项</param>
            <param name="cachingExpirationType">缓存期限类型</param>
        </member>
        <member name="M:Tunynet.Caching.DefaultCacheService.Add(System.String,System.Object,System.TimeSpan)">
            <summary>
            添加到缓存
            </summary>
            <param name="cacheKey">缓存项标识</param>
            <param name="value">缓存项</param>
            <param name="timeSpan">缓存失效时间间隔</param>
        </member>
        <member name="M:Tunynet.Caching.DefaultCacheService.Set(System.String,System.Object,Tunynet.Caching.CachingExpirationType)">
            <summary>
            添加或更新缓存
            </summary>
            <param name="cacheKey">缓存项标识</param>
            <param name="value">缓存项</param>
            <param name="cachingExpirationType">缓存期限类型</param>
        </member>
        <member name="M:Tunynet.Caching.DefaultCacheService.Set(System.String,System.Object,System.TimeSpan)">
            <summary>
            添加或更新缓存
            </summary>
            <param name="cacheKey">缓存项标识</param>
            <param name="value">缓存项</param>
            <param name="timeSpan">缓存失效时间间隔</param>
        </member>
        <member name="M:Tunynet.Caching.DefaultCacheService.Remove(System.String)">
            <summary>
            移除缓存
            </summary>
            <param name="cacheKey">缓存项标识</param>
        </member>
        <member name="M:Tunynet.Caching.DefaultCacheService.MarkDeletion(System.String,Tunynet.IEntity,Tunynet.Caching.CachingExpirationType)">
            <summary>
            标识为删除
            </summary>
            <param name="cacheKey">缓存项标识</param>
            <param name="entity">缓存的实体</param>
            <param name="cachingExpirationType">缓存期限类型</param>
        </member>
        <member name="M:Tunynet.Caching.DefaultCacheService.Clear">
            <summary>
            清空缓存
            </summary>
        </member>
        <member name="M:Tunynet.Caching.DefaultCacheService.Get(System.String)">
            <summary>
            从缓存获取
            </summary>
            <param name="cacheKey">缓存项标识</param>
            <returns>返回cacheKey对应的缓存项，如果不存在则返回null</returns>
        </member>
        <!-- 对于成员“M:Tunynet.Caching.DefaultCacheService.Get``1(System.String)”忽略有格式错误的 XML 注释 -->
        <member name="M:Tunynet.Caching.DefaultCacheService.GetFromFirstLevel(System.String)">
            <summary>
            从一层缓存获取缓存项
            </summary>
            <remarks>
            在启用分布式缓存的情况下，指穿透二级缓存从一层缓存（分布式缓存）读取
            </remarks>
            <param name="cacheKey">缓存项标识</param>
            <returns>返回cacheKey对应的缓存项，如果不存在则返回null</returns>
        </member>
        <member name="M:Tunynet.Caching.DefaultCacheService.GetFromFirstLevel``1(System.String)">
            <summary>
            从一层缓存获取缓存项
            </summary>
            <remarks>
            在启用分布式缓存的情况下，指穿透二级缓存从一层缓存（分布式缓存）读取
            </remarks>
            <typeparam name="T">缓存项类型</typeparam>
            <param name="cacheKey">缓存项标识</param>
            <returns>返回cacheKey对应的缓存项，如果不存在则返回null</returns>
        </member>
        <member name="P:Tunynet.Caching.DefaultCacheService.EnableDistributedCache">
            <summary>
            是否启用分布式缓存
            </summary>
        </member>
        <member name="T:Tunynet.Caching.ICache">
            <summary>
            缓存接口
            </summary>
        </member>
        <member name="M:Tunynet.Caching.ICache.Add(System.String,System.Object,System.TimeSpan)">
            <summary>
            加入缓存项
            </summary>
            <param name="key">缓存项标识</param>
            <param name="value">缓存项</param>
            <param name="timeSpan">缓存失效时间</param>
        </member>
        <member name="M:Tunynet.Caching.ICache.AddWithFileDependency(System.String,System.Object,System.String)">
            <summary>
            加入依赖物理文件的缓存项
            </summary>
            <remarks>主要应用于配置文件或配置项</remarks>
            <param name="key">缓存项标识</param>
            <param name="value">缓存项</param>
            <param name="fullFileNameOfFileDependency">依赖的文件全路径</param>
        </member>
        <member name="M:Tunynet.Caching.ICache.Set(System.String,System.Object,System.TimeSpan)">
            <summary>
            如果不存在缓存项则添加，否则更新
            </summary>
            <param name="key">缓存项标识</param>
            <param name="value">缓存项</param>
            <param name="timeSpan">缓存失效时间</param>
        </member>
        <member name="M:Tunynet.Caching.ICache.MarkDeletion(System.String,System.Object,System.TimeSpan)">
            <summary>
            标识删除
            </summary>
            <remarks>
            由于DB读写分离导致只读DB会有延迟，为保证缓存中的数据时时更新，需要在缓存中设置ID缓存为已删除状态
            </remarks>
            <param name="key">缓存项标识</param>
            <param name="value">缓存项</param>
            <param name="timeSpan">缓存失效时间间隔</param>
        </member>
        <member name="M:Tunynet.Caching.ICache.Get(System.String)">
            <summary>
            获取缓存项
            </summary>
            <param name="cacheKey">缓存项标识</param>
            <returns>返回cacheKey对应的缓存项，如果不存在则返回null</returns>
        </member>
        <member name="M:Tunynet.Caching.ICache.Remove(System.String)">
            <summary>
            移除缓存项
            </summary>
            <param name="cacheKey">缓存项标识</param>
        </member>
        <member name="M:Tunynet.Caching.ICache.Clear">
            <summary>
            清空缓存
            </summary>
        </member>
        <member name="T:Tunynet.Caching.IListCacheSetting">
            <summary>
            用于列表缓存设置接口
            </summary>
            <remarks>用于在查询对象中设置缓存策略</remarks>
            <example>
        <para>为了更方便的使用列表缓存过期策略，可以在定义查询对象时实现IListCacheSetting，例如：</para>
        <code language="c#">
          <![CDATA[
    public class DiscussQuestionQuery : IListCacheSetting
    {
        public DiscussQuestionQuery(CacheVersionTypes cacheVersionType)
        {
            this.cacheVersionType = cacheVersionType;
        }

        public long? UserId = null;

        //实体以外的查询条件的缓存分区需要自行处理
        //public string TagName = null;

        public SortBy_SocialDiscuss SortBy = SortBy_SocialDiscuss.DateCreated;


        #region IListCacheSetting 成员

        private CacheVersionTypes cacheVersionType = CacheVersionTypes.None;
        /// <summary>
        /// 列表缓存版本设置
        /// </summary>
        CacheVersionTypes IListCacheSetting.CacheVersionType
        {
            get { return cacheVersionType; }
        }

        private string areaCachePropertyName = null;
        /// <summary>
        /// 缓存分区字段名称
        /// </summary>
        public string AreaCachePropertyName
        {
            get { return areaCachePropertyName; }
            set { areaCachePropertyName = value; }
        }

        private object areaCachePropertyValue = null;
        /// <summary>
        /// 缓存分区字段值
        /// </summary>
        public object AreaCachePropertyValue
        {
            get { return areaCachePropertyValue; }
            set { areaCachePropertyValue = value; }
        }

        #endregion
        
        ......
        
    }
          ]]>
        </code>
      </example>
        </member>
        <member name="P:Tunynet.Caching.IListCacheSetting.CacheVersionType">
            <summary>
            列表缓存版本设置
            </summary>
        </member>
        <member name="P:Tunynet.Caching.IListCacheSetting.AreaCachePropertyName">
            <summary>
            缓存分区字段名称
            </summary>
        </member>
        <member name="P:Tunynet.Caching.IListCacheSetting.AreaCachePropertyValue">
            <summary>
            缓存分区字段值
            </summary>
        </member>
        <member name="T:Tunynet.Caching.MemcachedCache">
            <summary>
            用于连接Memcached的分布式缓存
            </summary>
        </member>
        <member name="M:Tunynet.Caching.MemcachedCache.Add(System.String,System.Object,System.TimeSpan)">
            <summary>
            加入缓存项
            </summary>
            <param name="key">缓存项标识</param>
            <param name="value">缓存项</param>
            <param name="timeSpan">缓存失效时间</param>
        </member>
        <member name="M:Tunynet.Caching.MemcachedCache.AddWithFileDependency(System.String,System.Object,System.String)">
            <summary>
            加入依赖物理文件的缓存项
            </summary>
            <remarks>主要应用于配置文件或配置项</remarks>
            <param name="key">缓存项标识</param>
            <param name="value">缓存项</param>
            <param name="fullFileNameOfFileDependency">依赖的文件全路径</param>
        </member>
        <member name="M:Tunynet.Caching.MemcachedCache.Set(System.String,System.Object,System.TimeSpan)">
            <summary>
            如果不存在缓存项则添加，否则更新
            </summary>
            <param name="key">缓存项标识</param>
            <param name="value">缓存项</param>
            <param name="timeSpan">缓存失效时间</param>
        </member>
        <member name="M:Tunynet.Caching.MemcachedCache.MarkDeletion(System.String,System.Object,System.TimeSpan)">
            <summary>
            标识删除
            </summary>
            <remarks>
            由于DB读写分离导致只读DB会有延迟，为保证缓存中的数据时时更新，需要在缓存中设置实体缓存为已删除状态
            </remarks>
            <param name="key">缓存项标识</param>
            <param name="value">缓存项</param>
            <param name="timeSpan">缓存失效时间间隔</param>
        </member>
        <member name="M:Tunynet.Caching.MemcachedCache.Get(System.String)">
            <summary>
            获取缓存项
            </summary>
            <param name="cacheKey">cacheKey</param>
        </member>
        <member name="M:Tunynet.Caching.MemcachedCache.Remove(System.String)">
            <summary>
            移除缓存项
            </summary>
            <param name="cacheKey">cacheKey</param>
        </member>
        <member name="M:Tunynet.Caching.MemcachedCache.Clear">
            <summary>
            清空缓存
            </summary>
        </member>
        <member name="M:Tunynet.Caching.MemcachedCache.GetStatistics">
            <summary>
            获取缓存服务器统计信息
            </summary>
            <returns></returns>
        </member>
        <member name="T:Tunynet.Caching.RealTimeCacheHelper">
            <summary>
            实时性缓存助手
            </summary>
            <remarks>
            主要有两个作用：递增缓存版本号、获取缓存CacheKey
            </remarks>
        </member>
        <member name="M:Tunynet.Caching.RealTimeCacheHelper.#ctor(System.Boolean,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="enableCache">是否启用缓存</param>
            <param name="typeHashID">类型名称哈希值</param>
        </member>
        <member name="M:Tunynet.Caching.RealTimeCacheHelper.GetGlobalVersion">
            <summary>
            列表缓存全局version
            </summary>
        </member>
        <member name="M:Tunynet.Caching.RealTimeCacheHelper.GetEntityVersion(System.Object)">
            <summary>
            获取Entity的缓存版本
            </summary>
            <param name="primaryKey">实体主键</param>
            <returns>实体的缓存版本（从0开始）</returns>
        </member>
        <member name="M:Tunynet.Caching.RealTimeCacheHelper.GetAreaVersion(System.String,System.Object)">
            <summary>
            获取列表缓存区域version
            </summary>
            <param name="propertyName">分区属性名称</param>
            <param name="propertyValue">分区属性值</param>
            <returns>分区属性的缓存版本（从0开始）</returns>
        </member>
        <member name="M:Tunynet.Caching.RealTimeCacheHelper.IncreaseGlobalVersion">
            <summary>
            递增列表缓存全局版本
            </summary>
        </member>
        <member name="M:Tunynet.Caching.RealTimeCacheHelper.IncreaseEntityCacheVersion(System.Object)">
            <summary>
            递增实体缓存（仅更新实体时需要递增）
            </summary>
            <param name="entityId">实体Id</param>
        </member>
        <member name="M:Tunynet.Caching.RealTimeCacheHelper.IncreaseListCacheVersion(Tunynet.IEntity)">
            <summary>
            递增列表缓存version（增加、更改、删除实体时需要递增）
            </summary>
            <param name="entity">实体</param>
        </member>
        <member name="M:Tunynet.Caching.RealTimeCacheHelper.IncreaseAreaVersion(System.String,System.Object)">
            <summary>
            递增列表缓存区域version
            </summary>
            <param name="propertyName">分区属性名称</param>
            <param name="propertyValue">分区属性值</param>
        </member>
        <member name="M:Tunynet.Caching.RealTimeCacheHelper.IncreaseAreaVersion(System.String,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            递增列表缓存区域version
            </summary>
            <param name="propertyName">分区属性名称</param>
            <param name="propertyValues">多个分区属性值</param>
        </member>
        <member name="M:Tunynet.Caching.RealTimeCacheHelper.IncreaseAreaVersion(System.String,System.Collections.Generic.IEnumerable{System.Object},System.Boolean)">
            <summary>
            递增列表缓存区域version
            </summary>
            <param name="propertyName">分区属性名称</param>
            <param name="propertyValues">多个分区属性值</param>
            <param name="raiseChangeEvent">是否触发Change事件</param>
        </member>
        <member name="M:Tunynet.Caching.RealTimeCacheHelper.MarkDeletion(Tunynet.IEntity)">
            <summary>
            标识为已删除
            </summary>
        </member>
        <member name="M:Tunynet.Caching.RealTimeCacheHelper.GetCacheKeyOfEntity(System.Object)">
            <summary>
            获取实体缓存的cacheKey
            </summary>
            <param name="primaryKey">主键</param>
            <returns>实体的CacheKey</returns>
        </member>
        <member name="M:Tunynet.Caching.RealTimeCacheHelper.GetCacheKeyOfEntityBody(System.Object)">
            <summary>
            获取实体正文缓存的cacheKey
            </summary>
            <param name="primaryKey">主键</param>
            <returns>实体正文缓存的cacheKey</returns>
        </member>
        <member name="M:Tunynet.Caching.RealTimeCacheHelper.GetListCacheKeyPrefix(Tunynet.Caching.IListCacheSetting)">
            <summary>
            获取列表缓存CacheKey的前缀（例如：abe3ds2sa90:8:）
            </summary>
            <param name="cacheVersionSetting">列表缓存设置</param>
            <returns>列表缓存CacheKey的前缀</returns>
        </member>
        <member name="M:Tunynet.Caching.RealTimeCacheHelper.GetListCacheKeyPrefix(Tunynet.Caching.CacheVersionType)">
            <summary>
            获取列表缓存CacheKey的前缀（例如：abe3ds2sa90:8:）
            </summary>
            <param name="cacheVersionType">列表缓存版本设置</param>
            <returns>列表缓存CacheKey的前缀</returns>
        </member>
        <member name="M:Tunynet.Caching.RealTimeCacheHelper.GetListCacheKeyPrefix(Tunynet.Caching.CacheVersionType,System.String,System.Object)">
            <summary>
            获取列表缓存CacheKey的前缀（例如：abe3ds2sa90:8:）
            </summary>
            <param name="cacheVersionType"></param>
            <param name="areaCachePropertyName">缓存分区名称</param>
            <param name="areaCachePropertyValue">缓存分区值</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Caching.RealTimeCacheHelper.GetCacheKeyOfTimelinessHelper(System.String)">
            <summary>
            获取CacheTimelinessHelper的CacheKey
            </summary>
            <returns>typeHashID对应类型的缓存设置CacheKey</returns>
        </member>
        <member name="M:Tunynet.Caching.RealTimeCacheHelper.OnChanged">
            <summary>
            对象变更时回调
            </summary>
            <remarks>
            在分布式缓存情况，需要把缓存设置存储到缓存中
            </remarks>
        </member>
        <member name="P:Tunynet.Caching.RealTimeCacheHelper.EnableCache">
            <summary>
            是否使用缓存
            </summary>
        </member>
        <member name="P:Tunynet.Caching.RealTimeCacheHelper.CachingExpirationType">
            <summary>
            缓存过期类型
            </summary>
        </member>
        <member name="P:Tunynet.Caching.RealTimeCacheHelper.PropertiesOfArea">
            <summary>
            缓存分区的属性
            </summary>
        </member>
        <member name="P:Tunynet.Caching.RealTimeCacheHelper.PropertyNameOfBody">
            <summary>
            实体正文缓存对应的属性名称（如果不需单独存储实体正文缓存，则不要设置该属性）
            </summary>
        </member>
        <member name="P:Tunynet.Caching.RealTimeCacheHelper.TypeHashID">
            <summary>
            完整名称md5-16
            </summary>
        </member>
        <member name="T:Tunynet.Caching.RuntimeMemoryCache">
            <summary>
            使用System.Runtime.Caching.MemoryCache实现的本机缓存
            </summary>
            <remarks>
            仅能在.net framework4.0及以上版本使用
            </remarks>
        </member>
        <member name="M:Tunynet.Caching.RuntimeMemoryCache.Add(System.String,System.Object,System.TimeSpan)">
            <summary>
            加入缓存项
            </summary>
            <param name="key">缓存项标识</param>
            <param name="value">缓存项</param>
            <param name="timeSpan">缓存失效时间</param>
        </member>
        <member name="M:Tunynet.Caching.RuntimeMemoryCache.AddWithFileDependency(System.String,System.Object,System.String)">
            <summary>
            加入依赖物理文件的缓存项
            </summary>
            <remarks>主要应用于配置文件或配置项</remarks>
            <param name="key">缓存项标识</param>
            <param name="value">缓存项</param>
            <param name="fullFileNameOfFileDependency">依赖的文件全路径</param>
        </member>
        <member name="M:Tunynet.Caching.RuntimeMemoryCache.Set(System.String,System.Object,System.TimeSpan)">
            <summary>
            如果不存在缓存项则添加，否则更新
            </summary>
            <param name="key">缓存项标识</param>
            <param name="value">缓存项</param>
            <param name="timeSpan">缓存失效时间</param>
        </member>
        <member name="M:Tunynet.Caching.RuntimeMemoryCache.MarkDeletion(System.String,System.Object,System.TimeSpan)">
            <summary>
            标识删除
            </summary>
            <remarks>
            在本机缓存情况下直接删除
            </remarks>
            <param name="key">缓存项标识</param>
            <param name="value">缓存项</param>
            <param name="timeSpan">缓存失效时间间隔</param>
        </member>
        <member name="M:Tunynet.Caching.RuntimeMemoryCache.Get(System.String)">
            <summary>
            获取缓存项
            </summary>
            <param name="cacheKey">缓存项标识</param>
            <returns>缓存项</returns>
        </member>
        <member name="M:Tunynet.Caching.RuntimeMemoryCache.Remove(System.String)">
            <summary>
            移除指定的缓存项
            </summary>
            <param name="cacheKey">要移除的缓存项标识</param>
        </member>
        <member name="M:Tunynet.Caching.RuntimeMemoryCache.Clear">
            <summary>
            从缓存中清除所有缓存项
            </summary>
        </member>
        <member name="T:Tunynet.Email.EmailSettings">
            <summary>
            站点Email设置
            </summary>
        </member>
        <member name="T:Tunynet.IEntity">
            <summary>
            Entity接口（所有实体都应该实现该接口）
            </summary>
            <example>
            <para>应该显示实现该接口，例如：</para>
                <![CDATA[
                [TableName("test_SampleEntities")]
                [PrimaryKey("Id", autoIncrement = true)]
                [CacheSetting(true, PropertyNamesOfArea = "UserId,AuditStatus", PropertyNameOfBody = "Body")]
                [Serializable]
                public class SampleEntity : IEntity
                {
                    ......
                    #region IEntity 成员
                    object IEntity.EntityId { get { return this.Id; } }
                    bool IEntity.IsDeletedInDatabase { get; set; }
                    #endregion
                }
            ]]>
            </example>
        </member>
        <member name="P:Tunynet.IEntity.EntityId">
            <summary>
            实体ID
            </summary>
        </member>
        <member name="P:Tunynet.IEntity.IsDeletedInDatabase">
            <summary>
            该实体是否已经在数据库中删除(分布式部署时使用)
            </summary>
        </member>
        <member name="P:Tunynet.Email.EmailSettings.BatchSendLimit">
            <summary>
            每次从队列批量发送邮件的最大数量
            </summary>
            <remarks>-1表示没有限制</remarks>
        </member>
        <member name="P:Tunynet.Email.EmailSettings.AdminEmailAddress">
            <summary>
            管理员Email地址
            </summary>
        </member>
        <member name="P:Tunynet.Email.EmailSettings.NoReplyAddress">
            <summary>
            NoReply邮件地址
            </summary>
        </member>
        <member name="P:Tunynet.Email.EmailSettings.NumberOfTries">
            <summary>
            尝试发送次数
            </summary>
        </member>
        <member name="P:Tunynet.Email.EmailSettings.SendTimeInterval">
            <summary>
            邮件发送间隔(以分钟为单位)
            </summary>
        </member>
        <member name="P:Tunynet.Email.EmailSettings.SmtpSettings">
            <summary>
            STMP服务器设置
            </summary>
        </member>
        <member name="T:Tunynet.Email.IEmailSettingsManager">
            <summary>
            EmailSettings管理器接口
            </summary>
        </member>
        <member name="M:Tunynet.Email.IEmailSettingsManager.Get">
            <summary>
            获取EmailSettings
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Email.IEmailSettingsManager.Save(Tunynet.Email.EmailSettings)">
            <summary>
            保存EmailSettings
            </summary>
            <returns></returns>
        </member>
        <member name="T:Tunynet.Email.SmtpSettings">
            <summary>
            smtp服务器设置
            </summary>
        </member>
        <member name="P:Tunynet.Email.SmtpSettings.Id">
            <summary>
            当前设置的id
            </summary>
        </member>
        <member name="P:Tunynet.Email.SmtpSettings.Host">
            <summary>
            smtp服务器的域名或IP
            </summary>
        </member>
        <member name="P:Tunynet.Email.SmtpSettings.Port">
            <summary>
            smtp服务器端口号
            </summary>
        </member>
        <member name="P:Tunynet.Email.SmtpSettings.EnableSsl">
            <summary>
            smtp服务器是否启用ssl
            </summary>
        </member>
        <member name="P:Tunynet.Email.SmtpSettings.RequireCredentials">
            <summary>
            smtp服务器是否需要验证身份
            </summary>
        </member>
        <member name="P:Tunynet.Email.SmtpSettings.UserName">
            <summary>
            登录smtp服务器的用户名,可以不带 @后的域名部分
            </summary>
        </member>
        <member name="P:Tunynet.Email.SmtpSettings.UserEmailAddress">
            <summary>
            登录smtp服务器的用户邮件地址（可能与UserName，也可能不同）
            </summary>
        </member>
        <member name="P:Tunynet.Email.SmtpSettings.Password">
            <summary>
            登录smtp服务器的密码
            </summary>
        </member>
        <member name="P:Tunynet.Email.SmtpSettings.ForceSmtpUserAsFromAddress">
            <summary>
            强制smtp登录用户作为发件人
            </summary>
        </member>
        <member name="P:Tunynet.Email.SmtpSettings.DailyLimit">
            <summary>
            每日发送邮件上限（如果超过此上限，则将不再尝试使用此邮箱发送邮件）
            </summary>
        </member>
        <member name="P:Tunynet.Email.SmtpSettings.TodaySendCount">
            <summary>
            今天发送的数目
            </summary>
        </member>
        <member name="P:Tunynet.Email.SmtpSettings.EntityId">
            <summary>
            实体id
            </summary>
        </member>
        <member name="P:Tunynet.Email.SmtpSettings.IsDeletedInDatabase">
            <summary>
            是否在数据库中删除
            </summary>
        </member>
        <member name="M:Tunynet.Email.EmailQueueEntry.New">
            <summary>
            新建实体时使用
            </summary>
        </member>
        <member name="M:Tunynet.Email.EmailQueueEntry.#ctor">
            <summary>
            无参构造函数
            </summary>
        </member>
        <member name="M:Tunynet.Email.EmailQueueEntry.#ctor(System.Net.Mail.MailMessage)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Tunynet.Email.EmailQueueEntry.AsMailMessage(Tunynet.Email.EmailQueueEntry)">
            <summary>
            将EmailQueueEntry 转换为 MailMessage
            </summary>
        </member>
        <member name="M:Tunynet.Email.EmailQueueEntry.String2MailAddressCollection(System.Net.Mail.MailAddressCollection,System.String)">
            <summary>
            将String（使用英文,隔开）类型转换为MailAddressCollection
            </summary>
        </member>
        <member name="P:Tunynet.Email.EmailQueueEntry.Id">
             <summary>
            邮件在队列中的标识
             </summary>
        </member>
        <member name="P:Tunynet.Email.EmailQueueEntry.Priority">
             <summary>
            邮件优先级（对应System.Net.Mail.MailPriority的整型值）
             </summary>
        </member>
        <member name="P:Tunynet.Email.EmailQueueEntry.IsBodyHtml">
             <summary>
            邮件内容是不是Html格式
             </summary>
        </member>
        <member name="P:Tunynet.Email.EmailQueueEntry.MailTo">
             <summary>
            收件人(多个收件人用逗号分隔)
             </summary>
        </member>
        <member name="P:Tunynet.Email.EmailQueueEntry.MailCc">
             <summary>
            抄送地址(多个地址用逗号分隔)
             </summary>
        </member>
        <member name="P:Tunynet.Email.EmailQueueEntry.MailBcc">
             <summary>
            密送地址(多个地址用逗号分隔)
             </summary>
        </member>
        <member name="P:Tunynet.Email.EmailQueueEntry.MailFrom">
             <summary>
            发件人
             </summary>
        </member>
        <member name="P:Tunynet.Email.EmailQueueEntry.Subject">
             <summary>
            邮件标题
             </summary>
        </member>
        <member name="P:Tunynet.Email.EmailQueueEntry.Body">
             <summary>
            邮件内容
             </summary>
        </member>
        <member name="P:Tunynet.Email.EmailQueueEntry.NextTryTime">
             <summary>
            下次尝试发送时间
             </summary>
        </member>
        <member name="P:Tunynet.Email.EmailQueueEntry.NumberOfTries">
             <summary>
            尝试发送次数
             </summary>
        </member>
        <member name="P:Tunynet.Email.EmailQueueEntry.IsFailed">
             <summary>
            IsFailed
             </summary>
        </member>
        <member name="T:Tunynet.Email.EmailService">
            <summary>
            邮件服务逻辑类
            </summary>
        </member>
        <member name="M:Tunynet.Email.EmailService.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Tunynet.Email.EmailService.#ctor(Tunynet.Email.IEmailQueueRepository)">
            <summary>
            可设置repository的构造函数
            </summary>
        </member>
        <member name="M:Tunynet.Email.EmailService.SendFailed(System.Collections.Generic.IEnumerable{System.Int32},System.Int32,System.Int32)">
            <summary>
            在队列中对发送失败的邮件更新下次发送时间及发送次数，并且删除超过最大发送次数的邮件
            </summary>
            <param name="ids">发送失败的邮件Id集合</param>
            <param name="retryInterval">失败的Email过多少分钟再次重新发送</param>
            <param name="maxNumberOfTries">尝试发送的最大次数，超过该次数将设置为失败状态</param>
        </member>
        <member name="M:Tunynet.Email.EmailService.Dequeue(System.Int32)">
            <summary>
            获取队列中的邮件集合
            </summary>
            <param name="maxNumber">从队列一次获取的最大数量</param>
            <returns>当前队列中的EmailTemplate集合</returns>
        </member>
        <member name="M:Tunynet.Email.EmailService.Enqueue(System.Net.Mail.MailMessage)">
            <summary>
            把待发送MailMessage加入队列
            </summary>
            <param name="email">待发送的MailMessage</param>
        </member>
        <member name="M:Tunynet.Email.EmailService.Delete(System.Int32)">
            <summary>
            单条删除邮件
            </summary>
            <param name="id">要删除的邮件ID</param>
        </member>
        <member name="M:Tunynet.Email.EmailService.Delete(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            批量删除邮件
            </summary>
            <param name="ids">要删除的邮件ID集合</param>
        </member>
        <member name="M:Tunynet.Email.EmailService.SendAsyn(System.Net.Mail.MailMessage,System.Boolean)">
            <summary>
            异步发送Email
            </summary>
            <param name="mail">待发送的邮件</param>
            <returns>发送成功返回true，否则返回false</returns>
        </member>
        <member name="M:Tunynet.Email.EmailService.SendAsyn(System.Net.Mail.MailMessage,System.String@,System.Boolean)">
            <summary>
            异步发送Email，不对发送失败或者成功进行处理
            </summary>
            <param name="mail">待发送的邮件</param>
            <param name="errorMessage">错误信息</param>
            <returns>发送成功返回true，否则返回false</returns>
        </member>
        <member name="M:Tunynet.Email.EmailService.Send(System.Net.Mail.MailMessage)">
            <summary>
            发送Email
            </summary>
            <param name="mail">待发送的邮件</param>
            <returns>发送成功返回true，否则返回false</returns>
        </member>
        <member name="M:Tunynet.Email.EmailService.Send(System.Net.Mail.MailMessage,System.String@)">
            <summary>
            发送Email
            </summary>
            <param name="mail">待发送的邮件</param>
            <param name="errorMessage">错误信息</param>
            <returns>发送成功返回true，否则返回false</returns>
        </member>
        <member name="M:Tunynet.Email.EmailService.GetSmtpClient(Tunynet.Email.SmtpSettings)">
            <summary>
            获取StmpClient
            </summary>
        </member>
        <member name="M:Tunynet.Email.EmailService.NextSmtpSettings">
            <summary>
            获取下一个可以用的Smtp设置
            </summary>
            <param name="service"></param>
            <returns></returns>
        </member>
        <member name="P:Tunynet.Email.EmailService.AllSmtpSettings">
            <summary>
            可用的全部Smtp设置（如果此值为空，则采用默认设置）
            </summary>
        </member>
        <member name="T:Tunynet.Email.EmailTemplate">
            <summary>
            邮件模板
            </summary>
        </member>
        <member name="M:Tunynet.Email.EmailTemplate.#ctor(System.Xml.XmlNode)">
            <summary>
            EmailTemplate构造器
            </summary>
            <param name="rootNode">EmailTemplate所属xml文档节点</param>
        </member>
        <member name="P:Tunynet.Email.EmailTemplate.TemplateName">
            <summary>
            模板名称（在Email模板中必须保证唯一）
            </summary>
        </member>
        <member name="P:Tunynet.Email.EmailTemplate.From">
            <summary>
            发件人
            </summary>
        </member>
        <member name="P:Tunynet.Email.EmailTemplate.Subject">
            <summary>
            Email主题
            </summary>
        </member>
        <member name="P:Tunynet.Email.EmailTemplate.Body">
            <summary>
            邮件内容
            </summary>
        </member>
        <member name="P:Tunynet.Email.EmailTemplate.BodyUrl">
            <summary>
            用于获取邮件内容的URL
            </summary>
        </member>
        <member name="P:Tunynet.Email.EmailTemplate.Priority">
            <summary>
            Email优先级
            </summary>
        </member>
        <member name="T:Tunynet.Email.EmailBuilder">
            <summary>
            邮件构建器
            </summary>
        </member>
        <member name="M:Tunynet.Email.EmailBuilder.Instance">
            <summary>
            获取EmailBuilder实例
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Email.EmailBuilder.EnsureLoadTemplates">
            <summary>
            加载所有邮件模板，并预编译
            </summary>
            <remarks>在Starter中调用</remarks>
        </member>
        <member name="M:Tunynet.Email.EmailBuilder.Resolve(System.String,System.Dynamic.ExpandoObject,System.String,System.String)">
            <summary>
            生成MailMessage
            </summary>
            <param name="templateName">邮件模板名称</param>
            <param name="model">解析模板使用的数据</param>
            <param name="to">收件人</param>
            <param name="from">发件人</param>
            <returns>返回生成的MailMessage</returns>
        </member>
        <member name="M:Tunynet.Email.EmailBuilder.Resolve(System.String,System.Object,System.Collections.Generic.IEnumerable{System.String},System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            生成MailMessage
            </summary>
            <param name="templateName">邮件模板名称</param>
            <param name="model">解析模板使用的数据</param>
            <param name="from">发件人</param>
            <param name="to">收件人</param>
            <param name="cc">抄送地址</param>
            <param name="bcc">密送地址</param>
            <exception cref="T:Tunynet.CommonExceptionDescriptor">发件人不能为null</exception>
            <exception cref="T:Tunynet.CommonExceptionDescriptor">编译邮件模板标题时报错</exception>
            <exception cref="T:Tunynet.CommonExceptionDescriptor">编译邮件模板内容时报错</exception>
            <exception cref="T:Tunynet.CommonExceptionDescriptor">邮件模板中Body、BodyUrl必须填一个</exception>
            <returns>返回生成的MailMessage</returns>
        </member>
        <member name="M:Tunynet.Email.EmailBuilder.LoadEmailTemplates">
            <summary>
            加载Email模板
            </summary>
        </member>
        <member name="M:Tunynet.Email.EmailBuilder.GetEmailTemplate(System.String)">
            <summary>
            获取单个邮件模板
            </summary>
            <param name="templateName">模板名称</param>
            <exception cref="T:Tunynet.ResourceExceptionDescriptor">邮件模板不存在</exception>
            <returns>邮件模板</returns>
        </member>
        <member name="P:Tunynet.Email.EmailBuilder.EmailTemplates">
            <summary>
            加载的Email模板列表
            </summary>
            <remarks>仅用于测试</remarks>
        </member>
        <member name="T:Tunynet.Email.EmailQueueRepository">
            <summary>
            业务逻辑类
            </summary>
        </member>
        <member name="T:Tunynet.Repositories.Repository`1">
            <summary>
            Repository实现
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
        </member>
        <member name="T:Tunynet.Repositories.IRepository`1">
            <summary>
            用于处理Entity持久化操作
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
        </member>
        <member name="M:Tunynet.Repositories.IRepository`1.Insert(`0)">
            <summary>
            把实体entity添加到数据库
            </summary>
            <param name="entity">实体</param>
        </member>
        <member name="M:Tunynet.Repositories.IRepository`1.Update(`0)">
            <summary>
            把实体entiy更新到数据库
            </summary>
            <param name="entity">实体</param>
        </member>
        <member name="M:Tunynet.Repositories.IRepository`1.DeleteByEntityId(System.Object)">
            <summary>
            从数据库删除实体(by 主键)
            </summary>
            <param name="primaryKey">主键</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Repositories.IRepository`1.Delete(`0)">
            <summary>
            从数据库删除实体
            </summary>
            <param name="entity">实体</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Repositories.IRepository`1.Exists(System.Object)">
            <summary>
            依据主键检查实体是否存在于数据库
            </summary>
            <param name="primaryKey">主键</param>
        </member>
        <member name="M:Tunynet.Repositories.IRepository`1.Get(System.Object)">
            <summary>
            依据主键获取单个实体
            </summary>
            <remarks>
            自动对实体进行缓存（除非实体配置为不允许缓存）
            </remarks>
        </member>
        <member name="M:Tunynet.Repositories.IRepository`1.GetAll">
            <summary>
            获取所有实体（仅用于数据量少的情况）
            </summary>
            <remarks>
            自动对进行缓存（缓存策略与实体配置的缓存策略相同）
            </remarks>
        </member>
        <member name="M:Tunynet.Repositories.IRepository`1.GetAll(System.String)">
            <summary>
            获取所有实体（仅用于数据量少的情况）
            </summary>
            <param name="orderBy">排序字段（多个字段用逗号分隔）</param>
            <remarks>
            自动对进行缓存（缓存策略与实体配置的缓存策略相同）
            </remarks>
        </member>
        <member name="M:Tunynet.Repositories.IRepository`1.PopulateEntitiesByEntityIds``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            依据EntityId集合组装成实体集合（自动缓存）
            </summary>
            <param name="entityIds">主键集合</param>
        </member>
        <member name="F:Tunynet.Repositories.Repository`1.cacheService">
            <summary>
            缓存服务
            </summary> 
        </member>
        <member name="F:Tunynet.Repositories.Repository`1.database">
            <summary>
            数据库DAO对象
            </summary>
        </member>
        <member name="M:Tunynet.Repositories.Repository`1.CreateDAO">
            <summary>
            默认PetaPocoDatabase实例
            </summary>
        </member>
        <member name="M:Tunynet.Repositories.Repository`1.Insert(`0)">
            <summary>
            把实体entity添加到数据库
            </summary>
            <param name="entity">实体</param>
        </member>
        <member name="M:Tunynet.Repositories.Repository`1.Update(`0)">
            <summary>
            把实体entiy更新到数据库
            </summary>
            <param name="entity">实体</param>
        </member>
        <member name="M:Tunynet.Repositories.Repository`1.DeleteByEntityId(System.Object)">
            <summary>
            从数据库删除实体(by EntityId)
            </summary>
            <param name="entityId">主键</param>
            <returns>影响的记录数</returns>
        </member>
        <member name="M:Tunynet.Repositories.Repository`1.Delete(`0)">
            <summary>
            从数据库删除实体
            </summary>
            <param name="entity">实体</param>
            <returns>影响的记录数</returns>
        </member>
        <member name="M:Tunynet.Repositories.Repository`1.Exists(System.Object)">
            <summary>
            依据主键检查实体是否存在于数据库
            </summary>
            <param name="entityId">主键</param>
        </member>
        <member name="M:Tunynet.Repositories.Repository`1.Get(System.Object)">
            <summary>
            依据EntityId获取单个实体
            </summary>
            <remarks>
            自动对实体进行缓存（除非实体配置为不允许缓存）
            </remarks>
            <param name="entityId">实体Id</param>
        </member>
        <member name="M:Tunynet.Repositories.Repository`1.GetAll">
            <summary>
            获取所有实体（仅用于数据量少的情况）
            </summary>
            <remarks>
            自动对进行缓存（缓存策略与实体配置的缓存策略相同）
            </remarks>
            <returns>返回所有实体集合</returns>
        </member>
        <member name="M:Tunynet.Repositories.Repository`1.GetAll(System.String)">
            <summary>
            获取所有实体（仅用于数据量少的情况）
            </summary>        
            <remarks>
            自动对进行缓存（缓存策略与实体配置的缓存策略相同）
            </remarks>
            <param name="orderBy">排序字段（多个字段用逗号分隔）</param>
            <returns>返回按照orderBy排序的所有实体集合</returns>
        </member>
        <member name="M:Tunynet.Repositories.Repository`1.GetPagingEntities(System.Int32,System.Int32,PetaPoco.Sql)">
            <summary>
            获取分页查询数据
            </summary>
            <param name="pageSize">每页记录数</param>
            <param name="pageIndex">当前页码(从1开始)</param>
            <param name="sql">获取当前页码的数据的<see cref="T:PetaPoco.Sql">PetaPoco.Sql</see></param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Repositories.Repository`1.GetPagingEntities(System.Int32,System.Int32,Tunynet.Caching.CachingExpirationType,System.Func{System.String},System.Func{PetaPoco.Sql})">
            <summary>
            获取分页查询数据（启用缓存）
            </summary>
            <param name="pageSize">每页记录数</param>
            <param name="pageIndex">当前页码(从1开始)</param>
            <param name="cachingExpirationTypes">缓存策略</param>
            <param name="getCacheKey">生成cacheKey的委托</param>
            <param name="generateSql">生成PetaPoco.Sql的委托</param>        
            <returns></returns>
        </member>
        <member name="M:Tunynet.Repositories.Repository`1.GetTopEntities(System.Int32,Tunynet.Caching.CachingExpirationType,System.Func{System.String},System.Func{PetaPoco.Sql})">
            <summary>
            获取前topNumber条Entity（启用缓存）
            </summary>
            <remarks>
            一次性取出前SecondaryMaxRecords条记录
            </remarks>
            <param name="topNumber"></param>
            <param name="cachingExpirationTypes">缓存策略</param>
            <param name="getCacheKey">生成cacheKey的委托（CacheKey不要与topNumber相关）</param>
            <param name="generateSql">生成PetaPoco.Sql的委托</param>     
            <returns></returns>
        </member>
        <member name="M:Tunynet.Repositories.Repository`1.PopulateEntitiesByEntityIds``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            依据EntityId集合组装成实体集合（自动缓存）
            </summary>
            <param name="entityIds">主键集合</param>
        </member>
        <member name="M:Tunynet.Repositories.Repository`1.OnInserted(`0)">
            <summary>
            数据库新增实体后自动调用该方法
            </summary>
        </member>
        <member name="M:Tunynet.Repositories.Repository`1.OnUpdated(`0)">
            <summary>
            数据库更新实体后自动调用该方法
            </summary>
        </member>
        <member name="M:Tunynet.Repositories.Repository`1.OnDeleted(`0)">
            <summary>
            数据库删除实体后自动调用该方法
            </summary>
            <param name="entity"></param>
        </member>
        <member name="P:Tunynet.Repositories.Repository`1.RealTimeCacheHelper">
            <summary>
            缓存设置
            </summary>
        </member>
        <member name="P:Tunynet.Repositories.Repository`1.CacheablePageCount">
            <summary>
            可缓存的列表缓存页数
            </summary>
        </member>
        <member name="P:Tunynet.Repositories.Repository`1.PrimaryMaxRecords">
            <summary>
            主流查询最大允许返回记录数
            </summary>
        </member>
        <member name="P:Tunynet.Repositories.Repository`1.SecondaryMaxRecords">
            <summary>
            非主流查询最大允许返回记录数
            </summary>
            <remarks>
            例如：排行数据
            </remarks>
        </member>
        <member name="T:Tunynet.Email.IEmailQueueRepository">
            <summary>
            Email队列基类
            </summary>
        </member>
        <member name="M:Tunynet.Email.IEmailQueueRepository.Dequeue(System.Int32)">
            <summary>
            按照优先级从高到低排序，获取达到NextTryTime的前N条邮件
            </summary>
            <param name="maxNumber">最大记录数</param>
        </member>
        <member name="M:Tunynet.Email.EmailQueueRepository.Dequeue(System.Int32)">
            <summary>
            按照优先级从高到低排序，获取达到NextTryTime的前N条邮件
            </summary>
            <param name="maxNumber">最大记录数</param>
        </member>
        <member name="T:Tunynet.Email.ISmtpSettingsRepository">
            <summary>
            Smtp设置的数据访问类
            </summary>
        </member>
        <member name="T:Tunynet.Email.SmtpSettingsRepository">
            <summary>
            Smtp设置的数据访问类
            </summary>
        </member>
        <member name="T:Tunynet.Email.Tasks.EmailTask">
            <summary>
            邮件发送自运行任务
            </summary>
        </member>
        <member name="T:Tunynet.Tasks.ITask">
            <summary>
            用于注册任务的接口
            </summary>
            <remarks>所有任务都需要实现此接口</remarks>
        </member>
        <member name="M:Tunynet.Tasks.ITask.Execute(Tunynet.Tasks.TaskDetail)">
            <summary>
            执行任务的方法
            </summary>
            <param name=" taskDetail">任务配置状态信息</param>
        </member>
        <member name="M:Tunynet.Email.Tasks.EmailTask.Execute(Tunynet.Tasks.TaskDetail)">
            <summary>
            任务执行的内容
            </summary>
            <param name="taskDetail">任务配置状态信息</param>
        </member>
        <member name="T:Tunynet.DefaultRunningEnvironment">
            <summary>
            默认运行环境实现
            </summary>
        </member>
        <member name="T:Tunynet.IRunningEnvironment">
            <summary>
            运行环境接口
            </summary>
        </member>
        <member name="M:Tunynet.IRunningEnvironment.RestartAppDomain">
            <summary>
            重新启动AppDomain
            </summary>
        </member>
        <member name="P:Tunynet.IRunningEnvironment.IsFullTrust">
            <summary>
            是否完全信任运行环境
            </summary>
        </member>
        <member name="M:Tunynet.DefaultRunningEnvironment.RestartAppDomain">
            <summary>
            重新启动AppDomain
            </summary>
        </member>
        <member name="M:Tunynet.DefaultRunningEnvironment.TryWriteWebConfig">
            <summary>
            尝试修改web.config最后更新时间
            </summary>
            <remarks>目的是使应用程序自动重新加载</remarks>
            <returns>修改成功返回true，否则返回false</returns>
        </member>
        <member name="M:Tunynet.DefaultRunningEnvironment.TryWriteBinFolder">
            <summary>
            尝试引起bin文件夹的改动
            </summary>
            <remarks>目的是使应用程序自动重新加载</remarks>
            <returns>成功写入返回true，否则返回false</returns>
        </member>
        <member name="P:Tunynet.DefaultRunningEnvironment.IsFullTrust">
            <summary>
            是否完全信任运行环境
            </summary>
        </member>
        <member name="T:Tunynet.Events.CommonEventArgs">
            <summary>
            通用事件参数
            </summary>
        </member>
        <member name="M:Tunynet.Events.CommonEventArgs.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="eventOperationType">事件操作类型
            <remarks>
            建议使用<see cref="T:Tunynet.Events.EventOperationType"/>协助输入，例如：<br/>
            EventOperationType.Instance().Create()
            </remarks>
            </param>
        </member>
        <member name="M:Tunynet.Events.CommonEventArgs.#ctor(System.String,System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="eventOperationType">事件操作类型
            <remarks>
            建议使用<see cref="T:Tunynet.Events.EventOperationType"/>协助输入，例如：<br/>
            EventOperationType.Instance().Create()
            </remarks>
            </param>
            <param name="applicationId">应用Id</param>
        </member>
        <member name="P:Tunynet.Events.CommonEventArgs.EventOperationType">
            <summary>
            事件操作类型 
            </summary>
            <remarks>
            建议使用<see cref="T:Tunynet.Events.EventOperationType"/>协助输入，例如：<br/>
            EventOperationType.Instance().Create()
            </remarks>
        </member>
        <member name="P:Tunynet.Events.CommonEventArgs.ApplicationId">
            <summary>
            应用Id
            </summary>
        </member>
        <member name="P:Tunynet.Events.CommonEventArgs.OperatorInfo">
            <summary>
            操作者信息
            </summary>
        </member>
        <member name="T:Tunynet.Events.EventBus`1">
            <summary>
            事件总线（用于定义事件、触发事件）
            </summary>
            <typeparam name="S">触发事件的对象类型</typeparam>    
        </member>
        <member name="T:Tunynet.Events.EventBus`2">
            <summary>
            事件总线（用于定义事件、触发事件）
            </summary>
            <typeparam name="S">触发事件的对象类型</typeparam> 
            <typeparam name="T">通用事件参数</typeparam>
        </member>
        <member name="T:Tunynet.Events.IEventBus`2">
            <summary>
            事件总线接口
            </summary>
            <typeparam name="S">触发事件的对象类型</typeparam>
            <typeparam name="A">事件参数的对象类型</typeparam>
        </member>
        <member name="M:Tunynet.Events.IEventBus`2.OnBefore(`0,`1)">
            <summary>
            触发操作执行前事件
            </summary>
            <param name="sender">触发事件的对象</param>
            <param name="eventArgs">事件参数</param>
        </member>
        <member name="M:Tunynet.Events.IEventBus`2.OnAfter(`0,`1)">
            <summary>
            触发操作执行后事件
            </summary>
            <param name="sender">触发事件的对象</param>
            <param name="eventArgs">事件参数</param>
        </member>
        <member name="M:Tunynet.Events.IEventBus`2.OnBeforeWithHistory(`0,`1,`0)">
            <summary>
            触发含历史数据操作执行前事件
            </summary>
            <param name="sender">触发事件的对象</param>
            <param name="eventArgs">事件参数</param>
            <param name="historyData">触发事件对象的历史数据（例如S从一种状态变更为另一种状态，historyData指变更前的对象）</param>
        </member>
        <member name="M:Tunynet.Events.IEventBus`2.OnAfterWithHistory(`0,`1,`0)">
            <summary>
            触发含历史数据操作执行后事件
            </summary>
            <param name="sender">触发事件的对象</param>
            <param name="eventArgs">事件参数</param>
            <param name="historyData">触发事件对象的历史数据（例如S从一种状态变更为另一种状态，historyData指变更前的对象）</param>
        </member>
        <member name="M:Tunynet.Events.IEventBus`2.OnBatchBefore(System.Collections.Generic.IEnumerable{`0},`1)">
            <summary>
            触发批量操作执行前事件
            </summary>
            <param name="senders">触发事件的对象集合</param>
            <param name="eventArgs">事件参数</param>
        </member>
        <member name="M:Tunynet.Events.IEventBus`2.OnBatchAfter(System.Collections.Generic.IEnumerable{`0},`1)">
            <summary>
            触发批量操作执行后事件
            </summary>
            <param name="senders">触发事件的对象集合</param>
            <param name="eventArgs">事件参数</param>
        </member>
        <member name="E:Tunynet.Events.IEventBus`2.Before">
            <summary>
            操作执行前事件
            </summary>
        </member>
        <member name="E:Tunynet.Events.IEventBus`2.After">
            <summary>
            操作执行后事件
            </summary>
        </member>
        <member name="E:Tunynet.Events.IEventBus`2.BeforeWithHistory">
            <summary>
            含历史数据操作执行前事件
            </summary>
        </member>
        <member name="E:Tunynet.Events.IEventBus`2.AfterWithHistory">
            <summary>
            含历史数据操作执行后事件
            </summary>
        </member>
        <member name="E:Tunynet.Events.IEventBus`2.BatchBefore">
            <summary>
            批量操作执行前事件
            </summary>
        </member>
        <member name="E:Tunynet.Events.IEventBus`2.BatchAfter">
            <summary>
            批量操作执行后事件
            </summary>
        </member>
        <member name="M:Tunynet.Events.EventBus`2.Instance">
            <summary>
            获取实例
            </summary>
            <returns>返回EventBus实例</returns>
        </member>
        <member name="M:Tunynet.Events.EventBus`2.#ctor">
            <summary>
            私有构造函数
            </summary>
        </member>
        <member name="M:Tunynet.Events.EventBus`2.OnBefore(`0,`1)">
            <summary>
            触发操作执行前事件
            </summary>
            <param name="sender">触发事件的对象</param>
            <param name="eventArgs">事件参数</param>
        </member>
        <member name="M:Tunynet.Events.EventBus`2.OnAfter(`0,`1)">
            <summary>
            触发操作执行后事件
            </summary>
            <param name="sender">触发事件的对象</param>
            <param name="eventArgs">事件参数</param>
        </member>
        <member name="M:Tunynet.Events.EventBus`2.OnBeforeWithHistory(`0,`1,`0)">
            <summary>
            触发含历史数据操作执行前事件
            </summary>
            <param name="sender">触发事件的对象</param>
            <param name="eventArgs">事件参数</param>
            <param name="historyData">触发事件对象的历史数据（例如S从一种状态变更为另一种状态，historyData指变更前的对象）</param>
        </member>
        <member name="M:Tunynet.Events.EventBus`2.OnAfterWithHistory(`0,`1,`0)">
            <summary>
            触发含历史数据操作执行后事件
            </summary>
            <param name="sender">触发事件的对象</param>
            <param name="eventArgs">事件参数</param>
            <param name="historyData">触发事件对象的历史数据（例如S从一种状态变更为另一种状态，historyData指变更前的对象）</param>
        </member>
        <member name="M:Tunynet.Events.EventBus`2.OnBatchBefore(System.Collections.Generic.IEnumerable{`0},`1)">
            <summary>
            触发批量操作执行前事件
            </summary>
            <param name="senders">触发事件的对象集合</param>
            <param name="eventArgs">事件参数</param>
        </member>
        <member name="M:Tunynet.Events.EventBus`2.OnBatchAfter(System.Collections.Generic.IEnumerable{`0},`1)">
            <summary>
            触发批量操作执行后事件
            </summary>
            <param name="senders">触发事件的对象集合</param>
            <param name="eventArgs">事件参数</param>
        </member>
        <member name="E:Tunynet.Events.EventBus`2.Before">
            <summary>
            操作执行前事件
            </summary>
        </member>
        <member name="E:Tunynet.Events.EventBus`2.After">
            <summary>
            操作执行后事件
            </summary>
        </member>
        <member name="E:Tunynet.Events.EventBus`2.BeforeWithHistory">
            <summary>
            含历史数据操作执行前事件
            </summary>
        </member>
        <member name="E:Tunynet.Events.EventBus`2.AfterWithHistory">
            <summary>
            含历史数据操作执行后事件
            </summary>
        </member>
        <member name="E:Tunynet.Events.EventBus`2.BatchBefore">
            <summary>
            批量操作执行前事件
            </summary>
        </member>
        <member name="E:Tunynet.Events.EventBus`2.BatchAfter">
            <summary>
            批量操作执行后事件
            </summary>
        </member>
        <member name="M:Tunynet.Events.EventBus`1.Instance">
            <summary>
            获取实例
            </summary>
            <returns>返回EventBus实例</returns>
        </member>
        <member name="T:Tunynet.Events.EventOperationType">
            <summary>
            事件操作类型
            </summary>
        </member>
        <member name="M:Tunynet.Events.EventOperationType.Instance">
            <summary>
            获取实例
            </summary>
            <returns>返回EventOperationType对象</returns>
        </member>
        <member name="M:Tunynet.Events.EventOperationType.Create">
            <summary>
            创建
            </summary>
        </member>
        <member name="M:Tunynet.Events.EventOperationType.Update">
            <summary>
            更新
            </summary>
        </member>
        <member name="M:Tunynet.Events.EventOperationType.Delete">
            <summary>
            删除
            </summary>
        </member>
        <member name="M:Tunynet.Events.EventOperationType.Approved">
            <summary>
            通过审核
            </summary>
        </member>
        <member name="M:Tunynet.Events.EventOperationType.Disapproved">
            <summary>
            不通过审核
            </summary>
        </member>
        <member name="M:Tunynet.Events.EventOperationType.SetEssential">
            <summary>
            设置精华
            </summary>
        </member>
        <member name="M:Tunynet.Events.EventOperationType.CancelEssential">
            <summary>
            取消精华
            </summary>
        </member>
        <member name="M:Tunynet.Events.EventOperationType.SetSticky">
            <summary>
            设置置顶
            </summary>
        </member>
        <member name="M:Tunynet.Events.EventOperationType.CancelSticky">
            <summary>
            取消置顶
            </summary>
        </member>
        <member name="M:Tunynet.Events.EventOperationType.SetCategory">
            <summary>
            设置分类
            </summary>
        </member>
        <member name="M:Tunynet.Events.EventOperationType.ControlledView">
            <summary>
            受控查看
            </summary>        
        </member>
        <member name="T:Tunynet.Events.CommonEventHandler`2">
            <summary>
            用于事件处理的通用委托
            </summary>
            <typeparam name="S">触发事件的对象类型</typeparam>
            <typeparam name="A">事件参数的对象类型</typeparam>
            <param name="sender">触发事件的对象</param>
            <param name="eventArgs">事件参数</param>
        </member>
        <member name="T:Tunynet.Events.EventHandlerWithHistory`2">
            <summary>
            用于事件处理带历史数据的委托
            </summary>
            <typeparam name="S">触发事件的对象类型</typeparam>
            <typeparam name="A">事件参数的对象类型</typeparam>
            <param name="sender">触发事件的对象</param>
            <param name="eventArgs">事件参数</param>
            <param name="historyData">触发事件对象的历史数据（例如S从一种状态变更为另一种状态，historyData指变更前的对象）</param>
        </member>
        <member name="T:Tunynet.Events.BatchEventHandler`2">
            <summary>
            一组批量事件处理的委托
            </summary>
            <typeparam name="S">触发事件的对象类型</typeparam>
            <typeparam name="A">事件参数的对象类型</typeparam>
            <param name="senders">触发事件的对象集合</param>
            <param name="eventArgs">事件参数</param>
        </member>
        <member name="T:Tunynet.Events.IEventMoudle">
            <summary>
            事件处理程序模块接口
            </summary>
        </member>
        <member name="M:Tunynet.Events.IEventMoudle.RegisterEventHandler">
            <summary>
            注册事件处理程序
            </summary>
        </member>
        <member name="T:Tunynet.ExceptionDescriptor">
            <summary>
            异常表述器
            </summary>
        </member>
        <member name="M:Tunynet.ExceptionDescriptor.GetLoggingMessage">
            <summary>
            获取记入日志的内容
            </summary>
            <returns>返回记入日志的内容</returns>
        </member>
        <member name="M:Tunynet.ExceptionDescriptor.GetFriendlyMessage">
            <summary>
            获取友好的异常提示信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tunynet.ExceptionDescriptor.GetOperationContextMessage">
            <summary>
            返回操作的上下文信息
            </summary>
            <returns></returns>
        </member>
        <member name="P:Tunynet.ExceptionDescriptor.IsLogEnabled">
            <summary>
            是否允许记入系统日志
            </summary>
        </member>
        <member name="P:Tunynet.ExceptionDescriptor.LogLevel">
            <summary>
            日志级别
            </summary>
        </member>
        <member name="P:Tunynet.ExceptionDescriptor.Message">
            <summary>
            异常信息
            </summary>
        </member>
        <member name="P:Tunynet.ExceptionDescriptor.MessageDescriptor">
            <summary>
            异常信息描述
            </summary>
        </member>
        <member name="T:Tunynet.ExceptionMessageDescriptor">
            <summary>
            异常信息描述
            </summary>
        </member>
        <member name="M:Tunynet.ExceptionMessageDescriptor.#ctor">
            <summary>
            构造器
            </summary>
        </member>
        <member name="M:Tunynet.ExceptionMessageDescriptor.#ctor(System.String,System.Object[])">
            <summary>
            构造器
            </summary>
            <param name="messageFormatResourceKey">格式化异常信息ResourceKey</param>
            <param name="args">格式化异常信息参数</param>
        </member>
        <member name="M:Tunynet.ExceptionMessageDescriptor.#ctor(System.String,System.Int32,System.Object[])">
            <summary>
            构造器
            </summary>
            <param name="messageFormatResourceKey">格式化异常信息ResourceKey</param>
            <param name="applicationId">应用Id</param>
            <param name="args">格式化异常信息参数</param>
        </member>
        <member name="M:Tunynet.ExceptionMessageDescriptor.GetExceptionMeassage">
            <summary>
            获取异常信息
            </summary>
            <returns></returns>
        </member>
        <member name="P:Tunynet.ExceptionMessageDescriptor.MessageFormat">
            <summary>
            格式化异常信息
            </summary>
        </member>
        <member name="P:Tunynet.ExceptionMessageDescriptor.MessageFormatResourceKey">
            <summary>
            格式化异常信息ResourceKey
            </summary>
        </member>
        <member name="P:Tunynet.ExceptionMessageDescriptor.ApplicationId">
            <summary>
            应用Id
            </summary>
        </member>
        <member name="P:Tunynet.ExceptionMessageDescriptor.Arguments">
            <summary>
            格式化异常信息参数
            </summary>
        </member>
        <member name="T:Tunynet.ExceptionFacade">
            <summary>
            异常Facade，统一调用自定义的异常
            </summary>
        </member>
        <member name="M:Tunynet.ExceptionFacade.#ctor(Tunynet.ExceptionDescriptor,System.Exception)">
            <summary>
            构造函数
            </summary>
            <param name="exceptionDescriptor">异常表述器</param>
            <param name="innerException">异常</param>
        </member>
        <member name="M:Tunynet.ExceptionFacade.#ctor(System.String,System.Exception)">
            <summary>
            构造函数
            </summary>
            <param name="message">异常信息</param>
            <param name="innerException">异常</param>
        </member>
        <member name="M:Tunynet.ExceptionFacade.Log">
            <summary>
            记入系统日志
            </summary>
        </member>
        <member name="P:Tunynet.ExceptionFacade.Message">
            <summary>
            异常显示信息
            </summary>
        </member>
        <member name="P:Tunynet.ExceptionFacade.OperationContextMessage">
            <summary>
            上下文信息
            </summary>
        </member>
        <member name="T:Tunynet.PermissionExceptionDescriptor">
            <summary>
            权限相关异常描述
            </summary>
        </member>
        <member name="M:Tunynet.PermissionExceptionDescriptor.#ctor">
            <summary>
            构造器
            </summary>
        </member>
        <member name="M:Tunynet.PermissionExceptionDescriptor.#ctor(System.String)">
            <summary>
            构造器
            </summary>
            <param name="message">异常信息</param>
        </member>
        <member name="M:Tunynet.PermissionExceptionDescriptor.#ctor(System.String,System.Object[])">
            <summary>
            构造器
            </summary>
            <param name="messageFormat">格式化异常信息</param>
            <param name="args">格式化异常信息参数</param>
        </member>
        <member name="M:Tunynet.PermissionExceptionDescriptor.GetLoggingMessage">
            <summary>
            获取记入日志的内容
            </summary>
            <returns>返回记入日志的内容</returns>
        </member>
        <member name="M:Tunynet.PermissionExceptionDescriptor.WithBasicManagementAccessDenied(System.String)">
            <summary>
            没有管理权限
            </summary>
            <param name="content">管理的内容，例如“博客文章”</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.PermissionExceptionDescriptor.WithAccessDenied">
            <summary>
            没有足够的访问权限
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tunynet.PermissionExceptionDescriptor.WithPostAccessDenied(System.String)">
            <summary>
            没有发布内容的权限
            </summary>
            <param name="content">发布的内容，例如“博客文章”</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.PermissionExceptionDescriptor.WithPostReplyAccessDenied">
            <summary>
            没有回复的权限
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tunynet.PermissionExceptionDescriptor.WithLicenseAuthorizeDenied">
            <summary>
            找不到合法的授权文件
            </summary>
            <returns></returns>
        </member>
        <member name="T:Tunynet.CommonExceptionDescriptor">
            <summary>
            通用异常描述
            </summary>
        </member>
        <member name="M:Tunynet.CommonExceptionDescriptor.#ctor">
            <summary>
            构造器
            </summary>
        </member>
        <member name="M:Tunynet.CommonExceptionDescriptor.#ctor(System.String)">
            <summary>
            构造器
            </summary>
            <param name="message">异常信息</param>
        </member>
        <member name="M:Tunynet.CommonExceptionDescriptor.#ctor(System.String,System.Object[])">
            <summary>
            构造器
            </summary>
            <param name="messageFormat">格式化异常信息</param>
            <param name="args">格式化异常信息参数</param>
        </member>
        <member name="M:Tunynet.CommonExceptionDescriptor.GetLoggingMessage">
            <summary>
            获取记入日志的内容
            </summary>
            <returns>返回记入日志的内容</returns>
        </member>
        <member name="M:Tunynet.CommonExceptionDescriptor.WithRegisterDenied">
            <summary>
            禁止注册
            </summary>
        </member>
        <member name="M:Tunynet.CommonExceptionDescriptor.WithEmailUnableToSend(System.String)">
            <summary>
            发送邮件时产生异常
            </summary>
            <param name="message">追加的异常信息</param>
        </member>
        <member name="M:Tunynet.CommonExceptionDescriptor.WithFloodDenied">
            <summary>
            不允许频繁发帖
            </summary>
        </member>
        <member name="M:Tunynet.CommonExceptionDescriptor.WithUnauthorizedAccessException">
            <summary>
            I/O或无访问权限引发的异常
            </summary>
        </member>
        <member name="M:Tunynet.CommonExceptionDescriptor.WithUnknownError">
            <summary>
            未知错误
            </summary>
        </member>
        <member name="T:Tunynet.ResourceExceptionDescriptor">
            <summary>
            资源相关异常描述
            </summary>
        </member>
        <member name="M:Tunynet.ResourceExceptionDescriptor.#ctor">
            <summary>
            构造器
            </summary>
        </member>
        <member name="M:Tunynet.ResourceExceptionDescriptor.#ctor(System.String)">
            <summary>
            构造器
            </summary>
            <param name="message">异常信息</param>
        </member>
        <member name="M:Tunynet.ResourceExceptionDescriptor.#ctor(System.String,System.Object[])">
            <summary>
            构造器
            </summary>
            <param name="messageFormat">格式化异常信息</param>
            <param name="args">格式化异常信息参数</param>
        </member>
        <member name="M:Tunynet.ResourceExceptionDescriptor.GetLoggingMessage">
            <summary>
            获取记入日志的内容
            </summary>
            <returns>返回记入日志的内容</returns>
        </member>
        <member name="M:Tunynet.ResourceExceptionDescriptor.WithContentNotFound(System.String,System.Object)">
            <summary>
            内容不存在
            </summary>
            <param name="title">要访问内容的名称或标题，例如“群组-zone”</param>
            <param name="contentId">要访问内容的Id</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.ResourceExceptionDescriptor.WithUserNotFound(System.String,System.Int32)">
            <summary>
            用户不存在
            </summary>
            <param name="userName">用户名</param>
            <param name="userId">UserId</param>
            <returns></returns>
        </member>
        <member name="T:Tunynet.FileStore.DefaultStoreFile">
            <summary>
            存储文件默认实现
            </summary>
        </member>
        <member name="T:Tunynet.FileStore.IStoreFile">
            <summary>
            存储中的文件
            </summary>
        </member>
        <member name="M:Tunynet.FileStore.IStoreFile.OpenReadStream">
            <summary>
            获取用于读取文件的Stream
            </summary>
        </member>
        <member name="P:Tunynet.FileStore.IStoreFile.Name">
            <summary>
            文件名称
            </summary>
        </member>
        <member name="P:Tunynet.FileStore.IStoreFile.Extension">
            <summary>
            文件扩展名
            </summary>
        </member>
        <member name="P:Tunynet.FileStore.IStoreFile.Size">
            <summary>
            文件大小
            </summary>
        </member>
        <member name="P:Tunynet.FileStore.IStoreFile.RelativePath">
            <summary>
            相对StoragePath的路径
            </summary>
        </member>
        <member name="P:Tunynet.FileStore.IStoreFile.LastModified">
            <summary>
            最后修改时间
            </summary>
        </member>
        <member name="M:Tunynet.FileStore.DefaultStoreFile.#ctor(System.String,System.IO.FileInfo)">
            <summary>
            构造函数
            </summary>
            <param name="relativePath"></param>
            <param name="fileInfo"></param>
        </member>
        <member name="M:Tunynet.FileStore.DefaultStoreFile.OpenReadStream">
            <summary>
            获取用于读取文件的Stream
            </summary>
        </member>
        <member name="P:Tunynet.FileStore.DefaultStoreFile.Name">
            <summary>
            文件名称
            </summary>
        </member>
        <member name="P:Tunynet.FileStore.DefaultStoreFile.Extension">
            <summary>
            文件扩展名
            </summary>
        </member>
        <member name="P:Tunynet.FileStore.DefaultStoreFile.Size">
            <summary>
            文件大小
            </summary>
        </member>
        <member name="P:Tunynet.FileStore.DefaultStoreFile.LastModified">
            <summary>
            最后更新时间
            </summary>
        </member>
        <member name="P:Tunynet.FileStore.DefaultStoreFile.RelativePath">
            <summary>
            文件相对路径
            </summary>
        </member>
        <member name="P:Tunynet.FileStore.DefaultStoreFile.FullLocalPath">
            <summary>
            完整文件物理路径(带fileName)
            </summary>
        </member>
        <member name="T:Tunynet.FileStore.DefaultStoreProvider">
            <summary>
            默认文件存储提供者
            </summary>
        </member>
        <member name="T:Tunynet.FileStore.IStoreProvider">
            <summary>
            文件存储提供者
            </summary>
        </member>
        <member name="M:Tunynet.FileStore.IStoreProvider.GetFile(System.String,System.String)">
            <summary>
            通过相对文件路径及文件名称获取文件.
            </summary>
            <param name="relativePath">相对文件路径(例如：000\000\000\002）</param>
            <param name="fileName">文件名称</param>
        </member>
        <member name="M:Tunynet.FileStore.IStoreProvider.GetFile(System.String)">
            <summary>
            通过相对文件名称获取文件.
            </summary>
            <param name="relativeFileName">相对文件名称(例如：000\000\000\002\2.jpg）</param>
        </member>
        <member name="M:Tunynet.FileStore.IStoreProvider.GetFiles(System.String,System.Boolean)">
            <summary>
            获取文件路径中的所有文件
            </summary>
            <param name="relativePath">相对文件路径</param>
            <param name="isOnlyCurrentFolder">是否只获取当前层次的文件</param>
        </member>
        <member name="M:Tunynet.FileStore.IStoreProvider.AddOrUpdateFile(System.String,System.String,System.IO.Stream)">
            <summary>
            创建或更新一个文件
            </summary>
            <param name="relativePath">相对文件路径</param>
            <param name="fileName">文件名称</param>
            <param name="contentStream">The stream containing the content of the file.</param>
        </member>
        <member name="M:Tunynet.FileStore.IStoreProvider.DeleteFile(System.String,System.String)">
            <summary>
            通过文件路径及文件名称删除文件.
            </summary>
            <param name="relativePath">文件路径</param>
            <param name="fileName">文件名称</param>
        </member>
        <member name="M:Tunynet.FileStore.IStoreProvider.DeleteFiles(System.String,System.String)">
            <summary>
            删除文件路径中以fileNamePrefix开头的文件
            </summary>
            <param name="relativePath">相对文件路径</param>
            <param name="fileNamePrefix">文件名称前缀</param>
        </member>
        <member name="M:Tunynet.FileStore.IStoreProvider.DeleteFolder(System.String)">
            <summary>
            删除文件路径中的所有文件
            </summary>
            <param name="relativePath">相对文件路径</param>
        </member>
        <member name="M:Tunynet.FileStore.IStoreProvider.GetDirectlyUrl(System.String,System.String)">
            <summary>
            获取文件直连URL
            </summary>
            <param name="relativePath">文件相对路径</param>
            <param name="fileName">文件名称</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.FileStore.IStoreProvider.GetDirectlyUrl(System.String,System.String,System.DateTime)">
            <summary>
            获取文件直连URL
            </summary>
            <param name="relativePath">文件相对路径</param>
            <param name="fileName">文件名称</param>
            <param name="lastModified">最后修改时间</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.FileStore.IStoreProvider.GetDirectlyUrl(System.String)">
            <summary>
            获取文件直连URL
            </summary>
            <param name="relativeFileName">文件相对路径（包含文件名）</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.FileStore.IStoreProvider.GetDirectlyUrl(System.String,System.DateTime)">
            <summary>
            获取文件直连URL
            </summary>
            <param name="relativeFileName">文件相对路径（包含文件名）</param>
            <param name="lastModified">最后修改时间</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.FileStore.IStoreProvider.GetRelativePath(System.String,System.Boolean)">
            <summary>
            从全路径获取相对路径
            </summary>
            <param name="fullLocalPath"></param>
            <param name="pathIncludesFilename"></param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.FileStore.IStoreProvider.GetFullLocalPath(System.String,System.String)">
            <summary>
            获取完整的本地物理路径
            </summary>
            <param name="relativePath">相对文件路径</param>
            <param name="fileName">文件名称</param>
        </member>
        <member name="M:Tunynet.FileStore.IStoreProvider.GetFullLocalPath(System.String)">
            <summary>
            获取完整的本地物理路径
            </summary>
            <param name="relativeFileName">相对文件路径及名称</param>
        </member>
        <member name="M:Tunynet.FileStore.IStoreProvider.JoinDirectory(System.String[])">
            <summary>
            把多个目录组成部分连接成完整目录
            </summary>
            <param name="directoryParts">目录组成部分</param>
            <returns>返回合并到一起的目录</returns>
        </member>
        <member name="M:Tunynet.FileStore.IStoreProvider.GetResizedImage(System.String,System.String,System.Drawing.Size,Tunynet.Imaging.ResizeMethod)">
            <summary>
            获取不同尺寸大小的图片
            </summary>
            <param name="fileRelativePath">文件的相对路径</param>
            <param name="filename">文件名称</param>
            <param name="size">图片尺寸</param>
            <param name="resizeMethod">图像缩放方式</param>
        </member>
        <member name="M:Tunynet.FileStore.IStoreProvider.GetSizeImageName(System.String,System.Drawing.Size,Tunynet.Imaging.ResizeMethod)">
            <summary>
            获取各种尺寸图片的名称
            </summary>
            <param name="filename">文件名称</param>
            <param name="size">图片尺寸</param>
        </member>
        <member name="P:Tunynet.FileStore.IStoreProvider.StoreRootPath">
            <summary>
            该Providate文件存储根路径
            </summary>
        </member>
        <member name="P:Tunynet.FileStore.IStoreProvider.DirectlyRootUrl">
             <summary>
            直连URL根路径
             </summary>
        </member>
        <member name="M:Tunynet.FileStore.DefaultStoreProvider.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="storeRootPath"></param>
        </member>
        <member name="M:Tunynet.FileStore.DefaultStoreProvider.#ctor(System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="storeRootPath"></param>
            <param name="directlyRootUrl"></param>
        </member>
        <member name="M:Tunynet.FileStore.DefaultStoreProvider.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            构造函数（适用于访问UNC地址）
            </summary>
            <param name="storeRootPath">UNC共享目录</param>
            <param name="directlyRootUrl">直连地址根路径</param>
            <param name="username">访问UNC地址的用户名</param>
            <param name="password">访问UNC地址的密码</param>
        </member>
        <member name="M:Tunynet.FileStore.DefaultStoreProvider.#cctor">
            <summary>
            静态构造函数
            </summary>
        </member>
        <member name="M:Tunynet.FileStore.DefaultStoreProvider.GetFile(System.String,System.String)">
            <summary>
            通过相对文件路径及文件名称获取文件.
            </summary>
            <param name="relativePath">相对文件路径(例如：2012\03\16）</param>
            <param name="fileName">文件名称</param>
        </member>
        <member name="M:Tunynet.FileStore.DefaultStoreProvider.GetFile(System.String)">
            <summary>
            通过相对文件名称获取文件.
            </summary>
            <param name="relativeFileName">相对文件名称(例如：000\000\000\002\2.jpg）</param>
        </member>
        <member name="M:Tunynet.FileStore.DefaultStoreProvider.GetFiles(System.String,System.Boolean)">
            <summary>
            获取文件路径中的所有文件
            </summary>
            <exception cref="T:System.ArgumentException">文件路径不正确时抛出异常</exception>
            <param name="relativePath">相对文件路径</param>
            <param name="isOnlyCurrentFolder">是否只获取当前层次的文件</param>
        </member>
        <member name="M:Tunynet.FileStore.DefaultStoreProvider.AddOrUpdateFile(System.String,System.String,System.IO.Stream)">
            <summary>
            创建或更新一个文件
            </summary>
            <param name="relativePath">相对文件路径</param>
            <param name="fileName">文件名称</param>
            <param name="contentStream">The stream containing the content of the file.</param>
        </member>
        <member name="M:Tunynet.FileStore.DefaultStoreProvider.DeleteFile(System.String,System.String)">
            <summary>
            通过文件路径及文件名称删除文件.
            </summary>
            <param name="relativePath">文件路径</param>
            <param name="fileName">文件名称</param>
        </member>
        <member name="M:Tunynet.FileStore.DefaultStoreProvider.DeleteFiles(System.String,System.String)">
            <summary>
            删除文件路径中以fileNamePrefix开头的文件
            </summary>
            <param name="relativePath">相对文件路径</param>
            <param name="fileNamePrefix">文件名称前缀</param>
        </member>
        <member name="M:Tunynet.FileStore.DefaultStoreProvider.DeleteFolder(System.String)">
            <summary>
            删除文件目录
            </summary>
            <param name="relativePath">相对文件路径</param>
        </member>
        <member name="M:Tunynet.FileStore.DefaultStoreProvider.GetDirectlyUrl(System.String,System.String)">
            <summary>
            获取文件直连URL
            </summary>
            <param name="relativePath">文件相对路径</param>
            <param name="fileName">文件名称</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.FileStore.DefaultStoreProvider.GetDirectlyUrl(System.String,System.String,System.DateTime)">
            <summary>
            获取文件直连URL
            </summary>
            <param name="relativePath">文件相对路径</param>
            <param name="fileName">文件名称</param>
            <param name="lastModified">最后修改时间</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.FileStore.DefaultStoreProvider.GetDirectlyUrl(System.String)">
            <summary>
            获取文件直连URL
            </summary>
            <param name="relativeFileName">文件相对路径（包含文件名）</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.FileStore.DefaultStoreProvider.GetDirectlyUrl(System.String,System.DateTime)">
            <summary>
            获取文件直连URL
            </summary>
            <param name="relativeFileName">文件相对路径（包含文件名）</param>
            <param name="lastModified">最后修改时间</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.FileStore.DefaultStoreProvider.JoinDirectory(System.String[])">
            <summary>
            连接目录
            </summary>
            <param name="directoryParts"></param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.FileStore.DefaultStoreProvider.GetResizedImage(System.String,System.String,System.Drawing.Size,Tunynet.Imaging.ResizeMethod)">
            <summary>
            获取不同尺寸大小的图片
            </summary>
            <param name="fileRelativePath">文件的相对路径</param>
            <param name="filename">文件名称</param>
            <param name="size">图片尺寸</param>
            <param name="resizeMethod">图像缩放方式</param>
            <returns>若原图不存在，则会返回null，否则会返回缩放后的图片</returns>
        </member>
        <member name="M:Tunynet.FileStore.DefaultStoreProvider.GetSizeImageName(System.String,System.Drawing.Size,Tunynet.Imaging.ResizeMethod)">
            <summary>
            获取各种尺寸图片的名称
            </summary>
            <param name="filename">文件名称</param>
            <param name="size">图片尺寸</param>
            <param name="resizeMethod">图片缩放方式</param>
        </member>
        <member name="M:Tunynet.FileStore.DefaultStoreProvider.IsValidPath(System.String)">
            <summary>
            验证文件路径是否合法
            </summary>
        </member>
        <member name="M:Tunynet.FileStore.DefaultStoreProvider.IsValidFileName(System.String)">
            <summary>
            验证文件名称路径是否合法
            </summary>
        </member>
        <member name="M:Tunynet.FileStore.DefaultStoreProvider.IsValidPathAndFileName(System.String,System.String)">
            <summary>
            验证文件路径以及文件名称是否合法
            </summary>
        </member>
        <member name="M:Tunynet.FileStore.DefaultStoreProvider.GetFullLocalPath(System.String,System.String)">
            <summary>
            获取完整的本地物理路径
            </summary>
            <param name="relativePath">相对文件路径</param>
            <param name="fileName">文件名称</param>
        </member>
        <member name="M:Tunynet.FileStore.DefaultStoreProvider.GetFullLocalPath(System.String)">
            <summary>
            获取完整的本地物理路径
            </summary>
            <param name="relativeFileName">相对文件路径及名称</param>
        </member>
        <member name="M:Tunynet.FileStore.DefaultStoreProvider.GetRelativePath(System.String,System.Boolean)">
            <summary>
            从全路径获取相对路径
            </summary>
            <param name="fullLocalPath"></param>
            <param name="pathIncludesFilename"></param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.FileStore.DefaultStoreProvider.EnsurePathExists(System.String,System.Boolean)">
            <summary>
            确保建立文件目录
            </summary>
            <param name="fullLocalPath">文件完整路径</param>
            <param name="pathIncludesFilename">文件路径是否包含文件名称</param>
        </member>
        <member name="P:Tunynet.FileStore.DefaultStoreProvider.StoreRootPath">
            <summary>
            该Providate文件存储根路径(含\)
            </summary>
            <remarks>
            支持：虚拟目录、应用程序根（~/）、UNC路径、文件系统物理路径
            </remarks>
        </member>
        <member name="P:Tunynet.FileStore.DefaultStoreProvider.DirectlyRootUrl">
             <summary>
            直连URL根路径
             </summary>
        </member>
        <member name="T:Tunynet.FileStore.NetworkShareAccesser">
            <summary>
            网络共享访问连接器，用于FileStore连接CIFS/Samba/NAS
            </summary>
        </member>
        <member name="F:Tunynet.FileStore.NetworkShareAccesser.uncName">
            <summary>
            完整的UNC路径
            </summary>
        </member>
        <member name="F:Tunynet.FileStore.NetworkShareAccesser.username">
            <summary>
            访问共享连接的用户名
            </summary>
        </member>
        <member name="F:Tunynet.FileStore.NetworkShareAccesser.password">
            <summary>
            访问共享连接的密码
            </summary>
        </member>
        <member name="M:Tunynet.FileStore.NetworkShareAccesser.#ctor(System.String,System.String,System.String)">
            <summary>
            构造器
            </summary>
            <param name="uncName">完整的UNC路径</param>
            <param name="username">访问共享连接的用户名</param>
            <param name="password">访问共享连接的密码</param>
        </member>
        <member name="M:Tunynet.FileStore.NetworkShareAccesser.Connect">
            <summary>
            创建一个网络连接
            </summary>
        </member>
        <member name="M:Tunynet.FileStore.NetworkShareAccesser.Disconnect">
            <summary>
            释放一个网络连接
            </summary>
        </member>
        <member name="M:Tunynet.FileStore.NetworkShareAccesser.WNetAddConnection2(Tunynet.FileStore.NetResource,System.String,System.String,System.Int32)">
             <summary>
            The WNetAddConnection2 function makes a connection to a network resource. The function can redirect a local device to the network resource.
             </summary>
             <param name="netResource">A <see cref="T:Tunynet.FileStore.NetResource"/> structure that specifies details of the proposed connection, such as information about the network resource, the local device, and the network resource provider.</param>
             <param name="password">The password to use when connecting to the network resource.</param>
             <param name="username">The username to use when connecting to the network resource.</param>
             <param name="flags">The flags. See http://msdn.microsoft.com/en-us/library/aa385413%28VS.85%29.aspx for more information.</param>
             <returns></returns>
        </member>
        <member name="M:Tunynet.FileStore.NetworkShareAccesser.WNetCancelConnection2(System.String,System.Int32,System.Boolean)">
            <summary>
            The WNetCancelConnection2 function cancels an existing network connection. You can also call the function to remove remembered network connections that are not currently connected.
            </summary>
            <param name="name">Specifies the name of either the redirected local device or the remote network resource to disconnect from.</param>
            <param name="flags">Connection type. The following values are defined:
            0: The system does not update information about the connection. If the connection was marked as persistent in the registry, the system continues to restore the connection at the next logon. If the connection was not marked as persistent, the function ignores the setting of the CONNECT_UPDATE_PROFILE flag.
            CONNECT_UPDATE_PROFILE: The system updates the user profile with the information that the connection is no longer a persistent one. The system will not restore this connection during subsequent logon operations. (Disconnecting resources using remote names has no effect on persistent connections.)
            </param>
            <param name="force">Specifies whether the disconnection should occur if there are open files or jobs on the connection. If this parameter is FALSE, the function fails if there are open files or jobs.</param>
            <returns></returns>
        </member>
        <member name="T:Tunynet.FileStore.NetResource">
            <summary>
            The net resource.
            </summary>
        </member>
        <member name="T:Tunynet.FileStore.ResourceScope">
            <summary>
            The resource scope.
            </summary>
        </member>
        <member name="T:Tunynet.FileStore.ResourceType">
            <summary>
            The resource type.
            </summary>
        </member>
        <member name="T:Tunynet.FileStore.ResourceDisplayType">
            <summary>
            The resource displaytype.
            </summary>
        </member>
        <member name="T:Tunynet.Globalization.ResourceAccessor">
            <summary>
            资源获取器
            </summary>
        </member>
        <member name="M:Tunynet.Globalization.ResourceAccessor.GetString(System.String)">
            <summary>
            从公共资源文件获取资源项
            </summary>
            <param name="resourcesKey">资源名称(忽略大小写)</param>
            <returns>如果找到相应资源项则返回资源项字符串,否则返回缺少资源项的提示</returns>
        </member>
        <member name="M:Tunynet.Globalization.ResourceAccessor.GetString(System.String,System.Int32)">
            <summary>
            获取应用的资源项(如果在应用中找不到，则从公共资源文件获取)
            </summary>
            <param name="resourcesKey">资源名称(忽略大小写)</param>
            <param name="applicationId">应用Id</param>
            <returns>如果找到相应资源项则返回资源项字符串,否则返回缺少资源项的提示</returns>
        </member>
        <member name="M:Tunynet.Globalization.ResourceAccessor.GetMissingResourcePrompt(System.String)">
            <summary>
            获取未找到资源项时的提示信息
            </summary>
            <param name="resourcesKey">资源名称</param>
            <returns>提示信息</returns>
        </member>
        <member name="M:Tunynet.Globalization.ResourceAccessor.Initialize(System.String,System.Reflection.Assembly)">
            <summary>
            初始化（注册commonResourceManager以及currentCultureAccessor）
            </summary>        
            <param name="commonResourceFileBaseName">资源文件BaseName</param>
            <param name="commonResourceAssembly">资源文件所在程序集</param>
        </member>
        <member name="M:Tunynet.Globalization.ResourceAccessor.RegisterApplicationResourceManager(System.Int32,System.String,System.Reflection.Assembly)">
            <summary>
            注册应用的ResourceManager
            </summary>
            <param name="applicationId">应用Id</param>
            <param name="resourceFileBaseName">资源文件BaseName</param>
            <param name="assembly">资源文件所在程序集</param>
        </member>
        <member name="T:Tunynet.Imaging.EXIFMetaDataService">
            <summary>
            照片信息处理
            </summary>
        </member>
        <member name="M:Tunynet.Imaging.EXIFMetaDataService.Read(System.IO.Stream)">
            <summary>
            读取图像的EXIF信息
            </summary>
            <param name="imageStream">图像文件流</param>
            <returns>
            返回读取的EXIF信息字典（key=PropertyItem.Id）
            </returns>
        </member>
        <member name="M:Tunynet.Imaging.EXIFMetaDataService.Read(System.IO.Stream,System.Int32)">
            <summary>
            读取图像的EXIF信息
            </summary>
            <param name="imageStream">图像文件流</param>
            <param name="propId">16进制元数据Id</param>
            <returns>
            返回根据propId读取的EXIF信息
            </returns>
        </member>
        <member name="M:Tunynet.Imaging.EXIFMetaDataService.GetValueOfType(System.Drawing.Imaging.PropertyItem)">
            <summary>
            以元数据值的对应类型来获取值
            </summary>
            <param name="propItem">要获取信息的图像文件元数据属性</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Imaging.EXIFMetaDataService.GetValueOfType1(System.Byte[])">
            <summary>
            获取字节值
            </summary>
            <param name="value">元数据的值</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Imaging.EXIFMetaDataService.GetValueOfType2(System.Byte[])">
            <summary>
            获取空终止 ASCII 字符串值
            </summary>
            <param name="value">元数据的值</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Imaging.EXIFMetaDataService.GetValueOfType3(System.Byte[])">
            <summary>
            获取无符号的16 位整型值
            </summary>
            <param name="value">元数据的值</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Imaging.EXIFMetaDataService.GetValueOfType4(System.Byte[])">
             <summary>
            获取无符号的32 位整型值
             </summary>
             <param name="value">元数据的值</param>
             <returns></returns>
        </member>
        <member name="M:Tunynet.Imaging.EXIFMetaDataService.GetValueOfType5(System.Byte[])">
            <summary>
            获取无符号的32位整型对数值
            </summary>
            <remarks>
            每一对都表示一个分数；第一个整数是分子，第二个整数是分母
            </remarks>
            <param name="value">元数据的值</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Imaging.EXIFMetaDataService.GetValueOfType7(System.Byte[],System.Int32)">
            <summary>
            获取有符号的32 位整型数值
            </summary>
            <param name="value">元数据的值</param>
            <param name="propId">元数据Id</param>
            <returns></returns>
        </member>
        <member name="T:Tunynet.Imaging.AnchorLocation">
            <summary>
            矩形选区停靠位置
            </summary>
        </member>
        <member name="F:Tunynet.Imaging.AnchorLocation.LeftTop">
            <summary>
            左上
            </summary>
        </member>
        <member name="F:Tunynet.Imaging.AnchorLocation.MiddleTop">
            <summary>
            中上
            </summary>
        </member>
        <member name="F:Tunynet.Imaging.AnchorLocation.RightTop">
            <summary>
            右上
            </summary>
        </member>
        <member name="F:Tunynet.Imaging.AnchorLocation.LeftMiddle">
            <summary>
            左中部
            </summary>
        </member>
        <member name="F:Tunynet.Imaging.AnchorLocation.Middle">
            <summary>
            居中
            </summary>
        </member>
        <member name="F:Tunynet.Imaging.AnchorLocation.RightMiddle">
            <summary>
            右中部
            </summary>
        </member>
        <member name="F:Tunynet.Imaging.AnchorLocation.LeftBottom">
            <summary>
            左下部
            </summary>
        </member>
        <member name="F:Tunynet.Imaging.AnchorLocation.MiddleBottom">
            <summary>
            中下部
            </summary>
        </member>
        <member name="F:Tunynet.Imaging.AnchorLocation.RightBottom">
            <summary>
            右下
            </summary>
        </member>
        <member name="T:Tunynet.Imaging.CropFilter">
            <summary>
            用于裁剪的图片处理过滤器
            </summary>
        </member>
        <member name="T:Tunynet.Imaging.IImageFilter">
            <summary>
            图像处理过滤器接口
            </summary>
        </member>
        <member name="M:Tunynet.Imaging.IImageFilter.Process(System.Drawing.Image,System.Boolean@)">
            <summary>
            对传入的inputImage进行处理
            </summary>
            <param name="inputImage">待处理的图像文件</param>
            <param name="isProcessed">是否被处理，否则返回原图</param>
            <returns>返回处理后的图像文件</returns>
        </member>
        <member name="M:Tunynet.Imaging.CropFilter.#ctor(System.Drawing.Rectangle,System.Int32,System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="cropArea">原图待裁剪的矩形选区</param>
            <param name="descWidth">裁剪后图像的宽度</param>
            <param name="descHeight">裁剪后图像的高度</param>
        </member>
        <member name="M:Tunynet.Imaging.CropFilter.Process(System.Drawing.Image,System.Boolean@)">
            <summary>
            对传入的inputImage进行裁剪
            </summary>
            <param name="inputImage">待处理的图像文件</param>
            <param name="isProcessed">是否被处理，否则返回原图</param>
            <returns>返回处理后的图像文件</returns>
        </member>
        <member name="P:Tunynet.Imaging.CropFilter.TargetSize">
            <summary>
            期望图像尺寸
            </summary>
        </member>
        <member name="P:Tunynet.Imaging.CropFilter.CropArea">
            <summary>
            原图待裁剪的矩形选区
            </summary>
        </member>
        <member name="P:Tunynet.Imaging.CropFilter.InterpoliationMode">
            <summary>
            缩放或旋转图像时使用的算法
            </summary>
        </member>
        <member name="P:Tunynet.Imaging.CropFilter.SmoothingMode">
            <summary>
            缩放或旋转图像时使用的算法
            </summary>
        </member>
        <member name="T:Tunynet.Imaging.ImageWatermarkFilter">
            <summary>
            图像水印过滤器
            </summary>
        </member>
        <member name="T:Tunynet.Imaging.WatermarkFilterBase">
            <summary>
            水印过滤器基类
            </summary>
        </member>
        <member name="M:Tunynet.Imaging.WatermarkFilterBase.Process(System.Drawing.Image,System.Boolean@)">
            <summary>
            对传入的inputImage进行处理
            </summary>
            <param name="inputImage">待处理的图像文件</param>
            <param name="isProcessed">是否被处理，否则返回原图</param>
            <returns>返回处理后的图像文件</returns>
        </member>
        <member name="M:Tunynet.Imaging.WatermarkFilterBase.IsPixelFormatIndexed(System.Drawing.Imaging.PixelFormat)">
            <summary>
            判断图片是否带有索引像素格式
            </summary>
            <param name="imgPixelFormat">原图片的PixelFormat</param>
        </member>
        <member name="P:Tunynet.Imaging.WatermarkFilterBase.AnchorLocation">
            <summary>
            水印所在位置
            </summary>
        </member>
        <member name="P:Tunynet.Imaging.WatermarkFilterBase.Opacity">
            <summary>
            不透明度
            </summary>
        </member>
        <member name="M:Tunynet.Imaging.ImageWatermarkFilter.#ctor(System.String,Tunynet.Imaging.AnchorLocation)">
            <summary>
            构造函数
            </summary>
            <param name="watermarkImagePhysicalPath">作为水印的图像文件物理路径</param>
            <param name="anchorLocation">水印在图像上的停靠位置 </param>
        </member>
        <member name="M:Tunynet.Imaging.ImageWatermarkFilter.#ctor(System.Drawing.Image,Tunynet.Imaging.AnchorLocation)">
            <summary>
            构造函数
            </summary>
            <param name="watermarkImage">作为水印的图像文件</param>
            <param name="anchorLocation">水印在图像上的停靠位置 </param>
        </member>
        <member name="M:Tunynet.Imaging.ImageWatermarkFilter.#ctor(System.String,Tunynet.Imaging.AnchorLocation,System.Single)">
            <summary>
            构造函数
            </summary>
            <param name="watermarkImagePhysicalPath">作为水印的图像文件物理路径</param>
            <param name="anchorLocation">水印在图像上的停靠位置 </param>
            <param name="opacity">不透明度</param>
        </member>
        <member name="M:Tunynet.Imaging.ImageWatermarkFilter.#ctor(System.Drawing.Image,Tunynet.Imaging.AnchorLocation,System.Single)">
            <summary>
            构造函数
            </summary>
            <param name="watermarkImage">作为水印的图像文件</param>
            <param name="anchorLocation">水印在图像上的停靠位置 </param>
            <param name="opacity">不透明度</param>
        </member>
        <member name="M:Tunynet.Imaging.ImageWatermarkFilter.Process(System.Drawing.Image,System.Boolean@)">
            <summary>
            在传入的inputImage添加图像水印
            </summary>
            <param name="inputImage">待处理的图像文件</param>
            <param name="isProcessed">是否被处理，否则返回原图</param>
            <returns>返回处理后的图像文件</returns>
        </member>
        <member name="M:Tunynet.Imaging.ImageWatermarkFilter.GetWatermarkArea(System.Drawing.Image,System.Drawing.Image)">
            <summary>
            获取水印区域
            </summary>
            <param name="inputImage">待加水印的图像</param>
            <param name="watermarkImage">用为水印的图像</param>
            <returns>返回水印矩形区域</returns>
        </member>
        <member name="M:Tunynet.Imaging.ImageWatermarkFilter.BuildImageAttributes">
            <summary>
            Builds the image attributes.
            </summary>
        </member>
        <member name="P:Tunynet.Imaging.ImageWatermarkFilter.WatermarkImage">
            <summary>
            作为水印的图像文件
            </summary>
        </member>
        <member name="P:Tunynet.Imaging.ImageWatermarkFilter.WatermarkImagePhysicalPath">
            <summary>
            作为水印的图像文件物理路径
            </summary>
        </member>
        <member name="T:Tunynet.Imaging.ResizeFilter">
            <summary>
            用于缩放的图像处理过滤器
            </summary>
        </member>
        <member name="M:Tunynet.Imaging.ResizeFilter.#ctor(System.Int32,System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="width">缩放后的宽度</param>
            <param name="height">缩放后的高度</param>
        </member>
        <member name="M:Tunynet.Imaging.ResizeFilter.#ctor(System.Int32,System.Int32,Tunynet.Imaging.ResizeMethod)">
            <summary>
            构造函数
            </summary>
            <param name="width">缩放后的宽度</param>
            <param name="height">缩放后的高度</param>
            <param name="resizeMethod">缩放方式</param>
        </member>
        <member name="M:Tunynet.Imaging.ResizeFilter.#ctor(System.Int32,System.Int32,Tunynet.Imaging.ResizeMethod,Tunynet.Imaging.AnchorLocation)">
            <summary>
            构造函数
            </summary>
            <param name="width">缩放后的宽度</param>
            <param name="height">缩放后的高度</param>
            <param name="resizeMethod">缩放方式</param>
            <param name="anchorLocation">如需裁剪时，矩形选区停靠位置</param>
        </member>
        <member name="M:Tunynet.Imaging.ResizeFilter.Process(System.Drawing.Image,System.Boolean@)">
            <summary>
            对传入的inputImage进行缩放
            </summary>
            <param name="inputImage">待处理的图像文件</param>
            <param name="isProcessed">是否被处理，否则返回原图</param>
            <returns>返回处理后的图像文件</returns>
        </member>
        <member name="M:Tunynet.Imaging.ResizeFilter.GetNewSize(System.Drawing.Image,System.Drawing.Size,Tunynet.Imaging.ResizeMethod,System.Drawing.Size@)">
            <summary>
            计算实际缩放后的图像尺寸
            </summary>
            <param name="img">The image to resize</param>
            <param name="requestedSize">请求缩放的图像尺寸</param>
            <param name="resizeMethod">图像缩放方式</param>
            <param name="bitmapSize">推荐输出的bitmap尺寸</param>
            <returns>
            返回实际缩放后的图像尺寸
            </returns>
        </member>
        <member name="M:Tunynet.Imaging.ResizeFilter.GetLargestInset(System.Drawing.Rectangle,System.Single,Tunynet.Imaging.AnchorLocation)">
            <summary>
            按照期望的宽高比获取sourceRect中最大矩形区域        
            </summary>
            <param name="sourceRect">源矩形区域</param>
            <param name="desiredAspect">期望的宽高比</param>
            <param name="anchorLocation">矩形选区停靠位置</param>
            <returns>返回在sourceRect内满足desiredAspect的最大矩形区域</returns>
        </member>
        <member name="P:Tunynet.Imaging.ResizeFilter.TargetSize">
            <summary>
            期望图像尺寸
            </summary>
        </member>
        <member name="P:Tunynet.Imaging.ResizeFilter.ResizeMethod">
            <summary>
            图像缩放方式
            </summary>
        </member>
        <member name="P:Tunynet.Imaging.ResizeFilter.AnchorLocation">
            <summary>
            矩形选区停靠位置
            </summary>
        </member>
        <member name="P:Tunynet.Imaging.ResizeFilter.InterpoliationMode">
            <summary>
            缩放或旋转图像时使用的算法
            </summary>
        </member>
        <member name="P:Tunynet.Imaging.ResizeFilter.SmoothingMode">
            <summary>
            缩放或旋转图像时使用的算法
            </summary>
        </member>
        <member name="T:Tunynet.Imaging.ResizeMethod">
            <summary>
            图像缩放方式
            </summary>
            <remarks>
            不执行放大操作
            </remarks>
        </member>
        <member name="F:Tunynet.Imaging.ResizeMethod.Absolute">
            <summary>
            按绝对尺寸缩放
            </summary>
            <remarks>
            按指定的尺寸进行缩放,不保证宽高比率，可能导致图像失真
            </remarks>
        </member>
        <member name="F:Tunynet.Imaging.ResizeMethod.KeepAspectRatio">
            <summary>
            保持原图像宽高比缩放
            </summary>
            <remarks>
            保持原图像宽高比进行缩放，不超出指定宽高构成的矩形范围
            </remarks>
        </member>
        <member name="F:Tunynet.Imaging.ResizeMethod.Crop">
            <summary>
            裁剪图像
            </summary>
            <remarks>
            保持原图像宽高比
            </remarks>        
        </member>
        <member name="T:Tunynet.Imaging.TextWatermarkFilter">
            <summary>
            文字水印过滤器
            </summary>
        </member>
        <member name="M:Tunynet.Imaging.TextWatermarkFilter.#ctor(System.String,Tunynet.Imaging.AnchorLocation)">
            <summary>
            构造函数
            </summary>
            <param name="text">水印文字</param>
            <param name="anchorLocation">水印在图像上的停靠位置 </param>
        </member>
        <member name="M:Tunynet.Imaging.TextWatermarkFilter.#ctor(System.String,Tunynet.Imaging.AnchorLocation,System.Single)">
            <summary>
            构造函数
            </summary>
            <param name="text">水印文字</param>
            <param name="anchorLocation">水印在图像上的停靠位置 </param>
            <param name="opacity">不透明度</param>
        </member>
        <member name="M:Tunynet.Imaging.TextWatermarkFilter.Process(System.Drawing.Image,System.Boolean@)">
            <summary>
            在传入的inputImage添加文字水印
            </summary>
            <param name="inputImage">待处理的图像文件</param>
            <param name="isProcessed">是否被处理，否则返回原图</param>
            <returns>返回处理后的图像文件</returns>
        </member>
        <member name="M:Tunynet.Imaging.TextWatermarkFilter.GetWatermarkArea(System.Drawing.Graphics,System.Drawing.Image,System.Drawing.Font@)">
            <summary>
            获取水印区域
            </summary>
            <param name="graphics">画布</param>
            <param name="inputImage">图像</param>
            <param name="watermarkFont">水印文字使用的字体</param>
            <returns>返回水印矩形区域</returns>
        </member>
        <member name="P:Tunynet.Imaging.TextWatermarkFilter.Text">
            <summary>
            水印文字
            </summary>
        </member>
        <member name="T:Tunynet.Imaging.ImageProcessor">
            <summary>
            图像处理器
            </summary>
            <remarks>
            <para>注意事项：</para>
            <list type="bullet">
                <item>暂不对GIF动画做任何处理（以后计划仅对GIF动画进行缩放，可参考：www.codeplex.com/GifLib）</item>
            </list>
            </remarks>
        </member>
        <member name="M:Tunynet.Imaging.ImageProcessor.Process(System.IO.Stream)">
            <summary>
            根据ImageSettings对图片进行 缩放/剪切/水印 等操作
            </summary>
            <param name="inputStream">图像文件流</param>
        </member>
        <member name="M:Tunynet.Imaging.ImageProcessor.Resize(System.IO.Stream,System.Int32,System.Int32,Tunynet.Imaging.ResizeMethod)">
            <summary>
            缩放图像
            </summary>
            <param name="inputStream">图像文件流</param>
            <param name="width">缩放后的宽度</param>
            <param name="height">缩放后的高度</param>
            <param name="resizeMethod">缩放方式</param>
            <returns>返回缩放后的图像文件流</returns>
        </member>
        <member name="M:Tunynet.Imaging.ImageProcessor.Crop(System.IO.Stream,System.Drawing.Rectangle,System.Int32,System.Int32)">
            <summary>
            裁剪图像
            </summary>
            <param name="inputStream">图像文件流</param>
            <param name="cropArea">原图待裁剪的矩形选区</param>
            <param name="descWidth">裁剪后图像的宽度</param>
            <param name="descHeight">裁剪后图像的高度</param>
            <returns>返回裁剪后的图像文件流</returns>
        </member>
        <member name="M:Tunynet.Imaging.ImageProcessor.GetImageCodecInfo(System.Drawing.Imaging.ImageFormat)">
            <summary>
            Gets ImageCodecInfo for the specified ImageFormat
            </summary>
            <param name="imageFormat">The ImageFormat of the picture.</param>
            <returns>System.Drawing.Imaging.ImageCodecInfo</returns>
        </member>
        <member name="M:Tunynet.Imaging.ImageProcessor.IsGIFAnimation(System.Drawing.Image)">
            <summary>
            图像是否GIF动画
            </summary>
            <param name="image">待检测的图像</param>
            <returns>是GIF动画返回true，否则返回false</returns>
        </member>
        <member name="P:Tunynet.Imaging.ImageProcessor.Filters">
            <summary>
            图像处理过滤器列表
            </summary>
        </member>
        <member name="P:Tunynet.Imaging.ImageProcessor.JpegQuality">
            <summary>
            Jpeg压缩质量
            </summary>
            <remarks>取值区间0到100</remarks>
        </member>
        <member name="T:Tunynet.Imaging.ImageMetadata">
            <summary>
            图像元数据
            </summary>
        </member>
        <member name="M:Tunynet.Imaging.ImageMetadata.#ctor(System.IO.Stream)">
            <summary>
            构造函数
            </summary>
            <param name="stream">图像流</param>
        </member>
        <member name="M:Tunynet.Imaging.ImageMetadata.Check(System.IO.Stream,System.String@,System.Int32@,System.Int32@)">
            <summary>
            获取图像信息
            </summary>
            <param name="inputStream">图像文件流</param>
            <param name="contentType">图像MIME类型</param>
            <param name="width">图像宽度</param>
            <param name="height">图像高度</param>        
            <returns>正常获取数据返回true，否则返回false</returns>
        </member>
        <member name="M:Tunynet.Imaging.ImageMetadata.Check">
            <summary>
            检查传入的流是否为图片类型
            </summary>
            <returns></returns>
        </member>
        <member name="F:Tunynet.Imaging.ImageMetadata.FORMAT_JPEG">
            <summary>
            JPEG图片格式
            </summary>
        </member>
        <member name="F:Tunynet.Imaging.ImageMetadata.FORMAT_GIF">
            <summary>
            GIF图片类型
            </summary>
        </member>
        <member name="F:Tunynet.Imaging.ImageMetadata.FORMAT_PNG">
            <summary>
            PNG图片格式
            </summary>
        </member>
        <member name="F:Tunynet.Imaging.ImageMetadata.FORMAT_BMP">
            <summary>
            BMP图片格式
            </summary>
        </member>
        <member name="F:Tunynet.Imaging.ImageMetadata.COLOR_TYPE_UNKNOWN">
            <summary>
            颜色类型 未知
            </summary>
        </member>
        <member name="F:Tunynet.Imaging.ImageMetadata.FORMAT_NAMES">
            <summary>
            图像格式名称
            </summary>
        </member>
        <member name="F:Tunynet.Imaging.ImageMetadata.MIME_TYPE_STRINGS">
            <summary>
            图像MIME
            </summary>
        </member>
        <member name="P:Tunynet.Imaging.ImageMetadata.Stream">
            <summary>
            图片数据流
            </summary>
        </member>
        <member name="P:Tunynet.Imaging.ImageMetadata.Width">
            <summary>
            图片宽度
            </summary>
        </member>
        <member name="P:Tunynet.Imaging.ImageMetadata.Height">
            <summary>
            图片高度
            </summary>
        </member>
        <member name="P:Tunynet.Imaging.ImageMetadata.BitsPerPixel">
            <summary>
            每像素的位点数
            </summary>
        </member>
        <member name="P:Tunynet.Imaging.ImageMetadata.Format">
            <summary>
            图片格式
            </summary>
        </member>
        <member name="P:Tunynet.Imaging.ImageMetadata.ColorType">
            <summary>
            颜色类型
            </summary>
        </member>
        <member name="P:Tunynet.Imaging.ImageMetadata.NumberOfImageFrames">
            <summary>
            图像帧数
            </summary>
        </member>
        <member name="P:Tunynet.Imaging.ImageMetadata.FormatName">
            <summary>
            图片格式的名称
            </summary>
        </member>
        <member name="P:Tunynet.Imaging.ImageMetadata.MimeType">
            <summary>
            MIME类型
            </summary>
        </member>
        <member name="T:Tunynet.Imaging.RectangleUtil">
            <summary>
            矩形工具类
            </summary>
        </member>
        <member name="M:Tunynet.Imaging.RectangleUtil.PositionRectangle(Tunynet.Imaging.AnchorLocation,System.Drawing.Rectangle,System.Drawing.Rectangle@)">
            <summary>
            按照停靠位置定位矩形选区（destRect）在矩形容器（sourceRect）中的位置
            </summary>
            <param name="anchorLocation">矩形选区停靠位置</param>
            <param name="sourceRect">矩形容器</param>
            <param name="destRect">矩形选区</param>
        </member>
        <member name="T:Tunynet.Logging.OperatorInfo">
            <summary>
            操作者信息
            </summary>
        </member>
        <member name="P:Tunynet.Logging.OperatorInfo.OperatorUserId">
             <summary>
            操作者UserId
             </summary>
        </member>
        <member name="P:Tunynet.Logging.OperatorInfo.Operator">
             <summary>
            操作者名称
             </summary>
        </member>
        <member name="P:Tunynet.Logging.OperatorInfo.OperatorIP">
             <summary>
            操作者IP
             </summary>
        </member>
        <member name="P:Tunynet.Logging.OperatorInfo.AccessUrl">
             <summary>
            操作访问的url
             </summary>
        </member>
        <member name="T:Tunynet.Logging.IOperatorInfoGetter">
            <summary>
            当前操作者信息获取器
            </summary>
        </member>
        <member name="M:Tunynet.Logging.IOperatorInfoGetter.GetOperatorInfo">
            <summary>
            获取当前操作者信息
            </summary>
            <returns>操作日志实体</returns>
        </member>
        <member name="T:Tunynet.Logging.IOperationLogSpecificPartProcesser`1">
            <summary>
            具体的操作日志信息转换接口
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
        </member>
        <member name="M:Tunynet.Logging.IOperationLogSpecificPartProcesser`1.Process(`0,System.String,Tunynet.Logging.IOperationLogSpecificPart)">
            <summary>
            处理操作日志具体信息部分（把entity、eventOperationType转化成ISpecificOperationLogInformation）
            </summary>
            <param name="entity">日志操作对象</param>
            <param name="eventOperationType">操作类型</param>
            <param name="operationLogSpecificPart">具体的操作日志信息接口</param>
        </member>
        <member name="M:Tunynet.Logging.IOperationLogSpecificPartProcesser`1.Process(`0,System.String,`0,Tunynet.Logging.IOperationLogSpecificPart)">
            <summary>
            处理操作日志具体信息部分（把entity、eventOperationType、historyData转化成ISpecificOperationLogInformation）
            </summary>
            <param name="entity">日志操作对象</param>
            <param name="eventOperationType">操作类型</param>
            <param name="historyData">历史数据</param>
            <param name="operationLogSpecificPart">具体的操作日志信息接口</param>
        </member>
        <member name="T:Tunynet.Logging.IOperationLogSpecificPart">
            <summary>
            具体的操作日志信息接口
            </summary>
        </member>
        <member name="P:Tunynet.Logging.IOperationLogSpecificPart.ApplicationId">
             <summary>
            应用Id
             </summary>
        </member>
        <member name="P:Tunynet.Logging.IOperationLogSpecificPart.Source">
             <summary>
            日志来源，一般为应用模块名称
             </summary>
        </member>
        <member name="P:Tunynet.Logging.IOperationLogSpecificPart.OperationType">
             <summary>
            操作类型标识
             </summary>
        </member>
        <member name="P:Tunynet.Logging.IOperationLogSpecificPart.OperationObjectName">
             <summary>
            操作对象名称
             </summary>
        </member>
        <member name="P:Tunynet.Logging.IOperationLogSpecificPart.OperationObjectId">
             <summary>
            OperationObjectId
             </summary>
        </member>
        <member name="P:Tunynet.Logging.IOperationLogSpecificPart.Description">
             <summary>
            操作描述
             </summary>
        </member>
        <member name="T:Tunynet.Logging.OperationLogEntry">
            <summary>
            操作日志实体
            </summary>
        </member>
        <member name="M:Tunynet.Logging.OperationLogEntry.#ctor">
            <summary>
            无参构造函数
            </summary>
        </member>
        <member name="M:Tunynet.Logging.OperationLogEntry.#ctor(Tunynet.Logging.OperatorInfo)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:Tunynet.Logging.OperationLogEntry.Id">
             <summary>
            Id
             </summary>
        </member>
        <member name="P:Tunynet.Logging.OperationLogEntry.ApplicationId">
             <summary>
            应用Id
             </summary>
        </member>
        <member name="P:Tunynet.Logging.OperationLogEntry.Source">
             <summary>
            日志来源，一般为应用模块名称
             </summary>
        </member>
        <member name="P:Tunynet.Logging.OperationLogEntry.OperationType">
             <summary>
            操作类型标识
             </summary>
        </member>
        <member name="P:Tunynet.Logging.OperationLogEntry.OperationObjectName">
             <summary>
            操作对象名称
             </summary>
        </member>
        <member name="P:Tunynet.Logging.OperationLogEntry.OperationObjectId">
             <summary>
            OperationObjectId
             </summary>
        </member>
        <member name="P:Tunynet.Logging.OperationLogEntry.Description">
             <summary>
            操作描述
             </summary>
        </member>
        <member name="P:Tunynet.Logging.OperationLogEntry.OperatorUserId">
             <summary>
            操作者UserId
             </summary>
        </member>
        <member name="P:Tunynet.Logging.OperationLogEntry.Operator">
             <summary>
            操作者名称
             </summary>
        </member>
        <member name="P:Tunynet.Logging.OperationLogEntry.OperatorIP">
             <summary>
            操作者IP
             </summary>
        </member>
        <member name="P:Tunynet.Logging.OperationLogEntry.AccessUrl">
             <summary>
            操作访问的url
             </summary>
        </member>
        <member name="P:Tunynet.Logging.OperationLogEntry.DateCreated">
             <summary>
            创建日期
             </summary>
        </member>
        <member name="T:Tunynet.Logging.OperationLogQuery">
            <summary>
            OperationLog查询对象
            </summary>
        </member>
        <member name="F:Tunynet.Logging.OperationLogQuery.Operator">
            <summary>
            操作人（可以模糊搜索）
            </summary>
        </member>
        <member name="F:Tunynet.Logging.OperationLogQuery.Keyword">
            <summary>
            关键字
            </summary>
            <remarks>搜索操作对象</remarks>
        </member>
        <member name="F:Tunynet.Logging.OperationLogQuery.ApplicationId">
            <summary>
            应用Id
            </summary>
        </member>
        <member name="F:Tunynet.Logging.OperationLogQuery.OperationType">
            <summary>
            操作类型
            </summary>
        </member>
        <member name="F:Tunynet.Logging.OperationLogQuery.StartDateTime">
            <summary>
            开始时间
            </summary>
        </member>
        <member name="F:Tunynet.Logging.OperationLogQuery.EndDateTime">
            <summary>
            截止时间
            </summary>
        </member>
        <member name="P:Tunynet.Logging.OperationLogQuery.OperatorUserId">
             <summary>
            操作者UserId
             </summary>
        </member>
        <member name="P:Tunynet.Logging.OperationLogQuery.Source">
             <summary>
            日志来源，一般为应用模块名称
             </summary>
        </member>
        <member name="T:Tunynet.Logging.OperationLogService">
            <summary>
            操作日志业务逻辑类
            </summary>
        </member>
        <member name="M:Tunynet.Logging.OperationLogService.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Tunynet.Logging.OperationLogService.#ctor(Tunynet.Logging.Repositories.IOperationLogRepository)">
            <summary>
            可设置repository的构造函数（主要用于测试用例）
            </summary>
        </member>
        <member name="M:Tunynet.Logging.OperationLogService.Create(Tunynet.Logging.OperationLogEntry)">
            <summary>
            创建操作日志
            </summary>
            <param name="entry">操作日志实体</param>
            <returns>返回创建的操作日志对象的Id</returns>
        </member>
        <member name="M:Tunynet.Logging.OperationLogService.Create``1(``0,System.String)">
            <summary>
            创建操作日志
            </summary>
            <typeparam name="TEntity">操作对象类型</typeparam>
            <param name="entity">操作对象实体</param>
            <param name="operationType">操作类型</param>
            <returns>返回创建的操作日志对象</returns>
        </member>
        <member name="M:Tunynet.Logging.OperationLogService.Create``1(``0,System.String,``0)">
            <summary>
            创建操作日志
            </summary>
            <typeparam name="TEntity">操作对象类型</typeparam>
            <param name="entity">操作对象实体</param>
            <param name="operationType">操作类型</param>
            <param name="historyData">历史数据</param>
            <returns>返回创建的操作日志对象</returns>
        </member>
        <member name="M:Tunynet.Logging.OperationLogService.Delete(System.Int64)">
            <summary>
            删除entryId相应的操作日志
            </summary>
            <param name="entryId">操作日志Id</param>
        </member>
        <member name="M:Tunynet.Logging.OperationLogService.Clean(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            删除指定时间段内的日志列表
            </summary>
            <param name="startDate">开始日期</param>
            <param name="endDate">结束日期</param>
        </member>
        <member name="M:Tunynet.Logging.OperationLogService.GetLogs(Tunynet.Logging.OperationLogQuery,System.Int32,System.Int32)">
            <summary>
            根据DiscussQuestionQuery查询获取可分页的数据集合
            </summary>
            <param name="pageSize">每页记录数</param>
            <param name="pageIndex">当前页码(从1开始)</param>
        </member>
        <member name="T:Tunynet.Logging.Repositories.IOperationLogRepository">
            <summary>
            OperationLog仓储接口
            </summary>
        </member>
        <member name="M:Tunynet.Logging.Repositories.IOperationLogRepository.Clean(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            删除指定时间段内的日志列表
            </summary>
            <param name="startDate">开始日期</param>
            <param name="endDate">结束日期</param>
        </member>
        <member name="M:Tunynet.Logging.Repositories.IOperationLogRepository.GetLogs(Tunynet.Logging.OperationLogQuery,System.Int32,System.Int32)">
            <summary>
            根据DiscussQuestionQuery查询获取可分页的数据集合
            </summary>
            <param name="query">OperationLog查询对象</param>
            <param name="pageSize">每页记录数</param>
            <param name="pageIndex">当前页码(从1开始)</param>
        </member>
        <member name="T:Tunynet.Logging.Repositories.OperationLogRepository">
            <summary>
            OperationLog仓储接口
            </summary>
        </member>
        <member name="M:Tunynet.Logging.Repositories.OperationLogRepository.Clean(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            删除指定时间段内的日志列表
            </summary>
            <param name="startDate">开始日期</param>
            <param name="endDate">结束日期</param>
        </member>
        <member name="M:Tunynet.Logging.Repositories.OperationLogRepository.GetLogs(Tunynet.Logging.OperationLogQuery,System.Int32,System.Int32)">
            <summary>
            根据DiscussQuestionQuery查询获取可分页的数据集合
            </summary>
            <param name="query">OperationLog查询对象</param>
            <param name="pageSize">每页记录数</param>
            <param name="pageIndex">当前页码(从1开始)</param>
        </member>
        <member name="T:Tunynet.Logging.ILogger">
            <summary>
            系统日志接口(日志记录的API)
            </summary>
        </member>
        <member name="M:Tunynet.Logging.ILogger.IsEnabled(Tunynet.Logging.LogLevel)">
            <summary>
            检查level级别的日志是否启用
            </summary>
            <param name="level">日志级别<seealso cref="T:Tunynet.Logging.LogLevel"/></param>
            <returns>如果启用返回true，否则返回false</returns>
        </member>
        <member name="M:Tunynet.Logging.ILogger.Log(Tunynet.Logging.LogLevel,System.Object)">
            <summary>
            记录level级别的日志
            </summary>
            <param name="level">日志级别<seealso cref="T:Tunynet.Logging.LogLevel"/></param>
            <param name="message">需记录的内容</param>
        </member>
        <member name="M:Tunynet.Logging.ILogger.Log(Tunynet.Logging.LogLevel,System.Exception,System.Object)">
            <summary>
            记录level级别的日志
            </summary>
            <param name="level">日志级别<seealso cref="T:Tunynet.Logging.LogLevel"/></param>
            <param name="message">需记录的内容</param>
            <param name="exception">异常</param>
        </member>
        <member name="M:Tunynet.Logging.ILogger.Log(Tunynet.Logging.LogLevel,System.String,System.Object[])">
            <summary>
            记录level级别的日志
            </summary>
            <param name="level">日志级别<seealso cref="T:Tunynet.Logging.LogLevel"/></param>
            <param name="format">需记录的内容格式<see cref="M:System.String.Format(System.String,System.Object[])"/></param>
            <param name="args">替换format占位符的参数</param>
        </member>
        <member name="T:Tunynet.Logging.ILoggerFactoryAdapter">
            <summary>
            供LoggerFactory使用的适配器接口
            </summary>
        </member>
        <member name="M:Tunynet.Logging.ILoggerFactoryAdapter.GetLogger(System.String)">
            <summary>
            依据LoggerName获取<see cref="T:Tunynet.Logging.ILogger"/>
            </summary>
            <param name="loggerName">日志名称（例如：log4net的logger配置名称）</param>
            <returns><see cref="T:Tunynet.Logging.ILogger"/></returns>
        </member>
        <member name="T:Tunynet.Logging.Log4Net.Log4NetLogger">
            <summary>
            用Log4Net实现的ILogger
            </summary>
        </member>
        <member name="M:Tunynet.Logging.Log4Net.Log4NetLogger.IsEnabled(Tunynet.Logging.LogLevel)">
            <summary>
            检查level级别的日志是否启用
            </summary>
            <param name="level">日志级别<seealso cref="T:Tunynet.Logging.LogLevel"/></param>
            <returns>如果启用返回true，否则返回false</returns>
        </member>
        <member name="M:Tunynet.Logging.Log4Net.Log4NetLogger.Log(Tunynet.Logging.LogLevel,System.Object)">
            <summary>
            记录level级别的日志
            </summary>
            <param name="level">日志级别<seealso cref="T:Tunynet.Logging.LogLevel"/></param>
            <param name="message">需记录的内容</param>
        </member>
        <member name="M:Tunynet.Logging.Log4Net.Log4NetLogger.Log(Tunynet.Logging.LogLevel,System.Exception,System.Object)">
            <summary>
            记录level级别的日志
            </summary>
            <param name="level">日志级别<seealso cref="T:Tunynet.Logging.LogLevel"/></param>
            <param name="message">需记录的内容</param>
            <param name="exception">异常</param>
        </member>
        <member name="M:Tunynet.Logging.Log4Net.Log4NetLogger.Log(Tunynet.Logging.LogLevel,System.String,System.Object[])">
            <summary>
            记录level级别的日志
            </summary>
            <param name="level">日志级别<seealso cref="T:Tunynet.Logging.LogLevel"/></param>
            <param name="format">需记录的内容格式<see cref="M:System.String.Format(System.String,System.Object[])"/></param>
            <param name="args">替换format占位符的参数</param>
        </member>
        <member name="T:Tunynet.Logging.Log4Net.Log4NetLoggerFactoryAdapter">
            <summary>
            用log4net实现的LoggerFactoryAdapter
            </summary>
        </member>
        <member name="M:Tunynet.Logging.Log4Net.Log4NetLoggerFactoryAdapter.#ctor">
            <summary>
            构造函数（默认加载"~/Config/log4net.config"作为log4net配置文件）
            </summary>
        </member>
        <member name="M:Tunynet.Logging.Log4Net.Log4NetLoggerFactoryAdapter.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="configFilename">
                <remarks>
                    <para>log4net配置文件路径，支持以下格式：</para>
                    <list type="bullet">
                        <item>~/config/log4net.config</item>
                        <item>~/web.config</item>
                        <item>c:\abc\log4net.config</item>
                    </list>
                </remarks>
            </param>
        </member>
        <member name="M:Tunynet.Logging.Log4Net.Log4NetLoggerFactoryAdapter.GetLogger(System.String)">
            <summary>
            依据LoggerName获取<see cref="T:Tunynet.Logging.ILogger"/>
            </summary>
            <param name="loggerName">日志名称（例如：log4net的logger配置名称）</param>
            <returns><see cref="T:Tunynet.Logging.ILogger"/></returns>
        </member>
        <member name="T:Tunynet.Logging.LoggerExtension">
            <summary>
            ILogger扩展
            </summary>
        </member>
        <member name="M:Tunynet.Logging.LoggerExtension.Debug(Tunynet.Logging.ILogger,System.Object)">
            <summary>
            记录Debug级别日志
            </summary>
            <param name="logger"><see cref="T:Tunynet.Logging.ILogger">ILogger</see></param>
            <param name="message">需记录的内容</param>
        </member>
        <member name="M:Tunynet.Logging.LoggerExtension.Info(Tunynet.Logging.ILogger,System.Object)">
            <summary>
            记录Info级别日志
            </summary>
            <param name="logger"><see cref="T:Tunynet.Logging.ILogger">ILogger</see></param>
            <param name="message">需记录的内容</param>
        </member>
        <member name="M:Tunynet.Logging.LoggerExtension.Warn(Tunynet.Logging.ILogger,System.Object)">
            <summary>
            记录Warn级别日志
            </summary>
            <param name="logger"><see cref="T:Tunynet.Logging.ILogger">ILogger</see></param>
            <param name="message">需记录的内容</param>
        </member>
        <member name="M:Tunynet.Logging.LoggerExtension.Error(Tunynet.Logging.ILogger,System.Object)">
            <summary>
            记录Error级别日志
            </summary>
            <param name="logger"><see cref="T:Tunynet.Logging.ILogger">ILogger</see></param>
            <param name="message">需记录的内容</param>
        </member>
        <member name="M:Tunynet.Logging.LoggerExtension.Fatal(Tunynet.Logging.ILogger,System.Object)">
            <summary>
            记录Fatal级别日志
            </summary>
            <param name="logger"><see cref="T:Tunynet.Logging.ILogger">ILogger</see></param>
            <param name="message">需记录的内容</param>
        </member>
        <member name="M:Tunynet.Logging.LoggerExtension.Debug(Tunynet.Logging.ILogger,System.Exception,System.Object)">
            <summary>
            记录Debug级别日志
            </summary>
            <param name="logger"><see cref="T:Tunynet.Logging.ILogger">ILogger</see></param>
            <param name="message">需记录的内容</param>
            <param name="exception">异常</param>
        </member>
        <member name="M:Tunynet.Logging.LoggerExtension.Info(Tunynet.Logging.ILogger,System.Exception,System.Object)">
            <summary>
            记录Info级别日志
            </summary>
            <param name="logger"><see cref="T:Tunynet.Logging.ILogger">ILogger</see></param>
            <param name="message">需记录的内容</param>
            <param name="exception">异常</param>
        </member>
        <member name="M:Tunynet.Logging.LoggerExtension.Warn(Tunynet.Logging.ILogger,System.Exception,System.Object)">
            <summary>
            记录Warn级别日志
            </summary>
            <param name="logger"><see cref="T:Tunynet.Logging.ILogger">ILogger</see></param>
            <param name="message">需记录的内容</param>
            <param name="exception">异常</param>
        </member>
        <member name="M:Tunynet.Logging.LoggerExtension.Error(Tunynet.Logging.ILogger,System.Exception,System.Object)">
            <summary>
            记录Error级别日志
            </summary>
            <param name="logger"><see cref="T:Tunynet.Logging.ILogger">ILogger</see></param>
            <param name="message">需记录的内容</param>
            <param name="exception">异常</param>
        </member>
        <member name="M:Tunynet.Logging.LoggerExtension.Fatal(Tunynet.Logging.ILogger,System.Exception,System.Object)">
            <summary>
            记录Fatal级别日志
            </summary>
            <param name="logger"><see cref="T:Tunynet.Logging.ILogger">ILogger</see></param>
            <param name="message">需记录的内容</param>
            <param name="exception">异常</param>
        </member>
        <member name="M:Tunynet.Logging.LoggerExtension.DebugFormat(Tunynet.Logging.ILogger,System.String,System.Object[])">
            <summary>
            记录Debug级别日志(类似<see cref="M:System.String.Format(System.String,System.Object[])"/>)
            </summary>
            <param name="logger"><see cref="T:Tunynet.Logging.ILogger">ILogger</see></param>
            <param name="format">需记录的内容格式<see cref="M:System.String.Format(System.String,System.Object[])"/></param>
            <param name="args">替换format占位符的参数</param>
        </member>
        <member name="M:Tunynet.Logging.LoggerExtension.InfoFormat(Tunynet.Logging.ILogger,System.String,System.Object[])">
            <summary>
            记录Info级别日志(类似<see cref="M:System.String.Format(System.String,System.Object[])"/>)
            </summary>
            <param name="logger"><see cref="T:Tunynet.Logging.ILogger">ILogger</see></param>
            <param name="format">需记录的内容格式<see cref="M:System.String.Format(System.String,System.Object[])"/></param>
            <param name="args">替换format占位符的参数</param>
        </member>
        <member name="M:Tunynet.Logging.LoggerExtension.WarnFormat(Tunynet.Logging.ILogger,System.String,System.Object[])">
            <summary>
            记录Warn级别日志(类似<see cref="M:System.String.Format(System.String,System.Object[])"/>)
            </summary>
            <param name="format">需记录的内容格式<see cref="M:System.String.Format(System.String,System.Object[])"/></param>
            <param name="args">替换format占位符的参数</param>
        </member>
        <member name="M:Tunynet.Logging.LoggerExtension.ErrorFormat(Tunynet.Logging.ILogger,System.String,System.Object[])">
            <summary>
            记录Error级别日志(类似<see cref="M:System.String.Format(System.String,System.Object[])"/>)
            </summary>
            <param name="logger"><see cref="T:Tunynet.Logging.ILogger">ILogger</see></param>
            <param name="format">需记录的内容格式<see cref="M:System.String.Format(System.String,System.Object[])"/></param>
            <param name="args">替换format占位符的参数</param>
        </member>
        <member name="M:Tunynet.Logging.LoggerExtension.FatalFormat(Tunynet.Logging.ILogger,System.String,System.Object[])">
            <summary>
            记录Fatal级别日志(类似<see cref="M:System.String.Format(System.String,System.Object[])"/>)
            </summary>
            <param name="logger"><see cref="T:Tunynet.Logging.ILogger">ILogger</see></param>
            <param name="format">需记录的内容格式<see cref="M:System.String.Format(System.String,System.Object[])"/></param>
            <param name="args">替换format占位符的参数</param>
        </member>
        <member name="T:Tunynet.Logging.LoggerFactory">
            <summary>
            系统日志工厂
            </summary>
            <remarks>
            用于获取ILogger，以便进行系统日志记录
            </remarks>
        </member>
        <member name="M:Tunynet.Logging.LoggerFactory.GetLogger(System.String)">
            <summary>
            依据LoggerName获取<see cref="T:Tunynet.Logging.ILogger"/>
            </summary>
            <param name="loggerName">日志名称（例如：log4net的logger配置名称）</param>
            <returns><see cref="T:Tunynet.Logging.ILogger"/></returns>
        </member>
        <member name="M:Tunynet.Logging.LoggerFactory.GetLogger">
            <summary>
            获取logger name为tunynet的 <see cref="T:Tunynet.Logging.ILogger"/>
            </summary>
            <returns><see cref="T:Tunynet.Logging.ILogger"/></returns>
        </member>
        <member name="T:Tunynet.Logging.LogLevel">
            <summary>
            日常级别
            </summary>
        </member>
        <member name="F:Tunynet.Logging.LogLevel.Debug">
            <summary>
            Debug
            </summary>
        </member>
        <member name="F:Tunynet.Logging.LogLevel.Information">
            <summary>
            Information
            </summary>
        </member>
        <member name="F:Tunynet.Logging.LogLevel.Warning">
            <summary>
            Warning
            </summary>
        </member>
        <member name="F:Tunynet.Logging.LogLevel.Error">
            <summary>
            Error
            </summary>
        </member>
        <member name="F:Tunynet.Logging.LogLevel.Fatal">
            <summary>
            Fatal
            </summary>
        </member>
        <member name="T:Tunynet.EntityOperationType">
            <summary>
            实体操作类型
            </summary>
        </member>
        <member name="F:Tunynet.EntityOperationType.Create">
            <summary>
            创建
            </summary>
        </member>
        <member name="F:Tunynet.EntityOperationType.Update">
            <summary>
            更新
            </summary>
        </member>
        <member name="F:Tunynet.EntityOperationType.Delete">
            <summary>
            删除
            </summary>
        </member>
        <member name="F:Tunynet.EntityOperationType.Unknown">
            <summary>
            未知
            </summary>
        </member>
        <member name="T:Tunynet.IdGenerator">
            <summary>
            Id生成器（用于替代数据库非自增主键）
            </summary>
        </member>
        <member name="M:Tunynet.IdGenerator.Instance">
            <summary>
            获取EmailBuilder实例
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tunynet.IdGenerator.Next">
            <summary>
            获取下一个Id
            </summary>
            <returns>
            返回生成下一个Id
            </returns>
        </member>
        <member name="M:Tunynet.IdGenerator.NextLong">
            <summary>
            获取下一个long类型的Id
            </summary>
            <returns>
            返回生成下一个Id
            </returns>
        </member>
        <member name="T:Tunynet.IPagingDataSet">
            <summary>
            可分页数据接口
            </summary>
        </member>
        <member name="P:Tunynet.IPagingDataSet.PageIndex">
            <summary>
            当前页数
            </summary>
        </member>
        <member name="P:Tunynet.IPagingDataSet.PageSize">
            <summary>
            每页显示记录数
            </summary>
        </member>
        <member name="P:Tunynet.IPagingDataSet.TotalRecords">
            <summary>
            总记录数
            </summary>
        </member>
        <member name="T:Tunynet.PagingEntityIdCollection">
            <summary>
            封装用于分页的实体Id
            </summary>
        </member>
        <member name="M:Tunynet.PagingEntityIdCollection.#ctor(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            构造函数
            </summary>
            <param name="entityIds">实体Id集合</param>
        </member>
        <member name="M:Tunynet.PagingEntityIdCollection.#ctor(System.Collections.Generic.IEnumerable{System.Object},System.Int64)">
            <summary>
            构造函数
            </summary>
            <param name="entityIds">实体Id集合</param>
            <param name="totalRecords">总记录数</param>
        </member>
        <member name="M:Tunynet.PagingEntityIdCollection.GetPagingEntityIds(System.Int32,System.Int32)">
            <summary>
            获取pageIndex所在页数的EntityId集合
            </summary>
            <param name="pageSize">每页显示记录数</param>
            <param name="pageIndex">从1开始的当前页码</param>
            <returns>指定页码的实体Id集合</returns>
        </member>
        <member name="M:Tunynet.PagingEntityIdCollection.GetTopEntityIds(System.Int32)">
            <summary>
            获取前topNumber条EntityId集合
            </summary>
            <param name="topNumber">前多少条数据</param>
            <returns></returns>
        </member>
        <member name="P:Tunynet.PagingEntityIdCollection.Count">
            <summary>
            获取的entityId数量
            </summary>
        </member>
        <member name="P:Tunynet.PagingEntityIdCollection.TotalRecords">
            <summary>
            符合查询条件的总记录数
            </summary>
        </member>
        <member name="P:Tunynet.PagingEntityIdCollection.IsContainsMultiplePages">
            <summary>
            是否包含前N页数据
            </summary>
        </member>
        <member name="T:Tunynet.SerializablePropertiesBase">
            <summary>
            可序列化属性基类
            </summary>
            <example>
        <para>定义可序列化属性的实体参见以下示例：</para>
        <code language="c#">
          <![CDATA[
    [TableName("test_SampleEntities")]
    [PrimaryKey("Id", autoIncrement = true)]
    [CacheSetting(true, PropertyNamesOfArea = "UserId,AuditingStatus", PropertyNameOfBody = "Body")]
    [Serializable]
    public class SerializablePropertyEntityImplementBaseClass : SerializablePropertiesBase,IEntity
    {
        /// <summary>
        /// 新建实体时使用
        /// </summary>
        public static SerializablePropertyEntityImplementBaseClass New()
        {
            SerializablePropertyEntityImplementBaseClass newPoco = new SerializablePropertyEntityImplementBaseClass()
            {
                SettingsKey = Guid.NewGuid(),
                AuditingStatus = AuditingStatuses.Success,
                DateCreated = DateTime.UtcNow
            };
            return newPoco;
        }

        #region 需要持久化属性

        public long UserId { get; set; }
        
        public long Id { get; protected set; }

        public Guid SettingsKey { get; set; }

        public string Body { get; set; }

        public bool IsApproved { get; set; }

        public decimal Price { get; set; }

        public AuditingStatuses AuditingStatus { get; set; }

        public DateTime DateCreated { get; set; }

        #endregion


        #region 可序列化属性

        /// <summary>
        /// string类型的可序列化属性
        /// </summary>
        [Ignore]
        public string ExtendedProperty_String
        {
            get { return GetExtendedProperty<string>("ExtendedProperty_String"); }
            set { SetExtendedProperty("ExtendedProperty_String", value); }
        }

        /// <summary>
        /// int类型的可序列化属性
        /// </summary>
        [Ignore]
        public int ExtendedProperty_Int
        {
            get { return GetExtendedProperty<int>("ExtendedProperty_int"); }
            set { SetExtendedProperty("ExtendedProperty_int", value); }
        }

        /// <summary>
        /// 日期类型的可序列化属性
        /// </summary>
        [Ignore]
        public DateTime ExtendedProperty_DateTime
        {
            get { return GetExtendedProperty<DateTime>("ExtendedProperty_DateTime"); }
            set { SetExtendedProperty("ExtendedProperty_DateTime", value); }
        }

        #endregion


        #region IEntity 成员
        object IEntity.EntityId { get { return this.Id; } }
        bool IEntity.IsDeletedInDatabase { get; set; }
        #endregion
    }
          ]]>
        </code>
      </example>
        </member>
        <member name="T:Tunynet.ISerializableProperties">
            <summary>
            可序列化属性接口
            </summary>
            <remarks>
            定义可序列化属性的实体建议从<see cref="T:Tunynet.SerializablePropertiesBase"/>派生
            </remarks>
            <example>
        <para>定义可序列化属性的实体参见以下示例：</para>
        <code language="c#">
          <![CDATA[
    [TableName("test_SampleEntities")]
    [PrimaryKey("Id", autoIncrement = true)]
    [CacheSetting(true, PropertyNamesOfArea = "UserId,AuditingStatus", PropertyNameOfBody = "Body")]
    [Serializable]
    public class ExtendedPropertyEntity : IEntity, ISerializableProperties
    {

        #region 需要持久化属性

        public long UserId { get; set; }

        public long Id { get; set; }

        public Guid SettingsKey { get; set; }

        public string Body { get; set; }

        public bool IsApproved { get; set; }

        public decimal Price { get; set; }

        public AuditingStatuses AuditingStatus { get; set; }

        public DateTime DateCreated { get; set; }

        #endregion


        #region 可序列化属性

        /// <summary>
        /// string类型的可序列化属性
        /// </summary>
        [Ignore]
        public string ExtendedProperty_String
        {
            get { return GetExtendedProperty<string>("ExtendedProperty_String"); }
            set { SetExtendedProperty("ExtendedProperty_String", value); }
        }

        /// <summary>
        /// int类型的可序列化属性
        /// </summary>
        [Ignore]
        public int ExtendedProperty_Int
        {
            get { return GetExtendedProperty<int>("ExtendedProperty_int"); }
            set { SetExtendedProperty("ExtendedProperty_int", value); }
        }

        /// <summary>
        /// 日期类型的可序列化属性
        /// </summary>
        [Ignore]
        public DateTime ExtendedProperty_DateTime
        {
            get { return GetExtendedProperty<DateTime>("ExtendedProperty_DateTime"); }
            set { SetExtendedProperty("ExtendedProperty_DateTime", value); }
        }

        #endregion


        #region IEntity 成员
        object IEntity.EntityId { get { return this.Id; } }
        bool IEntity.IsDeletedInDatabase { get; set; }
        #endregion


        #region ISerializableProperties 成员

        /// <summary>
        /// 获取propertyName指定的属性值
        /// </summary>
        /// <param name="propertyName">属性名称</param>
        public T GetExtendedProperty<T>(string propertyName)
        {
            return PropertySerializer.GetExtendedProperty<T>(propertyName);
        }

        /// <summary>
        /// 获取propertyName指定的属性值
        /// </summary>
        /// <param name="propertyName">属性名称</param>
        /// <param name="defaultValue">如果未找到则返回该默认值</param>
        public T GetExtendedProperty<T>(string propertyName, T defaultValue)
        {
            return PropertySerializer.GetExtendedProperty<T>(propertyName, defaultValue);
        }

        /// <summary>
        /// 设置可序列化属性
        /// </summary>
        /// <param name="propertyName">属性名称</param>
        /// <param name="propertyValue">属性值</param>
        public void SetExtendedProperty(string propertyName, object propertyValue)
        {
            PropertySerializer.SetExtendedProperty(propertyName, propertyValue);
        }

        /// <summary>
        /// 存储前把可序列化属性序列化成PropertyNames和PropertyValues
        /// </summary>
        void ISerializableProperties.Serialize()
        {
            PropertySerializer.Serialize(ref this.propertyNames, ref this.propertyValues);
        }

        private PropertySerializer propertySerializer = null;
        /// <summary>
        /// 可序列化属性序列化器
        /// </summary>
        private PropertySerializer PropertySerializer
        {
            get
            {
                if (propertySerializer == null)
                    propertySerializer = new PropertySerializer(this.PropertyNames, this.PropertyValues);

                return propertySerializer;
            }
        }

        private string propertyNames;
        /// <summary>
        /// 序列化属性名称字符串
        /// </summary>
        /// <remarks>
        /// 保留该属性的目的是通过orm存取数据库的数据
        /// </remarks>
        public string PropertyNames
        {
            get { return propertyNames; }
            private set { this.propertyNames = value; }
        }

        private string propertyValues;
        /// <summary>
        /// 序列化属性值字符串
        /// </summary>
        /// <remarks>
        /// 保留该属性的目的是通过orm存取数据库的数据
        /// </remarks>
        public string PropertyValues
        {
            get { return propertyValues; }
            private set { this.propertyValues = value; }
        }

        #endregion

    }
          ]]>
        </code>
      </example>
        </member>
        <member name="M:Tunynet.ISerializableProperties.GetExtendedProperty``1(System.String)">
            <summary>
            获取propertyName指定的属性值
            </summary>
            <remarks>
            不能显式实现
            </remarks>
            <param name="propertyName">序列化属性名称字符串</param>
        </member>
        <member name="M:Tunynet.ISerializableProperties.GetExtendedProperty``1(System.String,``0)">
            <summary>
            获取propertyName指定的属性值
            </summary>
            <remarks>
            不能显式实现
            </remarks>
            <param name="propertyName">属性名称</param>
            <param name="defaultValue">如果未找到则返回该默认值</param>
        </member>
        <member name="M:Tunynet.ISerializableProperties.SetExtendedProperty(System.String,System.Object)">
            <summary>
            设置扩展属性
            </summary>
            <remarks>
            不能显式实现
            </remarks>
            <param name="propertyName">属性名称</param>
            <param name="propertyValue">属性值</param>
        </member>
        <member name="M:Tunynet.ISerializableProperties.Serialize">
            <summary>
            把扩展属性序列化
            </summary>
            <remarks>
            需要显式实现
            </remarks>
        </member>
        <member name="M:Tunynet.SerializablePropertiesBase.GetExtendedProperty``1(System.String)">
            <summary>
            获取propertyName指定的属性值
            </summary>
            <param name="propertyName">属性名称</param>
        </member>
        <member name="M:Tunynet.SerializablePropertiesBase.GetExtendedProperty``1(System.String,``0)">
            <summary>
            获取propertyName指定的属性值
            </summary>
            <param name="propertyName">属性名称</param>
            <param name="defaultValue">如果未找到则返回该默认值</param>
        </member>
        <member name="M:Tunynet.SerializablePropertiesBase.SetExtendedProperty(System.String,System.Object)">
            <summary>
            设置可序列化属性
            </summary>
            <param name="propertyName">属性名称</param>
            <param name="propertyValue">属性值</param>
        </member>
        <member name="M:Tunynet.SerializablePropertiesBase.Tunynet#ISerializableProperties#Serialize">
            <summary>
            存储前把可序列化属性序列化成PropertyNames和PropertyValues
            </summary>
        </member>
        <member name="P:Tunynet.SerializablePropertiesBase.PropertySerializer">
            <summary>
            可序列化属性序列化器
            </summary>
        </member>
        <member name="P:Tunynet.SerializablePropertiesBase.PropertyNames">
            <summary>
            序列化属性名称字符串
            </summary>
            <remarks>
            保留该属性的目的是通过orm存取数据库的数据
            </remarks>
        </member>
        <member name="P:Tunynet.SerializablePropertiesBase.PropertyValues">
            <summary>
            序列化属性值字符串
            </summary>
            <remarks>
            保留该属性的目的是通过orm存取数据库的数据
            </remarks>
        </member>
        <member name="T:Tunynet.SqlTraceEntity">
            <summary>
            用于Sql语句跟踪的实体
            </summary>
        </member>
        <member name="P:Tunynet.SqlTraceEntity.Sql">
            <summary>
            跟踪到的Sql语句
            </summary>
        </member>
        <member name="P:Tunynet.SqlTraceEntity.ElapsedMilliseconds">
            <summary>
            执行时间（毫秒）
            </summary>
        </member>
        <member name="T:PetaPoco.Database">
            <summary>
            对PetaPoco.Database进行封装，以便于使用
            </summary>
            <summary>
            The main PetaPoco Database class.  You can either use this class directly, or derive from it.
            </summary>
        </member>
        <member name="M:PetaPoco.Database.CreateInstance(System.String)">
            <summary>
            获取PetaPoco.Database的实例
            </summary>
        </member>
        <member name="M:PetaPoco.Database.Execute(System.Collections.Generic.IEnumerable{PetaPoco.Sql})">
            <summary>
            批量执行sql
            </summary>
            <param name="sqls"></param>
            <returns></returns>
        </member>
        <member name="M:PetaPoco.Database.FetchFirstColumn(PetaPoco.Sql)">
            <summary>
            获取第一列组成的集合
            </summary>
            <param name="sql">PetaPoco.Sql</param>
        </member>
        <member name="M:PetaPoco.Database.FetchFirstColumn(System.String,System.Object[])">
            <summary>
            获取第一列组成的集合
            </summary>
        </member>
        <member name="M:PetaPoco.Database.FetchPagingPrimaryKeys``1(System.Int64,System.Int32,System.Int32,PetaPoco.Sql)">
            <summary>
            获取可分页的主键集合
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="maxRecords">最大返回记录数</param>
            <param name="pageSize">每页记录数</param>
            <param name="pageIndex">当前页码(从1开始)</param>
            <param name="sql">PetaPoco.Sql</param>
            <returns>可分页的实体Id集合</returns>
        </member>
        <member name="M:PetaPoco.Database.FetchPagingPrimaryKeys(System.Int64,System.Int32,System.Int32,System.String,PetaPoco.Sql)">
            <summary>
            获取可分页的主键集合
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="maxRecords">最大返回记录数</param>
            <param name="pageSize">每页记录数</param>
            <param name="pageIndex">当前页码(从1开始)</param>
            <param name="primaryKey">主键</param>
            <param name="sql">PetaPoco.Sql <remarks>要求必须是完整的sql语句</remarks></param>
            <returns>可分页的实体Id集合</returns>
        </member>
        <member name="M:PetaPoco.Database.FetchTopPrimaryKeys``1(System.Int32,PetaPoco.Sql)">
            <summary>
            获取前topNumber条记录
            </summary>
            <param name="topNumber">前多少条数据</param>
            <param name="sql">PetaPoco.Sql</param>
        </member>
        <member name="M:PetaPoco.Database.FetchTop``1(System.Int32,PetaPoco.Sql)">
            <summary>
            获取前topNumber条记录
            </summary>
            <typeparam name="T">The Type representing a row in the result set</typeparam>
            <param name="topNumber">前多少条数据</param>
            <param name="sql">PetaPoco.Sql<remarks>要求必须是完整的sql语句</remarks></param>
        </member>
        <member name="M:PetaPoco.Database.BuildPagingPrimaryKeyQueries``1(System.Int64,System.Int64,System.Int64,System.String,System.Object[]@,System.String@,System.String@)">
            <summary>
            创建分页的SQL语句
            </summary>
        </member>
        <member name="M:PetaPoco.Database.BuildPagingPrimaryKeyQueries(System.Int64,System.Int64,System.Int64,System.String,System.String,System.Object[]@,System.String@,System.String@)">
            <summary>
            创建分页的SQL语句
            </summary>
        </member>
        <member name="M:PetaPoco.Database.SplitSqlForPagingOptimized(System.Int64,System.String,System.String,System.String@,System.String@,System.String@)">
            <summary>
            切割sql数据
            </summary>
            <param name="maxRecords"></param>
            <param name="sql"></param>
            <param name="primaryKey"></param>
            <param name="sqlCount"></param>
            <param name="sqlSelectRemoved"></param>
            <param name="sqlOrderBy"></param>
            <returns></returns>
        </member>
        <member name="M:PetaPoco.Database.BuildTopSql``1(System.Int32,System.String)">
            <summary>
            构建获取前topNumber记录的SQL
            </summary>
        </member>
        <member name="M:PetaPoco.Database.BuildTopSql(System.Int32,System.String)">
            <summary>
            构建获取前topNumber记录的SQL
            </summary>
        </member>
        <member name="M:PetaPoco.Database.#ctor(System.Data.IDbConnection)">
            <summary>
            Construct a database using a supplied IDbConnection
            </summary>
            <param name="connection">The IDbConnection to use</param>
            <remarks>
            The supplied IDbConnection will not be closed/disposed by PetaPoco - that remains
            the responsibility of the caller.
            </remarks>
        </member>
        <member name="M:PetaPoco.Database.#ctor(System.String,System.String)">
            <summary>
            Construct a database using a supplied connections string and optionally a provider name
            </summary>
            <param name="connectionString">The DB connection string</param>
            <param name="providerName">The name of the DB provider to use</param>
            <remarks>
            PetaPoco will automatically close and dispose any connections it creates.
            </remarks>
        </member>
        <member name="M:PetaPoco.Database.#ctor(System.String,System.Data.Common.DbProviderFactory)">
            <summary>
            Construct a Database using a supplied connection string and a DbProviderFactory
            </summary>
            <param name="connectionString">The connection string to use</param>
            <param name="provider">The DbProviderFactory to use for instantiating IDbConnection's</param>
        </member>
        <member name="M:PetaPoco.Database.#ctor(System.String)">
            <summary>
            Construct a Database using a supplied connectionString Name.  The actual connection string and provider will be 
            read from app/web.config.
            </summary>
            <param name="connectionStringName">The name of the connection</param>
        </member>
        <member name="M:PetaPoco.Database.CommonConstruct">
            <summary>
            Provides common initialization for the various constructors
            </summary>
        </member>
        <member name="M:PetaPoco.Database.Dispose">
            <summary>
            Automatically close one open shared connection 
            </summary>
        </member>
        <member name="M:PetaPoco.Database.OpenSharedConnection">
            <summary>
            Open a connection that will be used for all subsequent queries.
            </summary>
            <remarks>
            Calls to Open/CloseSharedConnection are reference counted and should be balanced
            </remarks>
        </member>
        <member name="M:PetaPoco.Database.CloseSharedConnection">
            <summary>
            Releases the shared connection
            </summary>
        </member>
        <member name="M:PetaPoco.Database.GetTransaction">
            <summary>
            Starts or continues a transaction.
            </summary>
            <returns>An ITransaction reference that must be Completed or disposed</returns>
            <remarks>
            This method makes management of calls to Begin/End/CompleteTransaction easier.  
            
            The usage pattern for this should be:
            
            using (var tx = db.GetTransaction())
            {
            	// Do stuff
            	db.Update(...);
            	
                // Mark the transaction as complete
                tx.Complete();
            }
            
            Transactions can be nested but they must all be completed otherwise the entire
            transaction is aborted.
            </remarks>
        </member>
        <member name="M:PetaPoco.Database.OnBeginTransaction">
            <summary>
            Called when a transaction starts.  Overridden by the T4 template generated database
            classes to ensure the same DB instance is used throughout the transaction.
            </summary>
        </member>
        <member name="M:PetaPoco.Database.OnEndTransaction">
            <summary>
            Called when a transaction ends.
            </summary>
        </member>
        <member name="M:PetaPoco.Database.BeginTransaction">
            <summary>
            Starts a transaction scope, see GetTransaction() for recommended usage
            </summary>
        </member>
        <member name="M:PetaPoco.Database.CleanupTransaction">
            <summary>
            Internal helper to cleanup transaction
            </summary>
        </member>
        <member name="M:PetaPoco.Database.AbortTransaction">
            <summary>
            Aborts the entire outer most transaction scope 
            </summary>
            <remarks>
            Called automatically by Transaction.Dispose()
            if the transaction wasn't completed.
            </remarks>
        </member>
        <member name="M:PetaPoco.Database.CompleteTransaction">
            <summary>
            Marks the current transaction scope as complete.
            </summary>
        </member>
        <member name="M:PetaPoco.Database.AddParam(System.Data.IDbCommand,System.Object,System.Reflection.PropertyInfo)">
            <summary>
            Add a parameter to a DB command
            </summary>
            <param name="cmd">A reference to the IDbCommand to which the parameter is to be added</param>
            <param name="value">The value to assign to the parameter</param>
            <param name="pi">Optional, a reference to the property info of the POCO property from which the value is coming.</param>
        </member>
        <member name="M:PetaPoco.Database.OnException(System.Exception)">
            <summary>
            Called if an exception occurs during processing of a DB operation.  Override to provide custom logging/handling.
            </summary>
            <param name="x">The exception instance</param>
            <returns>True to re-throw the exception, false to suppress it</returns>
        </member>
        <member name="M:PetaPoco.Database.OnConnectionOpened(System.Data.IDbConnection)">
            <summary>
            Called when DB connection opened
            </summary>
            <param name="conn">The newly opened IDbConnection</param>
            <returns>The same or a replacement IDbConnection</returns>
            <remarks>
            Override this method to provide custom logging of opening connection, or
            to provide a proxy IDbConnection.
            </remarks>
        </member>
        <member name="M:PetaPoco.Database.OnConnectionClosing(System.Data.IDbConnection)">
            <summary>
            Called when DB connection closed
            </summary>
            <param name="conn">The soon to be closed IDBConnection</param>
        </member>
        <member name="M:PetaPoco.Database.OnExecutingCommand(System.Data.IDbCommand)">
            <summary>
            Called just before an DB command is executed
            </summary>
            <param name="cmd">The command to be executed</param>
            <remarks>
            Override this method to provide custom logging of commands and/or
            modification of the IDbCommand before it's executed
            </remarks>
        </member>
        <member name="M:PetaPoco.Database.OnExecutedCommand(System.Data.IDbCommand)">
            <summary>
            Called on completion of command execution
            </summary>
            <param name="cmd">The IDbCommand that finished executing</param>
        </member>
        <member name="M:PetaPoco.Database.Execute(System.String,System.Object[])">
            <summary>
            Executes a non-query command
            </summary>
            <param name="sql">The SQL statement to execute</param>
            <param name="args">Arguments to any embedded parameters in the SQL</param>
            <returns>The number of rows affected</returns>
        </member>
        <member name="M:PetaPoco.Database.Execute(PetaPoco.Sql)">
            <summary>
            Executes a non-query command
            </summary>
            <param name="sql">An SQL builder object representing the query and it's arguments</param>
            <returns>The number of rows affected</returns>
        </member>
        <member name="M:PetaPoco.Database.ExecuteScalar``1(System.String,System.Object[])">
            <summary>
            Executes a query and return the first column of the first row in the result set.
            </summary>
            <typeparam name="T">The type that the result value should be cast to</typeparam>
            <param name="sql">The SQL query to execute</param>
            <param name="args">Arguments to any embedded parameters in the SQL</param>
            <returns>The scalar value cast to T</returns>
        </member>
        <member name="M:PetaPoco.Database.ExecuteScalar``1(PetaPoco.Sql)">
            <summary>
            Executes a query and return the first column of the first row in the result set.
            </summary>
            <typeparam name="T">The type that the result value should be cast to</typeparam>
            <param name="sql">An SQL builder object representing the query and it's arguments</param>
            <returns>The scalar value cast to T</returns>
        </member>
        <member name="M:PetaPoco.Database.Fetch``1(System.String,System.Object[])">
            <summary>
            Runs a query and returns the result set as a typed list
            </summary>
            <typeparam name="T">The Type representing a row in the result set</typeparam>
            <param name="sql">The SQL query to execute</param>
            <param name="args">Arguments to any embedded parameters in the SQL</param>
            <returns>A List holding the results of the query</returns>
        </member>
        <member name="M:PetaPoco.Database.Fetch``1(PetaPoco.Sql)">
            <summary>
            Runs a query and returns the result set as a typed list
            </summary>
            <typeparam name="T">The Type representing a row in the result set</typeparam>
            <param name="sql">An SQL builder object representing the query and it's arguments</param>
            <returns>A List holding the results of the query</returns>
        </member>
        <member name="M:PetaPoco.Database.BuildPageQueries``1(System.Int64,System.Int64,System.String,System.Object[]@,System.String@,System.String@)">
            <summary>
            Starting with a regular SELECT statement, derives the SQL statements required to query a 
            DB for a page of records and the total number of records
            </summary>
            <typeparam name="T">The Type representing a row in the result set</typeparam>
            <param name="skip">The number of rows to skip before the start of the page</param>
            <param name="take">The number of rows in the page</param>
            <param name="sql">The original SQL select statement</param>
            <param name="args">Arguments to any embedded parameters in the SQL</param>
            <param name="sqlCount">Outputs the SQL statement to query for the total number of matching rows</param>
            <param name="sqlPage">Outputs the SQL statement to retrieve a single page of matching rows</param>
        </member>
        <member name="M:PetaPoco.Database.Page``1(System.Int64,System.Int64,System.String,System.Object[],System.String,System.Object[])">
            <summary>
            Retrieves a page of records	and the total number of available records
            </summary>
            <typeparam name="T">The Type representing a row in the result set</typeparam>
            <param name="page">The 1 based page number to retrieve</param>
            <param name="itemsPerPage">The number of records per page</param>
            <param name="sqlCount">The SQL to retrieve the total number of records</param>
            <param name="countArgs">Arguments to any embedded parameters in the sqlCount statement</param>
            <param name="sqlPage">The SQL To retrieve a single page of results</param>
            <param name="pageArgs">Arguments to any embedded parameters in the sqlPage statement</param>
            <returns>A Page of results</returns>
            <remarks>
            This method allows separate SQL statements to be explicitly provided for the two parts of the page query.
            The page and itemsPerPage parameters are not used directly and are used simply to populate the returned Page object.
            </remarks>
        </member>
        <member name="M:PetaPoco.Database.Page``1(System.Int64,System.Int64,System.String,System.Object[])">
            <summary>
            Retrieves a page of records	and the total number of available records
            </summary>
            <typeparam name="T">The Type representing a row in the result set</typeparam>
            <param name="page">The 1 based page number to retrieve</param>
            <param name="itemsPerPage">The number of records per page</param>
            <param name="sql">The base SQL query</param>
            <param name="args">Arguments to any embedded parameters in the SQL statement</param>
            <returns>A Page of results</returns>
            <remarks>
            PetaPoco will automatically modify the supplied SELECT statement to only retrieve the
            records for the specified page.  It will also execute a second query to retrieve the
            total number of records in the result set.
            </remarks>
        </member>
        <member name="M:PetaPoco.Database.Page``1(System.Int64,System.Int64,PetaPoco.Sql)">
            <summary>
            Retrieves a page of records	and the total number of available records
            </summary>
            <typeparam name="T">The Type representing a row in the result set</typeparam>
            <param name="page">The 1 based page number to retrieve</param>
            <param name="itemsPerPage">The number of records per page</param>
            <param name="sql">An SQL builder object representing the base SQL query and it's arguments</param>
            <returns>A Page of results</returns>
            <remarks>
            PetaPoco will automatically modify the supplied SELECT statement to only retrieve the
            records for the specified page.  It will also execute a second query to retrieve the
            total number of records in the result set.
            </remarks>
        </member>
        <member name="M:PetaPoco.Database.Page``1(System.Int64,System.Int64,PetaPoco.Sql,PetaPoco.Sql)">
            <summary>
            Retrieves a page of records	and the total number of available records
            </summary>
            <typeparam name="T">The Type representing a row in the result set</typeparam>
            <param name="page">The 1 based page number to retrieve</param>
            <param name="itemsPerPage">The number of records per page</param>
            <param name="sqlCount">An SQL builder object representing the SQL to retrieve the total number of records</param>
            <param name="sqlPage">An SQL builder object representing the SQL to retrieve a single page of results</param>
            <returns>A Page of results</returns>
            <remarks>
            This method allows separate SQL statements to be explicitly provided for the two parts of the page query.
            The page and itemsPerPage parameters are not used directly and are used simply to populate the returned Page object.
            </remarks>
        </member>
        <member name="M:PetaPoco.Database.Fetch``1(System.Int64,System.Int64,System.String,System.Object[])">
            <summary>
            Retrieves a page of records (without the total count)
            </summary>
            <typeparam name="T">The Type representing a row in the result set</typeparam>
            <param name="page">The 1 based page number to retrieve</param>
            <param name="itemsPerPage">The number of records per page</param>
            <param name="sql">The base SQL query</param>
            <param name="args">Arguments to any embedded parameters in the SQL statement</param>
            <returns>A List of results</returns>
            <remarks>
            PetaPoco will automatically modify the supplied SELECT statement to only retrieve the
            records for the specified page.
            </remarks>
        </member>
        <member name="M:PetaPoco.Database.Fetch``1(System.Int64,System.Int64,PetaPoco.Sql)">
            <summary>
            Retrieves a page of records (without the total count)
            </summary>
            <typeparam name="T">The Type representing a row in the result set</typeparam>
            <param name="page">The 1 based page number to retrieve</param>
            <param name="itemsPerPage">The number of records per page</param>
            <param name="sql">An SQL builder object representing the base SQL query and it's arguments</param>
            <returns>A List of results</returns>
            <remarks>
            PetaPoco will automatically modify the supplied SELECT statement to only retrieve the
            records for the specified page.
            </remarks>
        </member>
        <member name="M:PetaPoco.Database.SkipTake``1(System.Int64,System.Int64,System.String,System.Object[])">
            <summary>
            Retrieves a range of records from result set
            </summary>
            <typeparam name="T">The Type representing a row in the result set</typeparam>
            <param name="skip">The number of rows at the start of the result set to skip over</param>
            <param name="take">The number of rows to retrieve</param>
            <param name="sql">The base SQL query</param>
            <param name="args">Arguments to any embedded parameters in the SQL statement</param>
            <returns>A List of results</returns>
            <remarks>
            PetaPoco will automatically modify the supplied SELECT statement to only retrieve the
            records for the specified range.
            </remarks>
        </member>
        <member name="M:PetaPoco.Database.SkipTake``1(System.Int64,System.Int64,PetaPoco.Sql)">
            <summary>
            Retrieves a range of records from result set
            </summary>
            <typeparam name="T">The Type representing a row in the result set</typeparam>
            <param name="skip">The number of rows at the start of the result set to skip over</param>
            <param name="take">The number of rows to retrieve</param>
            <param name="sql">An SQL builder object representing the base SQL query and it's arguments</param>
            <returns>A List of results</returns>
            <remarks>
            PetaPoco will automatically modify the supplied SELECT statement to only retrieve the
            records for the specified range.
            </remarks>
        </member>
        <member name="M:PetaPoco.Database.Query``1(System.String,System.Object[])">
            <summary>
            Runs an SQL query, returning the results as an IEnumerable collection
            </summary>
            <typeparam name="T">The Type representing a row in the result set</typeparam>
            <param name="sql">The SQL query</param>
            <param name="args">Arguments to any embedded parameters in the SQL statement</param>
            <returns>An enumerable collection of result records</returns>
            <remarks>
            For some DB providers, care should be taken to not start a new Query before finishing with
            and disposing the previous one. In cases where this is an issue, consider using Fetch which
            returns the results as a List rather than an IEnumerable.
            </remarks>
        </member>
        <member name="M:PetaPoco.Database.Query``1(PetaPoco.Sql)">
            <summary>
            Runs an SQL query, returning the results as an IEnumerable collection
            </summary>
            <typeparam name="T">The Type representing a row in the result set</typeparam>
            <param name="sql">An SQL builder object representing the base SQL query and it's arguments</param>
            <returns>An enumerable collection of result records</returns>
            <remarks>
            For some DB providers, care should be taken to not start a new Query before finishing with
            and disposing the previous one. In cases where this is an issue, consider using Fetch which
            returns the results as a List rather than an IEnumerable.
            </remarks>
        </member>
        <member name="M:PetaPoco.Database.Exists``1(System.String,System.Object[])">
            <summary>
            Checks for the existance of a row matching the specified condition
            </summary>
            <typeparam name="T">The Type representing the table being queried</typeparam>
            <param name="sqlCondition">The SQL expression to be tested for (ie: the WHERE expression)</param>
            <param name="args">Arguments to any embedded parameters in the SQL statement</param>
            <returns>True if a record matching the condition is found.</returns>
        </member>
        <member name="M:PetaPoco.Database.Exists``1(System.Object)">
            <summary>
            Checks for the existance of a row with the specified primary key value.
            </summary>
            <typeparam name="T">The Type representing the table being queried</typeparam>
            <param name="primaryKey">The primary key value to look for</param>
            <returns>True if a record with the specified primary key value exists.</returns>
        </member>
        <member name="M:PetaPoco.Database.Single``1(System.Object)">
            <summary>
            Returns the record with the specified primary key value
            </summary>
            <typeparam name="T">The Type representing a row in the result set</typeparam>
            <param name="primaryKey">The primary key value of the record to fetch</param>
            <returns>The single record matching the specified primary key value</returns>
            <remarks>
            Throws an exception if there are zero or more than one record with the specified primary key value.
            </remarks>
        </member>
        <member name="M:PetaPoco.Database.SingleOrDefault``1(System.Object)">
            <summary>
            Returns the record with the specified primary key value, or the default value if not found
            </summary>
            <typeparam name="T">The Type representing a row in the result set</typeparam>
            <param name="primaryKey">The primary key value of the record to fetch</param>
            <returns>The single record matching the specified primary key value</returns>
            <remarks>
            If there are no records with the specified primary key value, default(T) (typically null) is returned.
            </remarks>
        </member>
        <member name="M:PetaPoco.Database.Single``1(System.String,System.Object[])">
            <summary>
            Runs a query that should always return a single row.
            </summary>
            <typeparam name="T">The Type representing a row in the result set</typeparam>
            <param name="sql">The SQL query</param>
            <param name="args">Arguments to any embedded parameters in the SQL statement</param>
            <returns>The single record matching the specified primary key value</returns>
            <remarks>
            Throws an exception if there are zero or more than one matching record
            </remarks>
        </member>
        <member name="M:PetaPoco.Database.SingleOrDefault``1(System.String,System.Object[])">
            <summary>
            Runs a query that should always return either a single row, or no rows
            </summary>
            <typeparam name="T">The Type representing a row in the result set</typeparam>
            <param name="sql">The SQL query</param>
            <param name="args">Arguments to any embedded parameters in the SQL statement</param>
            <returns>The single record matching the specified primary key value, or default(T) if no matching rows</returns>
        </member>
        <member name="M:PetaPoco.Database.First``1(System.String,System.Object[])">
            <summary>
            Runs a query that should always return at least one return
            </summary>
            <typeparam name="T">The Type representing a row in the result set</typeparam>
            <param name="sql">The SQL query</param>
            <param name="args">Arguments to any embedded parameters in the SQL statement</param>
            <returns>The first record in the result set</returns>
        </member>
        <member name="M:PetaPoco.Database.FirstOrDefault``1(System.String,System.Object[])">
            <summary>
            Runs a query and returns the first record, or the default value if no matching records
            </summary>
            <typeparam name="T">The Type representing a row in the result set</typeparam>
            <param name="sql">The SQL query</param>
            <param name="args">Arguments to any embedded parameters in the SQL statement</param>
            <returns>The first record in the result set, or default(T) if no matching rows</returns>
        </member>
        <member name="M:PetaPoco.Database.Single``1(PetaPoco.Sql)">
            <summary>
            Runs a query that should always return a single row.
            </summary>
            <typeparam name="T">The Type representing a row in the result set</typeparam>
            <param name="sql">An SQL builder object representing the query and it's arguments</param>
            <returns>The single record matching the specified primary key value</returns>
            <remarks>
            Throws an exception if there are zero or more than one matching record
            </remarks>
        </member>
        <member name="M:PetaPoco.Database.SingleOrDefault``1(PetaPoco.Sql)">
            <summary>
            Runs a query that should always return either a single row, or no rows
            </summary>
            <typeparam name="T">The Type representing a row in the result set</typeparam>
            <param name="sql">An SQL builder object representing the query and it's arguments</param>
            <returns>The single record matching the specified primary key value, or default(T) if no matching rows</returns>
        </member>
        <member name="M:PetaPoco.Database.First``1(PetaPoco.Sql)">
            <summary>
            Runs a query that should always return at least one return
            </summary>
            <typeparam name="T">The Type representing a row in the result set</typeparam>
            <param name="sql">An SQL builder object representing the query and it's arguments</param>
            <returns>The first record in the result set</returns>
        </member>
        <member name="M:PetaPoco.Database.FirstOrDefault``1(PetaPoco.Sql)">
            <summary>
            Runs a query and returns the first record, or the default value if no matching records
            </summary>
            <typeparam name="T">The Type representing a row in the result set</typeparam>
            <param name="sql">An SQL builder object representing the query and it's arguments</param>
            <returns>The first record in the result set, or default(T) if no matching rows</returns>
        </member>
        <member name="M:PetaPoco.Database.Insert(System.String,System.String,System.Object)">
            <summary>
            Performs an SQL Insert
            </summary>
            <param name="tableName">The name of the table to insert into</param>
            <param name="primaryKeyName">The name of the primary key column of the table</param>
            <param name="poco">The POCO object that specifies the column values to be inserted</param>
            <returns>The auto allocated primary key of the new record</returns>
        </member>
        <member name="M:PetaPoco.Database.Insert(System.String,System.String,System.Boolean,System.Object)">
            <summary>
            Performs an SQL Insert
            </summary>
            <param name="tableName">The name of the table to insert into</param>
            <param name="primaryKeyName">The name of the primary key column of the table</param>
            <param name="autoIncrement">True if the primary key is automatically allocated by the DB</param>
            <param name="poco">The POCO object that specifies the column values to be inserted</param>
            <returns>The auto allocated primary key of the new record, or null for non-auto-increment tables</returns>
            <remarks>Inserts a poco into a table.  If the poco has a property with the same name 
            as the primary key the id of the new record is assigned to it.  Either way,
            the new id is returned.</remarks>
        </member>
        <member name="M:PetaPoco.Database.Insert(System.Object)">
            <summary>
            Performs an SQL Insert
            </summary>
            <param name="poco">The POCO object that specifies the column values to be inserted</param>
            <returns>The auto allocated primary key of the new record, or null for non-auto-increment tables</returns>
            <remarks>The name of the table, it's primary key and whether it's an auto-allocated primary key are retrieved
            from the POCO's attributes</remarks>
        </member>
        <member name="M:PetaPoco.Database.Update(System.String,System.String,System.Object,System.Object)">
            <summary>
            Performs an SQL update
            </summary>
            <param name="tableName">The name of the table to update</param>
            <param name="primaryKeyName">The name of the primary key column of the table</param>
            <param name="poco">The POCO object that specifies the column values to be updated</param>
            <param name="primaryKeyValue">The primary key of the record to be updated</param>
            <returns>The number of affected records</returns>
        </member>
        <member name="M:PetaPoco.Database.Update(System.String,System.String,System.Object,System.Object,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Performs an SQL update
            </summary>
            <param name="tableName">The name of the table to update</param>
            <param name="primaryKeyName">The name of the primary key column of the table</param>
            <param name="poco">The POCO object that specifies the column values to be updated</param>
            <param name="primaryKeyValue">The primary key of the record to be updated</param>
            <param name="columns">The column names of the columns to be updated, or null for all</param>
            <returns>The number of affected rows</returns>
        </member>
        <member name="M:PetaPoco.Database.Update(System.String,System.String,System.Object)">
            <summary>
            Performs an SQL update
            </summary>
            <param name="tableName">The name of the table to update</param>
            <param name="primaryKeyName">The name of the primary key column of the table</param>
            <param name="poco">The POCO object that specifies the column values to be updated</param>
            <returns>The number of affected rows</returns>
        </member>
        <member name="M:PetaPoco.Database.Update(System.String,System.String,System.Object,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Performs an SQL update
            </summary>
            <param name="tableName">The name of the table to update</param>
            <param name="primaryKeyName">The name of the primary key column of the table</param>
            <param name="poco">The POCO object that specifies the column values to be updated</param>
            <param name="columns">The column names of the columns to be updated, or null for all</param>
            <returns>The number of affected rows</returns>
        </member>
        <member name="M:PetaPoco.Database.Update(System.Object,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Performs an SQL update
            </summary>
            <param name="poco">The POCO object that specifies the column values to be updated</param>
            <param name="columns">The column names of the columns to be updated, or null for all</param>
            <returns>The number of affected rows</returns>
        </member>
        <member name="M:PetaPoco.Database.Update(System.Object)">
            <summary>
            Performs an SQL update
            </summary>
            <param name="poco">The POCO object that specifies the column values to be updated</param>
            <returns>The number of affected rows</returns>
        </member>
        <member name="M:PetaPoco.Database.Update(System.Object,System.Object)">
            <summary>
            Performs an SQL update
            </summary>
            <param name="poco">The POCO object that specifies the column values to be updated</param>
            <param name="primaryKeyValue">The primary key of the record to be updated</param>
            <returns>The number of affected rows</returns>
        </member>
        <member name="M:PetaPoco.Database.Update(System.Object,System.Object,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Performs an SQL update
            </summary>
            <param name="poco">The POCO object that specifies the column values to be updated</param>
            <param name="primaryKeyValue">The primary key of the record to be updated</param>
            <param name="columns">The column names of the columns to be updated, or null for all</param>
            <returns>The number of affected rows</returns>
        </member>
        <member name="M:PetaPoco.Database.Update``1(System.String,System.Object[])">
            <summary>
            Performs an SQL update
            </summary>
            <typeparam name="T">The POCO class who's attributes specify the name of the table to update</typeparam>
            <param name="sql">The SQL update and condition clause (ie: everything after "UPDATE tablename"</param>
            <param name="args">Arguments to any embedded parameters in the SQL</param>
            <returns>The number of affected rows</returns>
        </member>
        <member name="M:PetaPoco.Database.Update``1(PetaPoco.Sql)">
            <summary>
            Performs an SQL update
            </summary>
            <typeparam name="T">The POCO class who's attributes specify the name of the table to update</typeparam>
            <param name="sql">An SQL builder object representing the SQL update and condition clause (ie: everything after "UPDATE tablename"</param>
            <returns>The number of affected rows</returns>
        </member>
        <member name="M:PetaPoco.Database.Delete(System.String,System.String,System.Object)">
            <summary>
            Performs and SQL Delete
            </summary>
            <param name="tableName">The name of the table to delete from</param>
            <param name="primaryKeyName">The name of the primary key column</param>
            <param name="poco">The POCO object whose primary key value will be used to delete the row</param>
            <returns>The number of rows affected</returns>
        </member>
        <member name="M:PetaPoco.Database.Delete(System.String,System.String,System.Object,System.Object)">
            <summary>
            Performs and SQL Delete
            </summary>
            <param name="tableName">The name of the table to delete from</param>
            <param name="primaryKeyName">The name of the primary key column</param>
            <param name="poco">The POCO object whose primary key value will be used to delete the row (or null to use the supplied primary key value)</param>
            <param name="primaryKeyValue">The value of the primary key identifing the record to be deleted (or null, or get this value from the POCO instance)</param>
            <returns>The number of rows affected</returns>
        </member>
        <member name="M:PetaPoco.Database.Delete(System.Object)">
            <summary>
            Performs an SQL Delete
            </summary>
            <param name="poco">The POCO object specifying the table name and primary key value of the row to be deleted</param>
            <returns>The number of rows affected</returns>
        </member>
        <member name="M:PetaPoco.Database.Delete``1(System.Object)">
            <summary>
            Performs an SQL Delete
            </summary>
            <typeparam name="T">The POCO class whose attributes identify the table and primary key to be used in the delete</typeparam>
            <param name="pocoOrPrimaryKey">The value of the primary key of the row to delete</param>
            <returns></returns>
        </member>
        <member name="M:PetaPoco.Database.Delete``1(System.String,System.Object[])">
            <summary>
            Performs an SQL Delete
            </summary>
            <typeparam name="T">The POCO class who's attributes specify the name of the table to delete from</typeparam>
            <param name="sql">The SQL condition clause identifying the row to delete (ie: everything after "DELETE FROM tablename"</param>
            <param name="args">Arguments to any embedded parameters in the SQL</param>
            <returns>The number of affected rows</returns>
        </member>
        <member name="M:PetaPoco.Database.Delete``1(PetaPoco.Sql)">
            <summary>
            Performs an SQL Delete
            </summary>
            <typeparam name="T">The POCO class who's attributes specify the name of the table to delete from</typeparam>
            <param name="sql">An SQL builder object representing the SQL condition clause identifying the row to delete (ie: everything after "UPDATE tablename"</param>
            <returns>The number of affected rows</returns>
        </member>
        <member name="M:PetaPoco.Database.IsNew(System.String,System.Object)">
            <summary>
            Check if a poco represents a new row
            </summary>
            <param name="primaryKeyName">The name of the primary key column</param>
            <param name="poco">The object instance whose "newness" is to be tested</param>
            <returns>True if the POCO represents a record already in the database</returns>
            <remarks>This method simply tests if the POCO's primary key column property has been set to something non-zero.</remarks>
        </member>
        <member name="M:PetaPoco.Database.IsNew(System.Object)">
            <summary>
            Check if a poco represents a new row
            </summary>
            <param name="poco">The object instance whose "newness" is to be tested</param>
            <returns>True if the POCO represents a record already in the database</returns>
            <remarks>This method simply tests if the POCO's primary key column property has been set to something non-zero.</remarks>
        </member>
        <member name="M:PetaPoco.Database.Save(System.String,System.String,System.Object)">
            <summary>
            Saves a POCO by either performing either an SQL Insert or SQL Update
            </summary>
            <param name="tableName">The name of the table to be updated</param>
            <param name="primaryKeyName">The name of the primary key column</param>
            <param name="poco">The POCO object to be saved</param>
        </member>
        <member name="M:PetaPoco.Database.Save(System.Object)">
            <summary>
            Saves a POCO by either performing either an SQL Insert or SQL Update
            </summary>
            <param name="poco">The POCO object to be saved</param>
        </member>
        <member name="M:PetaPoco.Database.Fetch``3(System.Func{``0,``1,``2},System.String,System.Object[])">
            <summary>
            Perform a multi-poco fetch
            </summary>
            <typeparam name="T1">The first POCO type</typeparam>
            <typeparam name="T2">The second POCO type</typeparam>
            <typeparam name="TRet">The returned list POCO type</typeparam>
            <param name="cb">A callback function to connect the POCO instances, or null to automatically guess the relationships</param>
            <param name="sql">The SQL query to be executed</param>
            <param name="args">Arguments to any embedded parameters in the SQL</param>
            <returns>A collection of POCO's as a List</returns>
        </member>
        <member name="M:PetaPoco.Database.Fetch``4(System.Func{``0,``1,``2,``3},System.String,System.Object[])">
            <summary>
            Perform a multi-poco fetch
            </summary>
            <typeparam name="T1">The first POCO type</typeparam>
            <typeparam name="T2">The second POCO type</typeparam>
            <typeparam name="T3">The third POCO type</typeparam>
            <typeparam name="TRet">The returned list POCO type</typeparam>
            <param name="cb">A callback function to connect the POCO instances, or null to automatically guess the relationships</param>
            <param name="sql">The SQL query to be executed</param>
            <param name="args">Arguments to any embedded parameters in the SQL</param>
            <returns>A collection of POCO's as a List</returns>
        </member>
        <member name="M:PetaPoco.Database.Fetch``5(System.Func{``0,``1,``2,``3,``4},System.String,System.Object[])">
            <summary>
            Perform a multi-poco fetch
            </summary>
            <typeparam name="T1">The first POCO type</typeparam>
            <typeparam name="T2">The second POCO type</typeparam>
            <typeparam name="T3">The third POCO type</typeparam>
            <typeparam name="T4">The fourth POCO type</typeparam>
            <typeparam name="TRet">The returned list POCO type</typeparam>
            <param name="cb">A callback function to connect the POCO instances, or null to automatically guess the relationships</param>
            <param name="sql">The SQL query to be executed</param>
            <param name="args">Arguments to any embedded parameters in the SQL</param>
            <returns>A collection of POCO's as a List</returns>
        </member>
        <member name="M:PetaPoco.Database.Query``3(System.Func{``0,``1,``2},System.String,System.Object[])">
            <summary>
            Perform a multi-poco query
            </summary>
            <typeparam name="T1">The first POCO type</typeparam>
            <typeparam name="T2">The second POCO type</typeparam>
            <typeparam name="TRet">The type of objects in the returned IEnumerable</typeparam>
            <param name="cb">A callback function to connect the POCO instances, or null to automatically guess the relationships</param>
            <param name="sql">The SQL query to be executed</param>
            <param name="args">Arguments to any embedded parameters in the SQL</param>
            <returns>A collection of POCO's as an IEnumerable</returns>
        </member>
        <member name="M:PetaPoco.Database.Query``4(System.Func{``0,``1,``2,``3},System.String,System.Object[])">
            <summary>
            Perform a multi-poco query
            </summary>
            <typeparam name="T1">The first POCO type</typeparam>
            <typeparam name="T2">The second POCO type</typeparam>
            <typeparam name="T3">The third POCO type</typeparam>
            <typeparam name="TRet">The type of objects in the returned IEnumerable</typeparam>
            <param name="cb">A callback function to connect the POCO instances, or null to automatically guess the relationships</param>
            <param name="sql">The SQL query to be executed</param>
            <param name="args">Arguments to any embedded parameters in the SQL</param>
            <returns>A collection of POCO's as an IEnumerable</returns>
        </member>
        <member name="M:PetaPoco.Database.Query``5(System.Func{``0,``1,``2,``3,``4},System.String,System.Object[])">
            <summary>
            Perform a multi-poco query
            </summary>
            <typeparam name="T1">The first POCO type</typeparam>
            <typeparam name="T2">The second POCO type</typeparam>
            <typeparam name="T3">The third POCO type</typeparam>
            <typeparam name="T4">The fourth POCO type</typeparam>
            <typeparam name="TRet">The type of objects in the returned IEnumerable</typeparam>
            <param name="cb">A callback function to connect the POCO instances, or null to automatically guess the relationships</param>
            <param name="sql">The SQL query to be executed</param>
            <param name="args">Arguments to any embedded parameters in the SQL</param>
            <returns>A collection of POCO's as an IEnumerable</returns>
        </member>
        <member name="M:PetaPoco.Database.Fetch``3(System.Func{``0,``1,``2},PetaPoco.Sql)">
            <summary>
            Perform a multi-poco fetch
            </summary>
            <typeparam name="T1">The first POCO type</typeparam>
            <typeparam name="T2">The second POCO type</typeparam>
            <typeparam name="TRet">The returned list POCO type</typeparam>
            <param name="cb">A callback function to connect the POCO instances, or null to automatically guess the relationships</param>
            <param name="sql">An SQL builder object representing the query and it's arguments</param>
            <returns>A collection of POCO's as a List</returns>
        </member>
        <member name="M:PetaPoco.Database.Fetch``4(System.Func{``0,``1,``2,``3},PetaPoco.Sql)">
            <summary>
            Perform a multi-poco fetch
            </summary>
            <typeparam name="T1">The first POCO type</typeparam>
            <typeparam name="T2">The second POCO type</typeparam>
            <typeparam name="T3">The third POCO type</typeparam>
            <typeparam name="TRet">The returned list POCO type</typeparam>
            <param name="cb">A callback function to connect the POCO instances, or null to automatically guess the relationships</param>
            <param name="sql">An SQL builder object representing the query and it's arguments</param>
            <returns>A collection of POCO's as a List</returns>
        </member>
        <member name="M:PetaPoco.Database.Fetch``5(System.Func{``0,``1,``2,``3,``4},PetaPoco.Sql)">
            <summary>
            Perform a multi-poco fetch
            </summary>
            <typeparam name="T1">The first POCO type</typeparam>
            <typeparam name="T2">The second POCO type</typeparam>
            <typeparam name="T3">The third POCO type</typeparam>
            <typeparam name="T4">The fourth POCO type</typeparam>
            <typeparam name="TRet">The returned list POCO type</typeparam>
            <param name="cb">A callback function to connect the POCO instances, or null to automatically guess the relationships</param>
            <param name="sql">An SQL builder object representing the query and it's arguments</param>
            <returns>A collection of POCO's as a List</returns>
        </member>
        <member name="M:PetaPoco.Database.Query``3(System.Func{``0,``1,``2},PetaPoco.Sql)">
            <summary>
            Perform a multi-poco query
            </summary>
            <typeparam name="T1">The first POCO type</typeparam>
            <typeparam name="T2">The second POCO type</typeparam>
            <typeparam name="TRet">The type of objects in the returned IEnumerable</typeparam>
            <param name="cb">A callback function to connect the POCO instances, or null to automatically guess the relationships</param>
            <param name="sql">An SQL builder object representing the query and it's arguments</param>
            <returns>A collection of POCO's as an IEnumerable</returns>
        </member>
        <member name="M:PetaPoco.Database.Query``4(System.Func{``0,``1,``2,``3},PetaPoco.Sql)">
            <summary>
            Perform a multi-poco query
            </summary>
            <typeparam name="T1">The first POCO type</typeparam>
            <typeparam name="T2">The second POCO type</typeparam>
            <typeparam name="T3">The third POCO type</typeparam>
            <typeparam name="TRet">The type of objects in the returned IEnumerable</typeparam>
            <param name="cb">A callback function to connect the POCO instances, or null to automatically guess the relationships</param>
            <param name="sql">An SQL builder object representing the query and it's arguments</param>
            <returns>A collection of POCO's as an IEnumerable</returns>
        </member>
        <member name="M:PetaPoco.Database.Query``5(System.Func{``0,``1,``2,``3,``4},PetaPoco.Sql)">
            <summary>
            Perform a multi-poco query
            </summary>
            <typeparam name="T1">The first POCO type</typeparam>
            <typeparam name="T2">The second POCO type</typeparam>
            <typeparam name="T3">The third POCO type</typeparam>
            <typeparam name="T4">The fourth POCO type</typeparam>
            <typeparam name="TRet">The type of objects in the returned IEnumerable</typeparam>
            <param name="cb">A callback function to connect the POCO instances, or null to automatically guess the relationships</param>
            <param name="sql">An SQL builder object representing the query and it's arguments</param>
            <returns>A collection of POCO's as an IEnumerable</returns>
        </member>
        <member name="M:PetaPoco.Database.Fetch``2(System.String,System.Object[])">
            <summary>
            Perform a multi-poco fetch
            </summary>
            <typeparam name="T1">The first POCO type</typeparam>
            <typeparam name="T2">The second POCO type</typeparam>
            <param name="sql">The SQL query to be executed</param>
            <param name="args">Arguments to any embedded parameters in the SQL</param>
            <returns>A collection of POCO's as a List</returns>
        </member>
        <member name="M:PetaPoco.Database.Fetch``3(System.String,System.Object[])">
            <summary>
            Perform a multi-poco fetch
            </summary>
            <typeparam name="T1">The first POCO type</typeparam>
            <typeparam name="T2">The second POCO type</typeparam>
            <typeparam name="T3">The third POCO type</typeparam>
            <param name="sql">The SQL query to be executed</param>
            <param name="args">Arguments to any embedded parameters in the SQL</param>
            <returns>A collection of POCO's as a List</returns>
        </member>
        <member name="M:PetaPoco.Database.Fetch``4(System.String,System.Object[])">
            <summary>
            Perform a multi-poco fetch
            </summary>
            <typeparam name="T1">The first POCO type</typeparam>
            <typeparam name="T2">The second POCO type</typeparam>
            <typeparam name="T3">The third POCO type</typeparam>
            <typeparam name="T4">The fourth POCO type</typeparam>
            <param name="sql">The SQL query to be executed</param>
            <param name="args">Arguments to any embedded parameters in the SQL</param>
            <returns>A collection of POCO's as a List</returns>
        </member>
        <member name="M:PetaPoco.Database.Query``2(System.String,System.Object[])">
            <summary>
            Perform a multi-poco query
            </summary>
            <typeparam name="T1">The first POCO type</typeparam>
            <typeparam name="T2">The second POCO type</typeparam>
            <param name="sql">The SQL query to be executed</param>
            <param name="args">Arguments to any embedded parameters in the SQL</param>
            <returns>A collection of POCO's as an IEnumerable</returns>
        </member>
        <member name="M:PetaPoco.Database.Query``3(System.String,System.Object[])">
            <summary>
            Perform a multi-poco query
            </summary>
            <typeparam name="T1">The first POCO type</typeparam>
            <typeparam name="T2">The second POCO type</typeparam>
            <typeparam name="T3">The third POCO type</typeparam>
            <param name="sql">The SQL query to be executed</param>
            <param name="args">Arguments to any embedded parameters in the SQL</param>
            <returns>A collection of POCO's as an IEnumerable</returns>
        </member>
        <member name="M:PetaPoco.Database.Query``4(System.String,System.Object[])">
            <summary>
            Perform a multi-poco query
            </summary>
            <typeparam name="T1">The first POCO type</typeparam>
            <typeparam name="T2">The second POCO type</typeparam>
            <typeparam name="T3">The third POCO type</typeparam>
            <typeparam name="T4">The fourth POCO type</typeparam>
            <param name="sql">The SQL query to be executed</param>
            <param name="args">Arguments to any embedded parameters in the SQL</param>
            <returns>A collection of POCO's as an IEnumerable</returns>
        </member>
        <member name="M:PetaPoco.Database.Fetch``2(PetaPoco.Sql)">
            <summary>
            Perform a multi-poco fetch
            </summary>
            <typeparam name="T1">The first POCO type</typeparam>
            <typeparam name="T2">The second POCO type</typeparam>
            <param name="sql">An SQL builder object representing the query and it's arguments</param>
            <returns>A collection of POCO's as a List</returns>
        </member>
        <member name="M:PetaPoco.Database.Fetch``3(PetaPoco.Sql)">
            <summary>
            Perform a multi-poco fetch
            </summary>
            <typeparam name="T1">The first POCO type</typeparam>
            <typeparam name="T2">The second POCO type</typeparam>
            <typeparam name="T3">The third POCO type</typeparam>
            <param name="sql">An SQL builder object representing the query and it's arguments</param>
            <returns>A collection of POCO's as a List</returns>
        </member>
        <member name="M:PetaPoco.Database.Fetch``4(PetaPoco.Sql)">
            <summary>
            Perform a multi-poco fetch
            </summary>
            <typeparam name="T1">The first POCO type</typeparam>
            <typeparam name="T2">The second POCO type</typeparam>
            <typeparam name="T3">The third POCO type</typeparam>
            <typeparam name="T4">The fourth POCO type</typeparam>
            <param name="sql">An SQL builder object representing the query and it's arguments</param>
            <returns>A collection of POCO's as a List</returns>
        </member>
        <member name="M:PetaPoco.Database.Query``2(PetaPoco.Sql)">
            <summary>
            Perform a multi-poco query
            </summary>
            <typeparam name="T1">The first POCO type</typeparam>
            <typeparam name="T2">The second POCO type</typeparam>
            <param name="sql">An SQL builder object representing the query and it's arguments</param>
            <returns>A collection of POCO's as an IEnumerable</returns>
        </member>
        <member name="M:PetaPoco.Database.Query``3(PetaPoco.Sql)">
            <summary>
            Perform a multi-poco query
            </summary>
            <typeparam name="T1">The first POCO type</typeparam>
            <typeparam name="T2">The second POCO type</typeparam>
            <typeparam name="T3">The third POCO type</typeparam>
            <param name="sql">An SQL builder object representing the query and it's arguments</param>
            <returns>A collection of POCO's as an IEnumerable</returns>
        </member>
        <member name="M:PetaPoco.Database.Query``4(PetaPoco.Sql)">
            <summary>
            Perform a multi-poco query
            </summary>
            <typeparam name="T1">The first POCO type</typeparam>
            <typeparam name="T2">The second POCO type</typeparam>
            <typeparam name="T3">The third POCO type</typeparam>
            <typeparam name="T4">The fourth POCO type</typeparam>
            <param name="sql">An SQL builder object representing the query and it's arguments</param>
            <returns>A collection of POCO's as an IEnumerable</returns>
        </member>
        <member name="M:PetaPoco.Database.Query``1(System.Type[],System.Object,System.String,System.Object[])">
            <summary>
            Performs a multi-poco query
            </summary>
            <typeparam name="TRet">The type of objects in the returned IEnumerable</typeparam>
            <param name="types">An array of Types representing the POCO types of the returned result set.</param>
            <param name="cb">A callback function to connect the POCO instances, or null to automatically guess the relationships</param>
            <param name="sql">The SQL query to be executed</param>
            <param name="args">Arguments to any embedded parameters in the SQL</param>
            <returns>A collection of POCO's as an IEnumerable</returns>
        </member>
        <member name="M:PetaPoco.Database.FormatCommand(System.Data.IDbCommand)">
            <summary>
            Formats the contents of a DB command for display
            </summary>
            <param name="cmd"></param>
            <returns></returns>
        </member>
        <member name="M:PetaPoco.Database.FormatCommand(System.String,System.Object[])">
            <summary>
            Formats an SQL query and it's arguments for display
            </summary>
            <param name="sql"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="P:PetaPoco.Database.KeepConnectionAlive">
            <summary>
            When set to true the first opened connection is kept alive until this object is disposed
            </summary>
        </member>
        <member name="P:PetaPoco.Database.Connection">
            <summary>
            Provides access to the currently open shared connection (or null if none)
            </summary>
        </member>
        <member name="P:PetaPoco.Database.LastSQL">
            <summary>
            Retrieves the SQL of the last executed statement
            </summary>
        </member>
        <member name="P:PetaPoco.Database.LastArgs">
            <summary>
            Retrieves the arguments to the last execute statement
            </summary>
        </member>
        <member name="P:PetaPoco.Database.LastCommand">
            <summary>
            Returns a formatted string describing the last executed SQL statement and it's argument values
            </summary>
        </member>
        <member name="P:PetaPoco.Database.EnableAutoSelect">
            <summary>
            When set to true, PetaPoco will automatically create the "SELECT columns" part of any query that looks like it needs it
            </summary>
        </member>
        <member name="P:PetaPoco.Database.EnableNamedParams">
            <summary>
            When set to true, parameters can be named ?myparam and populated from properties of the passed in argument values.
            </summary>
        </member>
        <member name="P:PetaPoco.Database.CommandTimeout">
            <summary>
            Sets the timeout value for all SQL statements.
            </summary>
        </member>
        <member name="P:PetaPoco.Database.OneTimeCommandTimeout">
            <summary>
            Sets the timeout value for the next (and only next) SQL statement
            </summary>
        </member>
        <member name="T:Tunynet.PagingDataSet`1">
            <summary>
            分页数据封装
            </summary>
            <typeparam name="T">分页数据的实体类型</typeparam>
        </member>
        <member name="M:Tunynet.PagingDataSet`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            构造函数
            </summary>
            <param name="entities">用于分页的实体集合</param>
        </member>
        <member name="M:Tunynet.PagingDataSet`1.#ctor(System.Collections.Generic.IList{`0})">
            <summary>
            构造函数
            </summary>
            <param name="entities">用于分页的实体集合</param>
        </member>
        <member name="P:Tunynet.PagingDataSet`1.PageSize">
            <summary>
            每页显示记录数
            </summary>
        </member>
        <member name="P:Tunynet.PagingDataSet`1.PageIndex">
            <summary>
            当前页数
            </summary>
        </member>
        <member name="P:Tunynet.PagingDataSet`1.TotalRecords">
            <summary>
            总记录数
            </summary>
        </member>
        <member name="P:Tunynet.PagingDataSet`1.PageCount">
            <summary>
            页数
            </summary>
        </member>
        <member name="P:Tunynet.PagingDataSet`1.QueryDuration">
            <summary>
            搜索执行时间(秒)
            </summary>
        </member>
        <member name="T:Tunynet.DIContainer">
            <summary>
            依赖注入容器
            </summary>
            <remarks>
            对Autofac进行封装
            </remarks>
        </member>
        <member name="M:Tunynet.DIContainer.RegisterContainer(Autofac.IContainer)">
            <summary>
            注册DIContainer
            </summary>
            <param name="container">Autofac.IContainer</param>
        </member>
        <member name="M:Tunynet.DIContainer.Resolve``1">
            <summary>
            按类型获取组件
            </summary>
            <typeparam name="TService">组件类型</typeparam>
            <returns>返回获取的组件</returns>
        </member>
        <member name="M:Tunynet.DIContainer.ResolveNamed``1(System.String)">
            <summary>
            按名称获取组件
            </summary>
            <typeparam name="TService">组件类型</typeparam>
            <param name="serviceName">组件名称</param>
            <returns>返回获取的组件</returns>
        </member>
        <member name="M:Tunynet.DIContainer.Resolve``1(Autofac.Core.Parameter[])">
            <summary>
            按参数获取组件
            </summary>
            <typeparam name="TService">组件类型</typeparam>
            <param name="parameters"><see cref="T:Autofac.Core.Parameter"/></param>
            <returns>返回获取的组件</returns>
        </member>
        <member name="M:Tunynet.DIContainer.ResolveKeyed``1(System.Object)">
            <summary>
            按key获取组件
            </summary>
            <typeparam name="TService">组件类型</typeparam>
            <param name="serviceKey">枚举类型的Key</param>
            <returns>返回获取的组件</returns>
        </member>
        <member name="M:Tunynet.DIContainer.ResolvePerHttpRequest``1">
            <summary>
            获取InstancePerHttpRequest的组件
            </summary>        
            <typeparam name="TService">组件类型</typeparam>
        </member>
        <member name="T:Tunynet.EntityData">
            <summary>
            实体元数据
            </summary>
        </member>
        <member name="M:Tunynet.EntityData.#ctor(System.Type)">
            <summary>
            构造函数
            </summary>
            <param name="t">实体类型</param>
        </member>
        <member name="M:Tunynet.EntityData.ParseCacheTimelinessHelper(System.Type)">
            <summary>
            解析Type的CacheTimelinessHelper
            </summary>
            <param name="t">实体类型</param>
            <returns>实体缓存设置</returns>
        </member>
        <member name="M:Tunynet.EntityData.ForType(System.Type)">
            <summary>
            根据实体类型获取实体元数据
            </summary>
            <param name="t">实体类型</param>
            <returns>实体元数据</returns>
        </member>
        <member name="P:Tunynet.EntityData.Type">
            <summary>
            实体类型
            </summary>
        </member>
        <member name="P:Tunynet.EntityData.TypeHashID">
            <summary>
            类型的哈希值（16位md5）
            </summary>
        </member>
        <member name="P:Tunynet.EntityData.RealTimeCacheHelper">
            <summary>
            实体缓存设置
            </summary>
        </member>
        <member name="T:Tunynet.PropertySerializer">
            <summary>
            属性序列化器
            </summary>
        </member>
        <member name="M:Tunynet.PropertySerializer.#ctor(System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="propertyNames">propertyNames</param>
            <param name="propertyValues">propertyValues</param>
        </member>
        <member name="M:Tunynet.PropertySerializer.Serialize(System.String@,System.String@)">
            <summary>
            存储前把扩展属性序列化成PropertyNames和PropertyValues
            </summary>
        </member>
        <member name="M:Tunynet.PropertySerializer.GetExtendedProperty``1(System.String)">
            <summary>
            获取propertyName指定的属性值
            </summary>
            <param name="propertyName">属性名称</param>
        </member>
        <member name="M:Tunynet.PropertySerializer.GetExtendedProperty``1(System.String,``0)">
            <summary>
            获取propertyName指定的属性值
            </summary>
            <typeparam name="T">属性类型</typeparam>
            <param name="propertyName">属性名称</param>
            <param name="defaultValue">如果未找到则返回该默认值</param>
        </member>
        <member name="M:Tunynet.PropertySerializer.SetExtendedProperty(System.String,System.Object)">
            <summary>
            设置扩展属性
            </summary>
            <param name="propertyName">属性名称</param>
            <param name="propertyValue">属性值</param>
        </member>
        <member name="M:Tunynet.PropertySerializer.ConvertToNameValueCollection(System.String,System.String)">
            <summary>
            从序列化字符串(propertyNames、propertyValues)生成NameValueCollection
            </summary>
            <param name="propertyNames">用于生成NameValueCollection的Names</param>
            <param name="propertyValues">用于生成NameValueCollection的Vaules</param>        
            <example>
            string keys = "key1:S:0:3:key2:S:3:4:";
            string values = "1234567";
            将返回一个NameValueCollection，包括2个Keys(Key1、Key2) 和对应的两个values（123、4567）
            </example>
            <returns>
            属性名称、值构成的字典集合
            </returns>
        </member>
        <member name="M:Tunynet.PropertySerializer.ConvertFromNameValueCollection(System.Collections.Specialized.NameValueCollection,System.String@,System.String@)">
            <summary>
            从NameValueCollection生成序列化属性的名称字符串和值字符串
            </summary>
            <param name="nvc">要转换的NameValueCollection</param>
            <param name="propertyNames">NameValueCollection生成的序列化属性名称字符串</param>
            <param name="propertyValues">NameValueCollection生成的序列化属性值字符串</param>
            <exception cref="T:System.ArgumentException">序列化属性的名称不能包括":"，否则抛出<see cref="T:System.ArgumentException"/>异常</exception>
        </member>
        <member name="T:PetaPoco.ColumnAttribute">
            <summary>
            For explicit poco properties, marks the property as a column and optionally 
            supplies the DB column name.
            </summary>
        </member>
        <member name="T:PetaPoco.ExplicitColumnsAttribute">
            <summary>
            Poco classes marked with the Explicit attribute require all column properties to 
            be marked with the Column attribute
            </summary>
        </member>
        <member name="T:PetaPoco.IgnoreAttribute">
            <summary>
            Use the Ignore attribute on POCO class properties that shouldn't be mapped
            by PetaPoco.
            </summary>
        </member>
        <member name="T:PetaPoco.PrimaryKeyAttribute">
            <summary>
            Specifies the primary key column of a poco class, whether the column is auto incrementing
            and the sequence name for Oracle sequence columns.
            </summary>
        </member>
        <member name="T:PetaPoco.ResultColumnAttribute">
            <summary>
            Marks a poco property as a result only column that is populated in queries
            but not used for updates or inserts.
            </summary>
        </member>
        <member name="T:PetaPoco.TableNameAttribute">
            <summary>
            Sets the DB table name to be used for a Poco class.
            </summary>
        </member>
        <member name="T:PetaPoco.AnsiString">
            <summary>
            Wrap strings in an instance of this class to force use of DBType.AnsiString
            </summary>
        </member>
        <member name="M:PetaPoco.AnsiString.#ctor(System.String)">
            <summary>
            Constructs an AnsiString
            </summary>
            <param name="str">The C# string to be converted to ANSI before being passed to the DB</param>
        </member>
        <member name="P:PetaPoco.AnsiString.Value">
            <summary>
            The string value
            </summary>
        </member>
        <member name="T:PetaPoco.ColumnInfo">
            <summary>
            Hold information about a column in the database.
            </summary>
            <remarks>
            Typically ColumnInfo is automatically populated from the attributes on a POCO object and it's properties. It can
            however also be returned from the IMapper interface to provide your owning bindings between the DB and your POCOs.
            </remarks>
        </member>
        <member name="M:PetaPoco.ColumnInfo.FromProperty(System.Reflection.PropertyInfo)">
            <summary>
            Creates and populates a ColumnInfo from the attributes of a POCO property.
            </summary>
            <param name="pi">The property whose column info is required</param>
            <returns>A ColumnInfo instance</returns>
        </member>
        <member name="P:PetaPoco.ColumnInfo.ColumnName">
            <summary>
            The SQL name of the column
            </summary>
        </member>
        <member name="P:PetaPoco.ColumnInfo.ResultColumn">
            <summary>
            True if this column returns a calculated value from the database and shouldn't be used in Insert and Update operations.
            </summary>
        </member>
        <member name="P:PetaPoco.ColumnInfo.ForceToUtc">
            <summary>
            True if time and date values returned through this column should be forced to UTC DateTimeKind. (no conversion is applied - the Kind of the DateTime property
            is simply set to DateTimeKind.Utc instead of DateTimeKind.Unknown.
            </summary>
        </member>
        <member name="T:PetaPoco.IMapper">
            <summary>
            IMapper provides a way to hook into PetaPoco's Database to POCO mapping mechanism to either
            customize or completely replace it.
            </summary>
            <remarks>
            To use this functionality, instantiate a class that implements IMapper and then pass it to
            PetaPoco through the static method Mappers.Register()
            </remarks>
        </member>
        <member name="M:PetaPoco.IMapper.GetTableInfo(System.Type)">
            <summary>
            Get information about the table associated with a POCO class
            </summary>
            <param name="pocoType"></param>
            <returns>A TableInfo instance</returns>
            <remarks>
            This method must return a valid TableInfo.  
            To create a TableInfo from a POCO's attributes, use TableInfo.FromPoco
            </remarks>
        </member>
        <member name="M:PetaPoco.IMapper.GetColumnInfo(System.Reflection.PropertyInfo)">
            <summary>
            Get information about the column associated with a property of a POCO
            </summary>
            <param name="pocoProperty">The PropertyInfo of the property being queried</param>
            <returns>A reference to a ColumnInfo instance, or null to ignore this property</returns>
            <remarks>
            To create a ColumnInfo from a property's attributes, use PropertyInfo.FromProperty
            </remarks>
        </member>
        <member name="M:PetaPoco.IMapper.GetFromDbConverter(System.Reflection.PropertyInfo,System.Type)">
            <summary>
            Supply a function to convert a database value to the correct property value
            </summary>
            <param name="TargetProperty">The target property</param>
            <param name="SourceType">The type of data returned by the DB</param>
            <returns>A Func that can do the conversion, or null for no conversion</returns>
        </member>
        <member name="M:PetaPoco.IMapper.GetToDbConverter(System.Reflection.PropertyInfo)">
            <summary>
            Supply a function to convert a property value into a database value
            </summary>
            <param name="SourceProperty">The property to be converted</param>
            <returns>A Func that can do the conversion</returns>
            <remarks>
            This conversion is only used for converting values from POCO's that are 
            being Inserted or Updated.  
            Conversion is not available for parameter values passed directly to queries.
            </remarks>
        </member>
        <member name="T:PetaPoco.Mappers">
            <summary>
            This static manages registation of IMapper instances with PetaPoco
            </summary>
        </member>
        <member name="M:PetaPoco.Mappers.Register(System.Reflection.Assembly,PetaPoco.IMapper)">
            <summary>
            Registers a mapper for all types in a specific assembly
            </summary>
            <param name="assembly">The assembly whose types are to be managed by this mapper</param>
            <param name="mapper">The IMapper implementation</param>
        </member>
        <member name="M:PetaPoco.Mappers.Register(System.Type,PetaPoco.IMapper)">
            <summary>
            Registers a mapper for a single POCO type
            </summary>
            <param name="type">The type to be managed by this mapper</param>
            <param name="mapper">The IMapper implementation</param>
        </member>
        <member name="M:PetaPoco.Mappers.Revoke(System.Reflection.Assembly)">
            <summary>
            Remove all mappers for all types in a specific assembly
            </summary>
            <param name="assembly">The assembly whose mappers are to be revoked</param>
        </member>
        <member name="M:PetaPoco.Mappers.Revoke(System.Type)">
            <summary>
            Remove the mapper for a specific type
            </summary>
            <param name="type">The type whose mapper is to be removed</param>
        </member>
        <member name="M:PetaPoco.Mappers.Revoke(PetaPoco.IMapper)">
            <summary>
            Revoke an instance of a mapper
            </summary>
            <param name="mapper">The IMapper to be revkoed</param>
        </member>
        <member name="M:PetaPoco.Mappers.GetMapper(System.Type)">
            <summary>
            Retrieve the IMapper implementation to be used for a specified POCO type
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="T:PetaPoco.Page`1">
            <summary>
            Holds the results of a paged request.
            </summary>
            <typeparam name="T">The type of Poco in the returned result set</typeparam>
        </member>
        <member name="P:PetaPoco.Page`1.CurrentPage">
            <summary>
            The current page number contained in this page of result set 
            </summary>
        </member>
        <member name="P:PetaPoco.Page`1.TotalPages">
            <summary>
            The total number of pages in the full result set
            </summary>
        </member>
        <member name="P:PetaPoco.Page`1.TotalItems">
            <summary>
            The total number of records in the full result set
            </summary>
        </member>
        <member name="P:PetaPoco.Page`1.ItemsPerPage">
            <summary>
            The number of items per page
            </summary>
        </member>
        <member name="P:PetaPoco.Page`1.Items">
            <summary>
            The actual records on this page
            </summary>
        </member>
        <member name="P:PetaPoco.Page`1.Context">
            <summary>
            User property to hold anything.
            </summary>
        </member>
        <member name="T:PetaPoco.Sql">
            <summary>
            A simple helper class for build SQL statements
            </summary>
        </member>
        <member name="M:PetaPoco.Sql.#ctor">
            <summary>
            Default, empty constructor
            </summary>
        </member>
        <member name="M:PetaPoco.Sql.#ctor(System.String,System.Object[])">
            <summary>
            Construct an SQL statement with the supplied SQL and arguments
            </summary>
            <param name="sql">The SQL statement or fragment</param>
            <param name="args">Arguments to any parameters embedded in the SQL</param>
        </member>
        <member name="M:PetaPoco.Sql.Append(PetaPoco.Sql)">
            <summary>
            Append another SQL builder instance to the right-hand-side of this SQL builder
            </summary>
            <param name="sql">A reference to another SQL builder instance</param>
            <returns>A reference to this builder, allowing for fluent style concatenation</returns>
        </member>
        <member name="M:PetaPoco.Sql.Append(System.String,System.Object[])">
            <summary>
            Append an SQL fragement to the right-hand-side of this SQL builder
            </summary>
            <param name="sql">The SQL statement or fragment</param>
            <param name="args">Arguments to any parameters embedded in the SQL</param>
            <returns>A reference to this builder, allowing for fluent style concatenation</returns>
        </member>
        <member name="M:PetaPoco.Sql.Where(System.String,System.Object[])">
            <summary>
            Appends an SQL WHERE clause to this SQL builder
            </summary>
            <param name="sql">The condition of the WHERE clause</param>
            <param name="args">Arguments to any parameters embedded in the supplied SQL</param>
            <returns>A reference to this builder, allowing for fluent style concatenation</returns>
        </member>
        <member name="M:PetaPoco.Sql.OrderBy(System.Object[])">
            <summary>
            Appends an SQL ORDER BY clause to this SQL builder
            </summary>
            <param name="columns">A collection of SQL column names to order by</param>
            <returns>A reference to this builder, allowing for fluent style concatenation</returns>
        </member>
        <!-- 对于成员“M:PetaPoco.Sql.Select(System.Object[])”忽略有格式错误的 XML 注释 -->
        <member name="M:PetaPoco.Sql.From(System.Object[])">
            <summary>
            Appends an SQL FROM clause to this SQL builder
            </summary>
            <param name="tables">A collection of table names to be used in the FROM clause</param>
            <returns>A reference to this builder, allowing for fluent style concatenation</returns>
        </member>
        <member name="M:PetaPoco.Sql.GroupBy(System.Object[])">
            <summary>
            Appends an SQL GROUP BY clause to this SQL builder
            </summary>
            <param name="columns">A collection of column names to be grouped by</param>
            <returns>A reference to this builder, allowing for fluent style concatenation</returns>
        </member>
        <member name="M:PetaPoco.Sql.InnerJoin(System.String)">
            <summary>
            Appends an SQL INNER JOIN clause to this SQL builder
            </summary>
            <param name="table">The name of the table to join</param>
            <returns>A reference an SqlJoinClause through which the join condition can be specified</returns>
        </member>
        <member name="M:PetaPoco.Sql.LeftJoin(System.String)">
            <summary>
            Appends an SQL LEFT JOIN clause to this SQL builder
            </summary>
            <param name="table">The name of the table to join</param>
            <returns>A reference an SqlJoinClause through which the join condition can be specified</returns>
        </member>
        <member name="P:PetaPoco.Sql.Builder">
            <summary>
            Instantiate a new SQL Builder object.  Weirdly implemented as a property but makes
            for more elegantly readble fluent style construction of SQL Statements
            eg: db.Query(Sql.Builder.Append(....))
            </summary>
        </member>
        <member name="P:PetaPoco.Sql.SQL">
            <summary>
            Returns the final SQL statement represented by this builder
            </summary>
        </member>
        <member name="P:PetaPoco.Sql.Arguments">
            <summary>
            Gets the complete, final set of arguments collected by this builder.
            </summary>
        </member>
        <member name="T:PetaPoco.Sql.SqlJoinClause">
            <summary>
            The SqlJoinClause is a simple helper class used in the construction of SQL JOIN statements with the SQL builder
            </summary>
        </member>
        <member name="M:PetaPoco.Sql.SqlJoinClause.On(System.String,System.Object[])">
            <summary>
            Appends a SQL ON clause after a JOIN statement
            </summary>
            <param name="onClause">The ON clause to be appended</param>
            <param name="args">Arguments to any parameters embedded in the supplied SQL</param>
            <returns>A reference to the parent SQL builder, allowing for fluent style concatenation</returns>
        </member>
        <member name="T:PetaPoco.StandardMapper">
            <summary>
            StandardMapper is the default implementation of IMapper used by PetaPoco
            </summary>
        </member>
        <member name="M:PetaPoco.StandardMapper.GetTableInfo(System.Type)">
            <summary>
            Constructs a TableInfo for a POCO by reading its attribute data
            </summary>
            <param name="pocoType">The POCO Type</param>
            <returns></returns>
        </member>
        <member name="M:PetaPoco.StandardMapper.GetColumnInfo(System.Reflection.PropertyInfo)">
            <summary>
            Constructs a ColumnInfo for a POCO property by reading its attribute data
            </summary>
            <param name="pocoProperty"></param>
            <returns></returns>
        </member>
        <member name="T:PetaPoco.TableInfo">
            <summary>
            Use by IMapper to override table bindings for an object
            </summary>
        </member>
        <member name="M:PetaPoco.TableInfo.FromPoco(System.Type)">
            <summary>
            Creates and populates a TableInfo from the attributes of a POCO
            </summary>
            <param name="t">The POCO type</param>
            <returns>A TableInfo instance</returns>
        </member>
        <member name="P:PetaPoco.TableInfo.TableName">
            <summary>
            The database table name
            </summary>
        </member>
        <member name="P:PetaPoco.TableInfo.PrimaryKey">
            <summary>
            The name of the primary key column of the table
            </summary>
        </member>
        <member name="P:PetaPoco.TableInfo.AutoIncrement">
            <summary>
            True if the primary key column is an auto-incrementing
            </summary>
        </member>
        <member name="P:PetaPoco.TableInfo.SequenceName">
            <summary>
            The name of the sequence used for auto-incrementing Oracle primary key fields
            </summary>
        </member>
        <member name="T:PetaPoco.SqlBehaviorAttribute">
            <summary>
            用于标识对象属性到
            </summary>
        </member>
        <member name="P:PetaPoco.SqlBehaviorAttribute.Behavior">
            <summary>
            SQL行为标识
            </summary>
        </member>
        <member name="T:PetaPoco.SqlBehaviorFlags">
            <summary>
            sql行为标识（用于控制是否生成insert或update语句）
            </summary>
        </member>
        <member name="F:PetaPoco.SqlBehaviorFlags.Insert">
            <summary>
            生成insert语句
            </summary>
        </member>
        <member name="F:PetaPoco.SqlBehaviorFlags.Update">
            <summary>
            生成update语句
            </summary>
        </member>
        <member name="T:PetaPoco.Transaction">
            <summary>
            Transaction object helps maintain transaction depth counts
            </summary>
        </member>
        <member name="T:PetaPoco.Internal.DatabaseType">
            <summary>
            Base class for DatabaseType handlers - provides default/common handling for different database engines
            </summary>
        </member>
        <member name="M:PetaPoco.Internal.DatabaseType.GetParameterPrefix(System.String)">
            <summary>
            Returns the prefix used to delimit parameters in SQL query strings.
            </summary>
            <param name="ConnectionString"></param>
            <returns></returns>
        </member>
        <member name="M:PetaPoco.Internal.DatabaseType.MapParameterValue(System.Object)">
            <summary>
            Converts a supplied C# object value into a value suitable for passing to the database
            </summary>
            <param name="value">The value to convert</param>
            <returns>The converted value</returns>
        </member>
        <member name="M:PetaPoco.Internal.DatabaseType.PreExecute(System.Data.IDbCommand)">
            <summary>
            Called immediately before a command is executed, allowing for modification of the IDbCommand before it's passed to the database provider
            </summary>
            <param name="cmd"></param>
        </member>
        <member name="M:PetaPoco.Internal.DatabaseType.BuildPageQuery(System.Int64,System.Int64,PetaPoco.Internal.PagingHelper.SQLParts,System.Object[]@,System.String)">
            <summary>
            Builds an SQL query suitable for performing page based queries to the database
            </summary>
            <param name="skip">The number of rows that should be skipped by the query</param>
            <param name="take">The number of rows that should be retruend by the query</param>
            <param name="primaryKey">primaryKey</param>
            <param name="parts">The original SQL query after being parsed into it's component parts</param>
            <param name="args">Arguments to any embedded parameters in the SQL query</param>
            <returns>The final SQL query that should be executed.</returns>
        </member>
        <member name="M:PetaPoco.Internal.DatabaseType.GetExistsSql">
            <summary>
            Returns an SQL Statement that can check for the existance of a row in the database.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PetaPoco.Internal.DatabaseType.EscapeTableName(System.String)">
            <summary>
            Escape a tablename into a suitable format for the associated database provider.
            </summary>
            <param name="tableName">The name of the table (as specified by the client program, or as attributes on the associated POCO class.</param>
            <returns>The escaped table name</returns>
        </member>
        <member name="M:PetaPoco.Internal.DatabaseType.EscapeSqlIdentifier(System.String)">
            <summary>
            Escape and arbitary SQL identifier into a format suitable for the associated database provider
            </summary>
            <param name="str">The SQL identifier to be escaped</param>
            <returns>The escaped identifier</returns>
        </member>
        <member name="M:PetaPoco.Internal.DatabaseType.GetAutoIncrementExpression(PetaPoco.TableInfo)">
            <summary>
            Return an SQL expression that can be used to populate the primary key column of an auto-increment column.
            </summary>
            <param name="ti">Table info describing the table</param>
            <returns>An SQL expressions</returns>
            <remarks>See the Oracle database type for an example of how this method is used.</remarks>
        </member>
        <member name="M:PetaPoco.Internal.DatabaseType.GetInsertOutputClause(System.String)">
            <summary>
            Returns an SQL expression that can be used to specify the return value of auto incremented columns.
            </summary>
            <param name="primaryKeyName">The primary key of the row being inserted.</param>
            <returns>An expression describing how to return the new primary key value</returns>
            <remarks>See the SQLServer database provider for an example of how this method is used.</remarks>
        </member>
        <member name="M:PetaPoco.Internal.DatabaseType.ExecuteInsert(PetaPoco.Database,System.Data.IDbCommand,System.String)">
            <summary>
            Performs an Insert operation
            </summary>
            <param name="db">The calling Database object</param>
            <param name="cmd">The insert command to be executed</param>
            <param name="PrimaryKeyName">The primary key of the table being inserted into</param>
            <returns>The ID of the newly inserted record</returns>
        </member>
        <member name="M:PetaPoco.Internal.DatabaseType.Resolve(System.String,System.String)">
            <summary>
            Look at the type and provider name being used and instantiate a suitable DatabaseType instance.
            </summary>
            <param name="TypeName"></param>
            <param name="ProviderName"></param>
            <returns></returns>
        </member>
        <member name="P:PetaPoco.Internal.PocoColumn.SqlBehavior">
            <summary>
            SQL行为标识
            </summary>
        </member>
        <member name="T:Tunynet.Tasks.ITaskDetailRepository">
            <summary>
            ITaskDetailRepository
            </summary>
        </member>
        <member name="M:Tunynet.Tasks.ITaskDetailRepository.SaveTaskStatus(Tunynet.Tasks.TaskDetail)">
            <summary>
            保存任务状态
            </summary>
            <param name="taskDetail">任务实体</param>
        </member>
        <member name="T:Tunynet.Tasks.TaskDetailRepository">
            <summary>
            TaskDetailRepository
            </summary>
        </member>
        <member name="M:Tunynet.Tasks.TaskDetailRepository.SaveTaskStatus(Tunynet.Tasks.TaskDetail)">
            <summary>
            保存任务状态
            </summary>
            <param name="taskDetail">任务实体</param>
        </member>
        <member name="T:Tunynet.Utilities.HttpCollects">
            <summary>
            Http请求模拟器
            </summary>
        </member>
        <member name="M:Tunynet.Utilities.HttpCollects.GetHTMLContent(System.String)">
            <summary>
            获取文档内容
            </summary>
            <param name="url">Url</param>
            <returns>文档内容</returns>
        </member>
        <member name="M:Tunynet.Utilities.HttpCollects.GetHTMLContent(System.String,System.String)">
            <summary>
            获取文档内容
            </summary>
            <param name="url">Url</param>
            <param name="endRegexString">结束标识的正则表达式</param>
            <returns>文档内容</returns>
        </member>
        <member name="M:Tunynet.Utilities.HttpCollects.GetHTMLContent(System.String,System.Text.Encoding,System.String)">
            <summary>
             获取html文档
             如果endRegexString不为空，则获取从开头到第一次匹配endTagRegex为止的部分文档内容；
             否则获取整个html文档
            </summary>
            <param name="url">Url</param>
            <param name="encoding">HTML内容编码方式</param>
            <param name="endRegexString">结束标识的正则表达式</param>
            <returns>文档内容</returns>
        </member>
        <member name="M:Tunynet.Utilities.HttpCollects.getEncoding(System.String)">
            <summary>
            从html文档中得到Encoding
            </summary>
            
        </member>
        <member name="M:Tunynet.Utilities.HttpCollects.GetMetaString(System.String,System.String,System.String,System.Boolean)">
            <summary>
            获取html内容中的meta部分内容
            </summary>
            <param name="html"></param>
            <param name="regStart"></param>
            <param name="regEnd"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Utilities.HttpCollects.GetTitle(System.String,System.Boolean)">
            <summary>
            获取html内容中的Title
            </summary>
            <param name="html">html内容</param>
            <param name="ignoreCas">是否忽略大小写</param>
            <returns>标签title</returns>
        </member>
        <member name="M:Tunynet.Utilities.HttpCollects.GetDescription(System.String,System.Boolean)">
            <summary>
            获取html代码中的description
            </summary>
            <param name="html">html内容</param>
            <param name="ignoreCas">是否忽略大小写</param>
            <returns>description</returns>
        </member>
        <member name="M:Tunynet.Utilities.HttpCollects.GetHtmlByUrl(System.String,System.String,System.String,System.Boolean,System.Text.Encoding)">
            <summary>
            通过url获取html文档
            </summary>
            <param name="url"></param>
            <param name="sMethod"></param>
            <param name="Param"></param>
            <param name="bAutoRedirect"></param>
            <param name="ecode"></param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Utilities.HttpCollects.GetHTMLByUrlCookie(System.String,System.Net.CookieContainer@,System.String,System.String,System.Boolean,System.Text.Encoding)">
            <summary>
             通过UrlCookie获取Html文档
            </summary>
            <param name="url"></param>
            <param name="cookie"></param>
            <param name="sMethod"></param>
            <param name="Param"></param>
            <param name="bAutoRedirect"></param>
            <param name="ecode"></param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Utilities.HttpCollects.GetHtml(System.String,System.Text.Encoding,System.Int32,System.Int32)">
            <summary>
            请求URL得到HTML内容,私有函数
            </summary>
            <param name="sUrl">url地址</param>
            <param name="sEncode">HTML内容编码方式</param>
            <param name="iMaxRetry">如果请求失败，最大重试次数</param>
            <param name="iCurrentRetry">当前是第几次请求</param>
            <returns>HTML内容</returns>
        </member>
        <member name="M:Tunynet.Utilities.HttpCollects.GetHtmlWithTried(System.String,System.Text.Encoding,System.Int32)">
            <summary>
            带重试功能的获取HTML内容
            </summary>
            <param name="sUrl">url地址</param>
            <param name="sEncode">HTML内容编码方式</param>
            <param name="iMaxRetry">如果请求失败，最大重试次数</param>
            <returns>HTML内容</returns>
        </member>
        <member name="T:Tunynet.Tasks.ITaskScheduler">
            <summary>
            任务执行控制器
            </summary>
            <remarks>需要从DI容器中获取注册的tasks</remarks>
        </member>
        <member name="M:Tunynet.Tasks.ITaskScheduler.Start">
            <summary>
            开始执行任务
            </summary>
        </member>
        <member name="M:Tunynet.Tasks.ITaskScheduler.Stop">
            <summary>
            停止任务
            </summary>
        </member>
        <member name="M:Tunynet.Tasks.ITaskScheduler.Update(Tunynet.Tasks.TaskDetail)">
            <summary>
            更新任务在调度器中的状态
            </summary>
            <param name="task">任务详细信息</param>
        </member>
        <member name="M:Tunynet.Tasks.ITaskScheduler.ResumeAll">
            <summary>
            重启所有任务
            </summary>
        </member>
        <member name="M:Tunynet.Tasks.ITaskScheduler.GetTask(System.Int32)">
            <summary>
            获取单个任务
            </summary>
            <param name="Id">任务Id</param>
            <returns>任务详细信息</returns>
        </member>
        <member name="M:Tunynet.Tasks.ITaskScheduler.Run(System.Int32)">
            <summary>
            执行单个任务
            </summary>
            <param name="Id">任务Id</param>
        </member>
        <member name="M:Tunynet.Tasks.ITaskScheduler.SaveTaskStatus">
            <summary>
            保存任务状态
            </summary>
            <remarks>将当前需要需要ResumeContinue为true的任务记录，以便应用程序重启后检查是否需要立即执行</remarks>
        </member>
        <member name="T:Tunynet.Tasks.Quartz.QuartzTask">
            <summary>
            Quartz任务实现
            </summary>
        </member>
        <member name="M:Tunynet.Tasks.Quartz.QuartzTask.Execute(Quartz.IJobExecutionContext)">
            <summary>
            执行任务
            </summary>
            <param name="context">Quartz任务运行环境</param>
            <remarks>外部不需调用，仅用于任务调度组建内部</remarks>
        </member>
        <member name="T:Tunynet.Tasks.Quartz.QuartzTaskScheduler">
            <summary>
            用以管理Quartz任务调度相关的操作
            </summary>
        </member>
        <member name="M:Tunynet.Tasks.Quartz.QuartzTaskScheduler.#ctor">
             <summary>
            构造器
             </summary>
        </member>
        <member name="M:Tunynet.Tasks.Quartz.QuartzTaskScheduler.#ctor(Tunynet.Tasks.RunAtServer)">
             <summary>
            构造器
             </summary>
        </member>
        <member name="M:Tunynet.Tasks.Quartz.QuartzTaskScheduler.#ctor(Tunynet.Tasks.ITaskDetailRepository)">
             <summary>
            构造器
             </summary>
             <param name="taskDetailRepository">用于测试的Repository</param>
        </member>
        <member name="M:Tunynet.Tasks.Quartz.QuartzTaskScheduler.Start">
            <summary>
            启动任务
            </summary>
        </member>
        <member name="M:Tunynet.Tasks.Quartz.QuartzTaskScheduler.Stop">
            <summary>
            停止任务
            </summary>
        </member>
        <member name="M:Tunynet.Tasks.Quartz.QuartzTaskScheduler.Update(Tunynet.Tasks.TaskDetail)">
            <summary>
            更新任务在调度器中的状态
            </summary>
            <param name="task">任务详细信息</param>
        </member>
        <member name="M:Tunynet.Tasks.Quartz.QuartzTaskScheduler.ResumeAll">
            <summary>
            重启所有任务
            </summary>
        </member>
        <member name="M:Tunynet.Tasks.Quartz.QuartzTaskScheduler.GetTask(System.Int32)">
            <summary>
            获取单个任务
            </summary>
            <param name="Id">Id</param>
            <returns>任务详细信息</returns>
        </member>
        <member name="M:Tunynet.Tasks.Quartz.QuartzTaskScheduler.Run(System.Int32)">
            <summary>
            运行单个任务
            </summary>
            <param name="Id">任务Id</param>
        </member>
        <member name="M:Tunynet.Tasks.Quartz.QuartzTaskScheduler.Run(Tunynet.Tasks.TaskDetail)">
            <summary>
            运行单个任务
            </summary>
            <param name="task">要运行的任务</param>
        </member>
        <member name="M:Tunynet.Tasks.Quartz.QuartzTaskScheduler.SaveTaskStatus">
            <summary>
            保存任务状态
            </summary>
            <remarks>将当前需要需要ResumeContinue为true的任务记录，以便应用程序重启后检查是否需要立即执行</remarks>
        </member>
        <member name="M:Tunynet.Tasks.Quartz.QuartzTaskScheduler.Remove(System.String)">
            <summary>
            从调度其中移除任务
            </summary>
            <param name="name">调度器中任务的名称</param>
        </member>
        <member name="T:Tunynet.Tasks.TaskDetail">
            <summary>
            任务详细信息实体
            </summary>
        </member>
        <member name="M:Tunynet.Tasks.TaskDetail.New">
            <summary>
            实例化实体
            </summary>
            <remarks>实例化实体时先根据taskName从数据库中获取，如果取不到则创建新实例</remarks>
        </member>
        <member name="M:Tunynet.Tasks.TaskDetail.GetRulePart(Tunynet.Tasks.RulePart)">
            <summary>
            获取规则指定部分
            </summary>
            <param name="rulePart">规则组成部分</param>
            <returns></returns>
        </member>
        <member name="P:Tunynet.Tasks.TaskDetail.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:Tunynet.Tasks.TaskDetail.Name">
            <summary>
            任务名称
            </summary>
        </member>
        <member name="P:Tunynet.Tasks.TaskDetail.Enabled">
            <summary>
            是否启用
            </summary>
        </member>
        <member name="P:Tunynet.Tasks.TaskDetail.TaskRule">
            <summary>
            任务的执行时间规则
            </summary>
        </member>
        <member name="P:Tunynet.Tasks.TaskDetail.RunAtRestart">
            <summary>
            程序重启后立即执行
            </summary>
            <remarks>在应用程序池重启后,是否检查此任务上次被执行过，如果没有执行则立即执行</remarks>
        </member>
        <member name="P:Tunynet.Tasks.TaskDetail.RunAtServer">
            <summary>
            任务在哪台服务器上运行
            </summary>
        </member>
        <member name="P:Tunynet.Tasks.TaskDetail.ClassType">
            <summary>
            任务类型
            </summary>
            <remarks>用于任务实例化</remarks>
        </member>
        <member name="P:Tunynet.Tasks.TaskDetail.LastStart">
            <summary>
            上次执行开始时间
            </summary>
        </member>
        <member name="P:Tunynet.Tasks.TaskDetail.LastEnd">
            <summary>
            上次执行结束时间
            </summary>
        </member>
        <member name="P:Tunynet.Tasks.TaskDetail.LastIsSuccess">
            <summary>
            上次任务执行状态
            </summary>
            <remarks>true-成功/false-失败</remarks>
        </member>
        <member name="P:Tunynet.Tasks.TaskDetail.NextStart">
            <summary>
            下次执行时间
            </summary>
        </member>
        <member name="P:Tunynet.Tasks.TaskDetail.StartDate">
            <summary>
            开始时间
            </summary>
        </member>
        <member name="P:Tunynet.Tasks.TaskDetail.EndDate">
            <summary>
            结束时间
            </summary>
        </member>
        <member name="P:Tunynet.Tasks.TaskDetail.IsRunning">
            <summary>
            是否正在运行
            </summary>
        </member>
        <member name="T:Tunynet.Tasks.RulePart">
            <summary>
            任务规则组成部分
            </summary>
        </member>
        <member name="F:Tunynet.Tasks.RulePart.seconds">
            <summary>
            秒域
            </summary>
        </member>
        <member name="F:Tunynet.Tasks.RulePart.minutes">
            <summary>
            分钟域
            </summary>
        </member>
        <member name="F:Tunynet.Tasks.RulePart.hours">
            <summary>
            小时域
            </summary>
        </member>
        <member name="F:Tunynet.Tasks.RulePart.day">
            <summary>
            日期域
            </summary>
        </member>
        <member name="F:Tunynet.Tasks.RulePart.mouth">
            <summary>
            规则月部分 
            </summary>
        </member>
        <member name="F:Tunynet.Tasks.RulePart.dayofweek">
            <summary>
            星期域
            </summary>
        </member>
        <member name="T:Tunynet.Tasks.TaskFrequency">
            <summary>
            任务频率
            </summary>
        </member>
        <member name="F:Tunynet.Tasks.TaskFrequency.Weekly">
            <summary>
            每周
            </summary>
        </member>
        <member name="F:Tunynet.Tasks.TaskFrequency.PerMonth">
            <summary>
            每月
            </summary>
        </member>
        <member name="F:Tunynet.Tasks.TaskFrequency.EveryDay">
            <summary>
            每天
            </summary>
        </member>
        <member name="T:Tunynet.Tasks.RunAtServer">
            <summary>
            任务在哪台服务器上运行
            </summary>
        </member>
        <member name="F:Tunynet.Tasks.RunAtServer.Master">
            <summary>
            分布式环境下的集群服务器主控端
            </summary>
        </member>
        <member name="F:Tunynet.Tasks.RunAtServer.Slave">
            <summary>
            分布式环境下的集群服务器计算节点
            </summary>
        </member>
        <member name="F:Tunynet.Tasks.RunAtServer.Search">
            <summary>
            分布式环境下的搜索服务器
            </summary>
        </member>
        <member name="T:Tunynet.Tasks.TaskSchedulerFactory">
            <summary>
            任务工厂
            </summary>
            <remarks>
            用于获取TaskScheduler
            </remarks>
        </member>
        <member name="M:Tunynet.Tasks.TaskSchedulerFactory.GetScheduler">
            <summary>
            获取任务调度器
            </summary>
            <returns></returns>
        </member>
        <member name="T:Tunynet.Tasks.TaskService">
            <summary>
            任务业务逻辑
            </summary>
        </member>
        <member name="M:Tunynet.Tasks.TaskService.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Tunynet.Tasks.TaskService.#ctor(Tunynet.Tasks.ITaskDetailRepository)">
            <summary>
            可设置repository的构造函数（主要用于测试用例）
            </summary>
            <param name="taskDetailRepository">TaskDetailRepository</param>
        </member>
        <member name="M:Tunynet.Tasks.TaskService.Get(System.Int32)">
            <summary>
            依据TaskName获取任务
            </summary>
            <param name="Id">任务Id</param>
        </member>
        <member name="M:Tunynet.Tasks.TaskService.GetAll">
            <summary>
            获取所用任务
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Tasks.TaskService.Update(Tunynet.Tasks.TaskDetail)">
            <summary>
            更新任务相关信息
            </summary>
            <param name="entity">任务详细信息实体</param>
        </member>
        <member name="M:Tunynet.Tasks.TaskService.SaveTaskStatus(Tunynet.Tasks.TaskDetail)">
            <summary>
            应用程序关闭时保存任务当前状态
            </summary>
            <param name="entity">任务详细信息实体</param>
        </member>
        <member name="T:Tunynet.Utilities.DictionaryExtension">
            <summary>
            IDictionary扩展
            </summary>
        </member>
        <member name="M:Tunynet.Utilities.DictionaryExtension.Get``1(System.Collections.Generic.IDictionary{System.String,System.Object},System.String,``0)">
            <summary>
            依据key获取字典的value，并转换为需要的类型
            </summary>
            <remarks>
            <para>常用于以下集合：</para>
            <list type="number">
            <item>ViewData</item>
            <item>NameValueCollection：HttpRequest.Form、HttpRequest.Request、HttpRequest.Params</item>
            </list>
            </remarks>
            <param name="dictionary">字典集合</param>
            <param name="key">key</param>
            <param name="defaultValue">如果未找到则返回该默认值</param>
            <returns>取得viewdata里的某个值,并且转换成指定的对象类型,如果不是该类型或如果是一个数组类型而元素为0个或没有此key都将返回空,</returns>
        </member>
        <member name="T:Tunynet.Utilities.EncryptionUtility">
            <summary>
            加密工具类
            </summary>
        </member>
        <member name="M:Tunynet.Utilities.EncryptionUtility.SymmetricEncrypt(Tunynet.Utilities.SymmetricEncryptType,System.String,System.String,System.String)">
            <summary>
            对称加密
            </summary>
            <param name="encryptType">加密类型</param>
            <param name="str">需要加密的字符串</param>
            <param name="ivString">初始化向量</param>
            <param name="keyString">加密密钥</param>
            <returns>加密后的字符串</returns>
        </member>
        <member name="M:Tunynet.Utilities.EncryptionUtility.SymmetricDncrypt(Tunynet.Utilities.SymmetricEncryptType,System.String,System.String,System.String)">
            <summary>
            对称解密
            </summary>
            <param name="encryptType">加密类型</param>
            <param name="str">需要加密的字符串</param>
            <param name="ivString">初始化向量</param>
            <param name="keyString">加密密钥</param>
            <returns>解密后的字符串</returns>
        </member>
        <member name="M:Tunynet.Utilities.EncryptionUtility.MD5(System.String)">
            <summary>
            标准MD5加密
            </summary>
            <param name="str">待加密的字符串</param>
            <returns>加密后的字符串</returns>
        </member>
        <member name="M:Tunynet.Utilities.EncryptionUtility.MD5_16(System.String)">
            <summary>
            16位的MD5加密
            </summary>
            <param name="str">待加密的字符串</param>
            <returns>加密后的字符串</returns>
        </member>
        <member name="M:Tunynet.Utilities.EncryptionUtility.Base64_Encode(System.String)">
            <summary>
            base64编码
            </summary>
            <param name="str">待编码的字符串</param>
            <returns>编码后的字符串</returns>
        </member>
        <member name="M:Tunynet.Utilities.EncryptionUtility.Base64_Decode(System.String)">
            <summary>
            base64解码
            </summary>
            <param name="str">待解码的字符串</param>
            <returns>解码后的字符串</returns>
        </member>
        <member name="T:Tunynet.Utilities.HashEncrypt">
            <summary>
            非对称加密算法
            </summary>
        </member>
        <member name="M:Tunynet.Utilities.HashEncrypt.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Tunynet.Utilities.HashEncrypt.#ctor(Tunynet.Utilities.HashEncryptType)">
            <summary>
            构造函数
            </summary>
            <param name="hashType">加密类型</param>
        </member>
        <member name="M:Tunynet.Utilities.HashEncrypt.#ctor(Tunynet.Utilities.HashEncryptType,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="originalString">原始字符串</param>
            <param name="hashType">加密类型</param>
        </member>
        <member name="M:Tunynet.Utilities.HashEncrypt.#ctor(Tunynet.Utilities.HashEncryptType,System.String,System.Boolean,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="hashType">加密类型</param>
            <param name="originalString">原始字符串</param>
            <param name="useSalt">是否使用散列</param>
            <param name="saltValue">散列值（如果启用散列但没有传入散列值则使用随机生的散列值）</param>
        </member>
        <member name="M:Tunynet.Utilities.HashEncrypt.SetEncryptor">
            <summary>
            设置加密算法
            </summary>
        </member>
        <member name="M:Tunynet.Utilities.HashEncrypt.Encrypt">
            <summary>
            进行非对称加密
            </summary>
        </member>
        <member name="M:Tunynet.Utilities.HashEncrypt.Encrypt(System.String)">
            <summary>
            进行非对称加密
            </summary>
            <param name="originalString">原始字符串</param>
        </member>
        <member name="M:Tunynet.Utilities.HashEncrypt.Encrypt(System.String,Tunynet.Utilities.HashEncryptType)">
            <summary>
            进行非对称加密
            </summary>
            <param name="originalString">原始字符串</param>
            <param name="hashType">加密类型</param>
        </member>
        <member name="M:Tunynet.Utilities.HashEncrypt.Encrypt(System.String,System.Boolean)">
            <summary>
            进行非对称加密
            </summary>
            <param name="originalString">原始字符串</param>
            <param name="useSalt">是否启用散列</param>
        </member>
        <member name="M:Tunynet.Utilities.HashEncrypt.Encrypt(System.String,Tunynet.Utilities.HashEncryptType,System.String)">
            <summary>
            进行非对称加密
            </summary>
            <param name="originalString">原始字符串</param>
            <param name="hashType">加密类型</param>
            <param name="saltValue">散列值</param>
        </member>
        <member name="M:Tunynet.Utilities.HashEncrypt.Encrypt(System.String,System.String)">
            <summary>
            进行非对称加密
            </summary>
            <param name="originalString">原始字符串</param>
            <param name="saltValue">散列值</param>
        </member>
        <member name="M:Tunynet.Utilities.HashEncrypt.Reset">
            <summary>
            重置加密设置
            </summary>
        </member>
        <member name="M:Tunynet.Utilities.HashEncrypt.CreateSalt">
            <summary>
            创建散列
            </summary>
        </member>
        <member name="P:Tunynet.Utilities.HashEncrypt.HashType">
            <summary>
            非对称加密类型
            </summary>
        </member>
        <member name="P:Tunynet.Utilities.HashEncrypt.SaltValue">
            <summary>
            SaltValue
            </summary>
        </member>
        <member name="P:Tunynet.Utilities.HashEncrypt.UseSalt">
            <summary>
            UseSalt
            </summary>
        </member>
        <member name="P:Tunynet.Utilities.HashEncrypt.SaltLength">
            <summary>
            SaltLength
            </summary>
        </member>
        <member name="P:Tunynet.Utilities.HashEncrypt.OriginalString">
            <summary>
            原始字符串
            </summary>
        </member>
        <member name="P:Tunynet.Utilities.HashEncrypt.HashString">
            <summary>
            加密后的字符串
            </summary>
        </member>
        <member name="T:Tunynet.Utilities.HashEncryptType">
            <summary>
            非对称加密类型
            </summary>
        </member>
        <member name="F:Tunynet.Utilities.HashEncryptType.MD5">
            <summary>
            MD5算法
            </summary>
        </member>
        <member name="F:Tunynet.Utilities.HashEncryptType.SHA1">
            <summary>
            SHA1算法
            </summary>
        </member>
        <member name="F:Tunynet.Utilities.HashEncryptType.SHA256">
            <summary>
            SHA256算法
            </summary>
        </member>
        <member name="F:Tunynet.Utilities.HashEncryptType.SHA384">
            <summary>
            SHA384算法
            </summary>
        </member>
        <member name="F:Tunynet.Utilities.HashEncryptType.SHA512">
            <summary>
            SHA512算法
            </summary>
        </member>
        <member name="T:Tunynet.Utilities.HtmlUtility">
            <summary>
            Html工具类
            </summary>
        </member>
        <member name="M:Tunynet.Utilities.HtmlUtility.TrimHtml(System.String,System.Int32)">
            <summary>
            移除html内的Elemtnts/Attributes及&amp;nbsp;，超过charLimit个字符进行截断
            </summary>
            <param name="rawHtml">待截字的html字符串</param>
            <param name="charLimit">最多允许返回的字符数</param>
        </member>
        <member name="M:Tunynet.Utilities.HtmlUtility.StripHtml(System.String,System.Boolean,System.Boolean)">
            <summary>
            移除Html标签
            </summary>
            <param name="rawString">待处理字符串</param>
            <param name="removeHtmlEntities">是否移除Html实体</param>
            <param name="enableMultiLine">是否保留换行符（<p/><br/>会转换成换行符）</param>
            <returns>返回处理后的字符串</returns>
        </member>
        <member name="M:Tunynet.Utilities.HtmlUtility.StripForPreview(System.String)">
            <summary>
            移除Html用于内容预览
            </summary>
            <remarks>
            将br、p替换为\n，“'”替换为对应Html实体，并过滤所有Html、Xml、UBB标签
            </remarks>
            <param name="rawString">用于预览的文本</param>
            <returns>返回移除换行及html、ubb标签的字符串</returns>
        </member>
        <member name="M:Tunynet.Utilities.HtmlUtility.StripBBTags(System.String)">
            <summary>
            清除UBB标签
            </summary>
            <param name="content">待处理的字符串</param>
            <remarks>处理后的字符串</remarks>
        </member>
        <member name="M:Tunynet.Utilities.HtmlUtility.StripScriptTags(System.String)">
            <summary>
            移除script标签
            Helper function used to ensure we don't inject script into the db.
            </summary>
            <remarks>
            移除&lt;script&gt;及javascript:
            </remarks>
            <param name="rawString">待处理的字符串</param>
            <remarks>处理后的字符串</remarks>
        </member>
        <member name="M:Tunynet.Utilities.HtmlUtility.CloseHtmlTags(System.String)">
            <summary>
            闭合未闭合的Html标签
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Utilities.HtmlUtility.CleanHtml(System.String,Tunynet.Utilities.TrustedHtmlLevel)">
            <summary>
            Html标签过滤/清除
            </summary>
            <remarks>需要在Starter中注册TrustedHtml类，也可以通过重写Basic与HtmlEditor方法来自定义过滤规则</remarks>
            <param name="rawHtml">需要处理的Html字符串</param>
            <param name="level">受信任Html标签严格程度</param>
        </member>
        <member name="M:Tunynet.Utilities.HtmlUtility.GetHtmlNode(System.String,System.String)">
            <summary>
            选择单个Html节点
            </summary>
            <remarks>选择节点时会自动闭合未闭合的标签</remarks>
            <param name="html">要操作的html</param>
            <param name="xpath">要选择Html元素的XPath</param>
        </member>
        <member name="M:Tunynet.Utilities.HtmlUtility.GetHtmlNodes(System.String,System.String)">
            <summary>
            选择多个Html节点
            </summary>
            <remarks>选择节点时会自动闭合未闭合的标签</remarks>
            <param name="html">要操作的Html</param>
            <param name="xpath">要选择Html元素的XPath</param>
        </member>
        <member name="M:Tunynet.Utilities.HtmlUtility.BBCodeToHtml(System.String,CodeKicker.BBCode.BBTag,System.Boolean)">
            <summary>
            将内容中的BBCode转换为对应的Html标签
            </summary>
            <param name="rawString">需要处理的字符串</param>
            <param name="bbTag">bbTag实体</param>
            <param name="htmlEncode">是否进行htmlEncode</param>
            <example>
        <para>怎样添加BBCode标签及模板参见以下示例：</para>
        <code language="c#">
          <![CDATA[
          public string BBCodeToHtml(string rawString)
          {
              IList<BBTag> bbTags = new List<BBTag>();
              string startTag = string.Empty;
              string emptyStartTag = string.Empty;

              // Left
              //普通添加方式BBTag第一个参数为要添加的BBTag名称，第二个参数为用来替换BBTag
              //其实标签的Html起始标签，第三个参数为替换BBTag结束标签的Html结束标签
              bbTags.Add(new BBTag("left", "<div style=\"text-align:left\">", "</div>"));

              // Note
              //如果有多个Html模板的情况出现，一般做法是用BBTag中的站位标签来代替原来第二或第三参数中的Html标签，
              //然后通过第四个参数BBAttribute来替换站位标签的内容，站位标签的形式是：${Id}，BBAttribute中第一个参
              //数是与站位标签中的Id对应的，而第二个参数是BBTag中的属性名，具体实现参见下面的代码。
              startTag = "<blockquote><div><strong>{0}</strong></div><br /><div>";
              emptyStartTag = "<blockquote><div>";
              bbTags.Add(new BBTag("note", "${startTag}", "</div></blockquote>"
                         , new BBAttribute("startTag", "header"
                         , c => string.IsNullOrEmpty(c.AttributeValue) ? emptyStartTag : string.Format(startTag, c.AttributeValue)
                         , HtmlEncodingMode.UnsafeDontEncode)));

              // Code
              //
              startTag = "<blockquote style=\"overflow-x: scroll;\"><div><strong>{0}</strong></div><br /><pre style=\"margin: 0px;\">";
              bbTags.Add(new BBTag("code", "${startTag}", "</pre></blockquote>",
                         new BBAttribute("startTag", "file", c =>
                         {
                             if (string.IsNullOrEmpty(c.AttributeValue))
                                 return "<blockquote style=\"overflow-x: scroll;\"><pre style=\"margin: 0px;\">";
                             return string.Format(startTag, c.AttributeValue);
                         }, HtmlEncodingMode.UnsafeDontEncode)));

              // Anchors
              //
              startTag = "<a href=\"{0}\" target=\"_blank\" title=\"{0}\">";
              bbTags.Add(new BBTag("url", "${startTag}", "</a>",
                         new BBAttribute("startTag", "", c =>
                         {
                             if (c.AttributeValue != null)
                                 return string.Format(startTag, c.AttributeValue);

                             string content = c.GetAttributeValueByID("content");
                             if (!string.IsNullOrEmpty(content) && content.StartsWith("www."))
                             {
                                 return string.Format("<a href=\"http://{0}\" target=\"_blank\" title=\"{0}\">", content);
                             }
                             return string.Format(startTag, content);
                         }, HtmlEncodingMode.UnsafeDontEncode)));

              // Color
              //
              bbTags.Add(new BBTag("color", "<span style=\"color:${color};\">", "</span>", new BBAttribute("color", "")));

              // Horizontal Rule
              //
              bbTags.Add(new BBTag("hr", "<hr />", ""));

              // Email
              //${content}代表BBTag中间包裹的内容
              bbTags.Add(new BBTag("email", "<a href=\"mailto:${content}\">", "</a>"));

              // Font size
              //BBAttribute第二参数为空时表示要获取BBTag的默认属性如：[span=1][/span]
              //这种情况获取到的就是1
              bbTags.Add(new BBTag("size", "<span style=\"font-size:${size};\">", "</span>", new BBAttribute("size", "") /* 默认属性表示方式 */));

              return HtmlUtility.BBCodeToHtml(rawString,bbTags);
          }
        
          ]]>
        </code>
      </example>
        </member>
        <member name="M:Tunynet.Utilities.HtmlUtility.BBCodeToHtml(System.String,System.Collections.Generic.IList{CodeKicker.BBCode.BBTag},System.Boolean)">
            <summary>
            将内容中的BBCode转换为对应的Html标签
            </summary>
            <param name="rawString">需要处理的字符串</param>
            <param name="bbTags">bbTag实体集合</param>
            <param name="htmlEncode">是否进行htmlEncode</param>
            <example>
        <para>怎样添加BBCode标签及模板参见以下示例：</para>
        <code language="c#">
          <![CDATA[
          public string BBCodeToHtml(string rawString)
          {
              IList<BBTag> bbTags = new List<BBTag>();
              string startTag = string.Empty;
              string emptyStartTag = string.Empty;

              // Left
              //普通添加方式BBTag第一个参数为要添加的BBTag名称，第二个参数为用来替换BBTag
              //其实标签的Html起始标签，第三个参数为替换BBTag结束标签的Html结束标签
              bbTags.Add(new BBTag("left", "<div style=\"text-align:left\">", "</div>"));

              // Note
              //如果有多个Html模板的情况出现，一般做法是用BBTag中的站位标签来代替原来第二或第三参数中的Html标签，
              //然后通过第四个参数BBAttribute来替换站位标签的内容，站位标签的形式是：${Id}，BBAttribute中第一个参
              //数是与站位标签中的Id对应的，而第二个参数是BBTag中的属性名，具体实现参见下面的代码。
              startTag = "<blockquote><div><strong>{0}</strong></div><br /><div>";
              emptyStartTag = "<blockquote><div>";
              bbTags.Add(new BBTag("note", "${startTag}", "</div></blockquote>"
                         , new BBAttribute("startTag", "header"
                         , c => string.IsNullOrEmpty(c.AttributeValue) ? emptyStartTag : string.Format(startTag, c.AttributeValue)
                         , HtmlEncodingMode.UnsafeDontEncode)));

              // Code
              //
              startTag = "<blockquote style=\"overflow-x: scroll;\"><div><strong>{0}</strong></div><br /><pre style=\"margin: 0px;\">";
              bbTags.Add(new BBTag("code", "${startTag}", "</pre></blockquote>",
                         new BBAttribute("startTag", "file", c =>
                         {
                             if (string.IsNullOrEmpty(c.AttributeValue))
                                 return "<blockquote style=\"overflow-x: scroll;\"><pre style=\"margin: 0px;\">";
                             return string.Format(startTag, c.AttributeValue);
                         }, HtmlEncodingMode.UnsafeDontEncode)));

              // Anchors
              //
              startTag = "<a href=\"{0}\" target=\"_blank\" title=\"{0}\">";
              bbTags.Add(new BBTag("url", "${startTag}", "</a>",
                         new BBAttribute("startTag", "", c =>
                         {
                             if (c.AttributeValue != null)
                                 return string.Format(startTag, c.AttributeValue);

                             string content = c.GetAttributeValueByID("content");
                             if (!string.IsNullOrEmpty(content) && content.StartsWith("www."))
                             {
                                 return string.Format("<a href=\"http://{0}\" target=\"_blank\" title=\"{0}\">", content);
                             }
                             return string.Format(startTag, content);
                         }, HtmlEncodingMode.UnsafeDontEncode)));

              // Color
              //
              bbTags.Add(new BBTag("color", "<span style=\"color:${color};\">", "</span>", new BBAttribute("color", "")));

              // Horizontal Rule
              //
              bbTags.Add(new BBTag("hr", "<hr />", ""));

              // Email
              //${content}代表BBTag中间包裹的内容
              bbTags.Add(new BBTag("email", "<a href=\"mailto:${content}\">", "</a>"));

              // Font size
              //BBAttribute第二参数为空时表示要获取BBTag的默认属性如：[span=1][/span]
              //这种情况获取到的就是1
              bbTags.Add(new BBTag("size", "<span style=\"font-size:${size};\">", "</span>", new BBAttribute("size", "") /* 默认属性表示方式 */));

              return HtmlUtility.BBCodeToHtml(rawString,bbTags);
          }
        
          ]]>
        </code>
      </example>
        </member>
        <member name="T:Tunynet.Utilities.ReadOnlyCollectionExtension">
            <summary>
            IEnumerable&lt;T&gt; 只读集合扩展方法
            </summary>
        </member>
        <member name="M:Tunynet.Utilities.ReadOnlyCollectionExtension.ToReadOnly``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            转换成只读集合
            </summary>
            <typeparam name="T">类型参数</typeparam>
            <param name="enumerable">可枚举的集合</param>
            <returns>返回只读集合</returns>
        </member>
        <member name="T:Tunynet.Utilities.StringUtility">
            <summary>
            字符串工具类
            </summary>
        </member>
        <member name="M:Tunynet.Utilities.StringUtility.Trim(System.String,System.Int32)">
            <summary>
            对字符串进行截字，截去字的部分用"..."替代
            </summary>
            <remarks>
            一个字符指双字节字符，单字节字符仅算半个字符
            </remarks>
            <param name="rawString">待截字的字符串</param>
            <param name="charLimit">截字的长度，按双字节计数</param>
            <returns>截字后的字符串</returns>
        </member>
        <member name="M:Tunynet.Utilities.StringUtility.Trim(System.String,System.Int32,System.String)">
            <summary>
            对字符串进行截字(区分单字节及双字节字符)
            </summary>
            <remarks>
            一个字符指双字节字符，单字节字符仅算半个字符
            </remarks>
            <param name="rawString">待截字的字符串</param>
            <param name="charLimit">截字的长度，按双字节计数</param>
            <param name="appendString">截去字的部分用替代字符串</param>
            <returns>截字后的字符串</returns>
        </member>
        <member name="M:Tunynet.Utilities.StringUtility.UnicodeEncode(System.String)">
            <summary>
            Unicode转义序列
            </summary>
            <param name="rawString">待编码的字符串</param>
        </member>
        <member name="M:Tunynet.Utilities.StringUtility.CleanInvalidCharsForXML(System.String)">
            <summary>
            清除xml中的不合法字符
            </summary>
            <remarks>
            <para>无效字符：</para>
            <list type="number">
            <item>0x00 - 0x08</item>
            <item>0x0b - 0x0c</item>
            <item>0x0e - 0x1f</item>
            </list>        
            </remarks>
            <param name="rawXml">待清理的xml字符串</param>
        </member>
        <member name="M:Tunynet.Utilities.StringUtility.StripSQLInjection(System.String)">
            <summary>
            清理Sql注入特殊字符
            </summary>
            <remarks>
            需清理字符：'、--、exec 、' or
            </remarks>
            <param name="sql">待处理的sql字符串</param>
            <returns>清理后的sql字符串</returns>
        </member>
        <member name="T:Tunynet.Utilities.SymmetricEncrypt">
            <summary>
            对称加密算法
            </summary>
        </member>
        <member name="M:Tunynet.Utilities.SymmetricEncrypt.#ctor">
            <summary>
            默认采用DES算法
            </summary>
        </member>
        <member name="M:Tunynet.Utilities.SymmetricEncrypt.#ctor(Tunynet.Utilities.SymmetricEncryptType)">
            <summary>
            构造函数
            </summary>
            <param name="encryptionType">加密类型</param>
        </member>
        <member name="M:Tunynet.Utilities.SymmetricEncrypt.#ctor(Tunynet.Utilities.SymmetricEncryptType,System.String)">
            <summary>
            构造行数
            </summary>
            <param name="encryptionType">加密类型</param>
            <param name="originalString">原始字符串</param>
        </member>
        <member name="M:Tunynet.Utilities.SymmetricEncrypt.Encrypt">
            <summary>
            进行对称加密
            </summary>
        </member>
        <member name="M:Tunynet.Utilities.SymmetricEncrypt.Encrypt(System.String)">
            <summary>
            进行对称加密
            </summary>
            <param name="originalString">原始字符串</param>
        </member>
        <member name="M:Tunynet.Utilities.SymmetricEncrypt.Encrypt(System.String,Tunynet.Utilities.SymmetricEncryptType)">
            <summary>
            进行对称加密
            </summary>
            <param name="originalString">原始字符串</param>
            <param name="encryptionType">加密类型</param>
        </member>
        <member name="M:Tunynet.Utilities.SymmetricEncrypt.Decrypt">
            <summary>
            进行对称解密
            </summary>
        </member>
        <member name="M:Tunynet.Utilities.SymmetricEncrypt.Decrypt(System.String)">
            <summary>
            进行对称解密
            </summary>
            <param name="encryptedString">需要解密的字符串</param>
        </member>
        <member name="M:Tunynet.Utilities.SymmetricEncrypt.Decrypt(System.String,Tunynet.Utilities.SymmetricEncryptType)">
            <summary>
            进行对称解密
            </summary>
            <param name="encryptedString">需要解密的字符串</param>
            <param name="encryptionType">字符串加密类型</param>
        </member>
        <member name="M:Tunynet.Utilities.SymmetricEncrypt.SetEncryptor">
            <summary>
            设置加密算法
            </summary>
        </member>
        <member name="M:Tunynet.Utilities.SymmetricEncrypt.GenerateKey">
            <summary>
            生成随机密钥
            </summary>
        </member>
        <member name="M:Tunynet.Utilities.SymmetricEncrypt.GenerateIV">
            <summary>
            生成随机初始化向量
            </summary>
        </member>
        <member name="P:Tunynet.Utilities.SymmetricEncrypt.EncryptionType">
            <summary>
            加密类型
            </summary>
        </member>
        <member name="P:Tunynet.Utilities.SymmetricEncrypt.CryptoProvider">
            <summary>
            对称加密算法提供者
            </summary>
        </member>
        <member name="P:Tunynet.Utilities.SymmetricEncrypt.OriginalString">
            <summary>
            原始字符串
            </summary>
        </member>
        <member name="P:Tunynet.Utilities.SymmetricEncrypt.EncryptedString">
            <summary>
            加密后的字符
            </summary>
        </member>
        <member name="P:Tunynet.Utilities.SymmetricEncrypt.key">
            <summary>
            对称加密算法密钥
            </summary>
        </member>
        <member name="P:Tunynet.Utilities.SymmetricEncrypt.KeyString">
            <summary>
            加密密钥
            </summary>
        </member>
        <member name="P:Tunynet.Utilities.SymmetricEncrypt.IV">
            <summary>
            初始化向量
            </summary>
        </member>
        <member name="P:Tunynet.Utilities.SymmetricEncrypt.IVString">
            <summary>
            初始化向量(Base64)
            </summary>
        </member>
        <member name="T:Tunynet.Utilities.SymmetricEncryptType">
            <summary>
            对称加密类型
            </summary>
        </member>
        <member name="F:Tunynet.Utilities.SymmetricEncryptType.DES">
            <summary>
            DES算法
            </summary>
        </member>
        <member name="F:Tunynet.Utilities.SymmetricEncryptType.RC2">
             <summary>
            RC2算法 
             </summary>
        </member>
        <member name="F:Tunynet.Utilities.SymmetricEncryptType.Rijndael">
            <summary>
            Rijndael算法
            </summary>
        </member>
        <member name="F:Tunynet.Utilities.SymmetricEncryptType.TripleDES">
            <summary>
            TripleDES算法
            </summary>
        </member>
        <member name="T:Tunynet.Utilities.ValueUtility">
            <summary>
            用于类型转换的工具类
            </summary>
        </member>
        <member name="M:Tunynet.Utilities.ValueUtility.GetSafeSqlDateTime(System.DateTime)">
            <summary>
            获取安全的SQL Server DateTime
            </summary>
        </member>
        <member name="M:Tunynet.Utilities.ValueUtility.GetSafeSqlInt(System.Int32)">
            <summary>
            获取安全的SQL Server int
            </summary>
        </member>
        <member name="M:Tunynet.Utilities.ValueUtility.GetSqlMaxInt">
            <summary>
            获取在SQL Server中可以使用的整型最大值
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Utilities.ValueUtility.ParseInt(System.String[])">
            <summary>
            把字符串数组转换成整型列表
            </summary>
            <param name="strArray">需要转换的字符串数组</param>
            <returns>根据字符串数据转换后的数值集合</returns>
        </member>
        <member name="M:Tunynet.Utilities.ValueUtility.ChangeType``1(System.Object)">
            <summary>
            把value转换成类型为T的数据，无法进行转换时返回defaultValue
            </summary>
            <typeparam name="T">需转换的类型</typeparam>
            <param name="value">待转换的数据</param>
            <returns>转换后的数据</returns>
        </member>
        <member name="M:Tunynet.Utilities.ValueUtility.ChangeType``1(System.Object,``0)">
            <summary>
            把value转换成类型为T的数据，无法进行转换时返回defaultValue
            </summary>
            <typeparam name="T">需转换的类型参数</typeparam>
            <param name="value">待转换的数据</param>
            <param name="defalutValue">无法转换时需返回的默认值</param>
            <returns>转换后的数据</returns>
        </member>
        <member name="T:Tunynet.Utilities.WebUtility">
            <summary>
            提供与Web请求时可使用的工具类，包括Url解析、Url/Html编码、获取IP地址、返回http状态码
            </summary>
        </member>
        <member name="M:Tunynet.Utilities.WebUtility.ResolveUrl(System.String)">
            <summary>
            将URL转换为在请求客户端可用的 URL（转换 ~/ 为绝对路径）
            </summary>
            <param name="relativeUrl">相对url</param>
            <returns>返回绝对路径</returns>
        </member>
        <member name="M:Tunynet.Utilities.WebUtility.HostPath(System.Uri)">
            <summary>
            获取带传输协议的完整的主机地址
            </summary> 
            <param name="uri">Uri</param>
            <returns>
            <para>返回带传输协议的完整的主机地址</para>
                <example>https://www.spacebuilder.cn:8080</example>
            </returns>
        </member>
        <member name="M:Tunynet.Utilities.WebUtility.GetPhysicalFilePath(System.String)">
            <summary>
            获取物理文件路径
            </summary>
            <param name="filePath">
                <remarks>
                    <para>filePath支持以下格式：</para>
                    <list type="bullet">
                    <item>~/abc/</item>
                    <item>c:\abc\</item>
                    <item>\\192.168.0.1\abc\</item>
                    </list>
                </remarks>
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Tunynet.Utilities.WebUtility.FormatCompleteUrl(System.String)">
            <summary>
            把content中的虚拟路径转化成完整的url
            </summary>
            <remarks>
            例如： /abc/e.aspx 转化成 http://www.spacebuilder.cn/abc/e.aspx
            </remarks>
            <param name="content">content</param>
        </member>
        <member name="M:Tunynet.Utilities.WebUtility.GetServerDomain(System.Uri,System.String[])">
            <summary>
            获取根域名
            </summary>
            <param name="uri">uri</param>
            <param name="domainRules">域名规则</param>
        </member>
        <member name="M:Tunynet.Utilities.WebUtility.HtmlEncode(System.String)">
            <summary>
            html编码
            </summary>
            <remarks>
            <para>调用HttpUtility.HtmlEncode()，当前已知仅作如下转换：</para>
            <list type="bullet">
                <item>&lt; = &amp;lt;</item>
                <item>&gt; = &amp;gt;</item>
                <item>&amp; = &amp;amp;</item>
                <item>&quot; = &amp;quot;</item>
            </list>
            </remarks>
            <param name="rawContent">待编码的字符串</param>
        </member>
        <member name="M:Tunynet.Utilities.WebUtility.HtmlDecode(System.String)">
            <summary>
            html解码
            </summary>
            <param name="rawContent">待解码的字符串</param>
            <returns>解码后的字符串</returns>
        </member>
        <member name="M:Tunynet.Utilities.WebUtility.UrlEncode(System.String)">
            <summary>
            Url编码
            </summary>
            <param name="urlToEncode">待编码的url字符串</param>
            <returns>编码后的url字符串</returns>
        </member>
        <member name="M:Tunynet.Utilities.WebUtility.UrlDecode(System.String)">
            <summary>
            Url解码
            </summary>
            <param name="urlToDecode">待解码的字符串</param>
            <returns>解码后的字符串</returns>
        </member>
        <member name="M:Tunynet.Utilities.WebUtility.GetIP">
            <summary>
            获取IP地址
            </summary>
            <returns>返回获取的ip地址</returns>
        </member>
        <member name="M:Tunynet.Utilities.WebUtility.GetIP(System.Web.HttpContext)">
            <summary>
            透过代理获取真实IP
            </summary>
            <param name="httpContext">HttpContext</param>
            <returns>返回获取的ip地址</returns>
        </member>
        <member name="M:Tunynet.Utilities.WebUtility.Return404(System.Web.HttpContext)">
            <summary>
            返回 StatusCode 404
            </summary>
            <param name="httpContext">HttpContext</param>
        </member>
        <member name="M:Tunynet.Utilities.WebUtility.Return403(System.Web.HttpContext)">
            <summary>
            返回 StatusCode 403
            </summary>
            <param name="httpContext">HttpContext</param>
        </member>
        <member name="M:Tunynet.Utilities.WebUtility.Return304(System.Web.HttpContext,System.Boolean)">
            <summary>
            返回 StatusCode 304
            </summary>
            <param name="httpContext">HttpContext</param>
            <param name="endResponse">是否终止HttpResponse</param>
        </member>
        <member name="M:Tunynet.Utilities.WebUtility.ReturnStatusCode(System.Web.HttpContext,System.Int32,System.String,System.Boolean)">
            <summary>
            返回http状态码
            </summary>
            <param name="httpContext">HttpContext</param>
            <param name="statusCode">状态码</param>
            <param name="status">状态描述字符串</param>
            <param name="endResponse">是否终止HttpResponse</param>
        </member>
        <member name="M:Tunynet.Utilities.WebUtility.SetStatusCodeForError(System.Web.HttpResponseBase)">
            <summary>
            设置当前响应的状态码为指定值
            </summary>
            <param name="response">当前响应</param>
        </member>
        <member name="T:Tunynet.Utilities.TrustedHtml">
            <summary>
            Html标签过滤配置类
            </summary>
        </member>
        <member name="F:Tunynet.Utilities.TrustedHtml.addedRules">
            <summary>
            已经添加的规则
            </summary>
        </member>
        <member name="M:Tunynet.Utilities.TrustedHtml.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Tunynet.Utilities.TrustedHtml.#ctor(System.Boolean)">
            <summary>
            构造函数
            </summary>
            <param name="encodeHtml">是否需要htmlencode</param>
        </member>
        <member name="M:Tunynet.Utilities.TrustedHtml.Basic">
            <summary>
            普通受信任标签
            </summary>
        </member>
        <member name="M:Tunynet.Utilities.TrustedHtml.HtmlEditor">
            <summary>
            编辑器中受信任的标签
            </summary>
        </member>
        <member name="M:Tunynet.Utilities.TrustedHtml.AddTags(System.String[])">
            <summary>
            添加受信任的标签验证规则
            </summary>
            <param name="tags">受信任的标签</param>
        </member>
        <member name="M:Tunynet.Utilities.TrustedHtml.AddAttributes(System.String,System.String[])">
            <summary>
            添加受信任的标签属性规则
            </summary>
            <param name="tag">标签名</param>
            <param name="keys">标签的受信任属性</param>
        </member>
        <member name="M:Tunynet.Utilities.TrustedHtml.AddGlobalAttributes(System.String[])">
            <summary>
            添加全局受信任的属性
            </summary>
            <param name="attrs">属性名</param>
        </member>
        <member name="M:Tunynet.Utilities.TrustedHtml.AddEnforcedAttribute(System.String,System.String,System.String)">
            <summary>
            添加必须存在的标签属性规则
            </summary>
            <param name="tag">标签名</param>
            <param name="key">属性名</param>
            <param name="value">属性值</param>
        </member>
        <member name="M:Tunynet.Utilities.TrustedHtml.AddProtocols(System.String,System.String,System.String[])">
            <summary>
            添加标签中被允许协议的Url规则
            </summary>
            <param name="tag">标签名</param>
            <param name="key">属性名</param>
            <param name="protocols">被允许的Url协议</param>
        </member>
        <member name="M:Tunynet.Utilities.TrustedHtml.GetEnforcedAttributes(System.String)">
            <summary>
             获取强制添加的标签属性
            </summary>
            <param name="tag">当前标签名</param>
        </member>
        <member name="M:Tunynet.Utilities.TrustedHtml.IsSafeTag(System.String)">
            <summary>
            判断标签是否被信任
            </summary>
            <param name="tag">标签名</param>
            <returns>true被信任，false反之</returns>
        </member>
        <member name="M:Tunynet.Utilities.TrustedHtml.IsSafeAttribute(System.String,System.String,System.String)">
            <summary>
            验证标签属性是否被信任
            </summary>
            <param name="tag">标签名</param>
            <param name="attr">属性名</param>
            <param name="attrVal">属性值</param>
            <returns>true为被信任，false反之</returns>
        </member>
        <member name="M:Tunynet.Utilities.TrustedHtml.ValidProtocol(System.String,System.String,System.String)">
            <summary>
            验证标签实行中的Url是否符合限制条件
            </summary>
            <param name="tag">标签名</param>
            <param name="attr">属性名</param>
            <param name="attVal">属性值</param>
            <returns>true为符合限制的，false反之</returns>
        </member>
        <member name="P:Tunynet.Utilities.TrustedHtml.EncodeHtml">
            <summary>
            是否需要Html编码
            </summary>
        </member>
        <member name="T:Tunynet.Utilities.TrustedHtmlLevel">
            <summary>
            受信任Html标签的严格程度
            </summary>
        </member>
        <member name="F:Tunynet.Utilities.TrustedHtmlLevel.Basic">
            <summary>
            普通受信任标签
            </summary>
            <remarks>
            <para>允许使用个别html标签，例如：</para>
            <list type="bullet">
            <item>无Html编辑器的评论表单</item>
            </list>
            </remarks>
        </member>
        <member name="F:Tunynet.Utilities.TrustedHtmlLevel.HtmlEditor">
            <summary>
            针对于Html编辑器的受信任标签
            </summary>
        </member>
    </members>
</doc>
