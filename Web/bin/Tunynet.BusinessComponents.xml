<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Tunynet.BusinessComponents</name>
    </assembly>
    <members>
        <member name="T:Tunynet.Common.Advertising">
            <summary>
            广告实体
            </summary>
        </member>
        <member name="M:Tunynet.Common.Advertising.New">
            <summary>
            新建实体时使用
            </summary>
        </member>
        <member name="P:Tunynet.Common.Advertising.Width">
            <summary>
            问题
            </summary>
        </member>
        <member name="P:Tunynet.Common.Advertising.Height">
            <summary>
            答案
            </summary>
        </member>
        <member name="P:Tunynet.Common.Advertising.AdvertisingId">
             <summary>
            广告Id
             </summary>
        </member>
        <member name="P:Tunynet.Common.Advertising.Name">
             <summary>
            广告名称
             </summary>
        </member>
        <member name="P:Tunynet.Common.Advertising.AdvertisingType">
             <summary>
            呈现方式
             </summary>
        </member>
        <member name="P:Tunynet.Common.Advertising.Body">
             <summary>
            广告内容
             </summary>
        </member>
        <member name="P:Tunynet.Common.Advertising.TextStyle">
            <summary>
            文本样式
            </summary>
        </member>
        <member name="P:Tunynet.Common.Advertising.AttachmentUrl">
             <summary>
            网络图片地址/上传图片存储地址/flash地址
             </summary>
        </member>
        <member name="P:Tunynet.Common.Advertising.Url">
             <summary>
            广告链接地址
             </summary>
        </member>
        <member name="P:Tunynet.Common.Advertising.IsEnable">
             <summary>
            是否启用
             </summary>
        </member>
        <member name="P:Tunynet.Common.Advertising.IsBlank">
             <summary>
            是否新开窗口
             </summary>
        </member>
        <member name="P:Tunynet.Common.Advertising.StartDate">
             <summary>
            开始时间
             </summary>
        </member>
        <member name="P:Tunynet.Common.Advertising.EndDate">
             <summary>
            结束时间
             </summary>
        </member>
        <member name="P:Tunynet.Common.Advertising.UseredPositionCount">
             <summary>
            投放数量
             </summary>
        </member>
        <member name="P:Tunynet.Common.Advertising.DisplayOrder">
             <summary>
            排序顺序（默认和Id一致）
             </summary>
        </member>
        <member name="P:Tunynet.Common.Advertising.DateCreated">
             <summary>
            创建日期
             </summary>
        </member>
        <member name="P:Tunynet.Common.Advertising.LastModified">
             <summary>
            修改时间
             </summary>
        </member>
        <member name="P:Tunynet.Common.Advertising.AdvertisingsPositions">
            <summary>
            该广告所在的广告位
            </summary>
        </member>
        <member name="T:Tunynet.Common.AdvertisingType">
            <summary>
            附件媒体类型
            </summary>
        </member>
        <member name="F:Tunynet.Common.AdvertisingType.Script">
            <summary>
            代码
            </summary>
        </member>
        <member name="F:Tunynet.Common.AdvertisingType.Text">
            <summary>
            文字
            </summary>
        </member>
        <member name="F:Tunynet.Common.AdvertisingType.Image">
            <summary>
            图片
            </summary>
        </member>
        <member name="F:Tunynet.Common.AdvertisingType.Flash">
            <summary>
            Flash
            </summary>
        </member>
        <member name="T:Tunynet.Common.AdvertisingPosition">
            <summary>
            广告位实体
            </summary>
        </member>
        <member name="M:Tunynet.Common.AdvertisingPosition.New">
            <summary>
            新建实体时使用
            </summary>
        </member>
        <member name="P:Tunynet.Common.AdvertisingPosition.PositionId">
             <summary>
            广告位Id
             </summary>
        </member>
        <member name="P:Tunynet.Common.AdvertisingPosition.PresentAreaKey">
             <summary>
            投放区域
             </summary>
        </member>
        <member name="P:Tunynet.Common.AdvertisingPosition.Description">
             <summary>
            描述
             </summary>
        </member>
        <member name="P:Tunynet.Common.AdvertisingPosition.FeaturedImage">
             <summary>
            示意图
             </summary>
        </member>
        <member name="P:Tunynet.Common.AdvertisingPosition.Width">
             <summary>
            宽度
             </summary>
        </member>
        <member name="P:Tunynet.Common.AdvertisingPosition.Height">
             <summary>
            高度
             </summary>
        </member>
        <member name="P:Tunynet.Common.AdvertisingPosition.IsEnable">
             <summary>
            是否启用
             </summary>
        </member>
        <member name="T:Tunynet.Common.AdvertisingService">
            <summary>
            广告业务逻辑类
            </summary>
        </member>
        <member name="M:Tunynet.Common.AdvertisingService.#ctor">
            <summary>
            构造器
            </summary>
        </member>
        <member name="M:Tunynet.Common.AdvertisingService.#ctor(Tunynet.Common.Repositories.IAdvertisingRepository,Tunynet.Common.Repositories.IAdvertisingPositionRepository)">
            <summary>
            构造器
            </summary>
            <param name="advertisingRepository">广告仓储接口</param>
            <param name="advertisingPositionRepository">广告位仓储接口</param>
        </member>
        <member name="M:Tunynet.Common.AdvertisingService.CreateAdvertising(Tunynet.Common.Advertising,System.Collections.Generic.IEnumerable{System.String},System.IO.Stream)">
            <summary>
            创建广告
            </summary>
            <param name="advertising">广告</param>
            <param name="positionIds">广告位Id集合</param>
            <param name="stream">图片流</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.AdvertisingService.UpdateAdvertising(Tunynet.Common.Advertising,System.Collections.Generic.IEnumerable{System.String},System.IO.Stream)">
            <summary>
            更新广告
            </summary>
            <param name="advertising">广告</param>
            <param name="positionIds">广告位Id集合</param>
            <param name="stream">图片流</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.AdvertisingService.DeleteAdvertising(System.Int64)">
            <summary>
            删除广告
            </summary>
            <param name="advertisingId">广告Id</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.AdvertisingService.GetAdvertisingsForAdmin(System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Int32,System.Int32)">
            <summary>
            获取广告列表
            </summary>
            <param name="presentAreaKey">投放区域</param>
            <param name="positionId">广告位</param>
            <param name="startDate">开始日期</param>
            <param name="endDate">结束日期</param>
            <param name="isExpired">是否过期</param>
            <param name="isEnable">是否启用</param>
            <param name="pageSize">每页记录数</param>
            <param name="pageIndex">当前页数</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.AdvertisingService.ChangeDisplayOrder(System.Int64,System.Int64)">
            <summary>
            变更广告的排列顺序
            </summary>
            <param name="id">待调整的广告Id</param>
            <param name="referenceId">参照广告Id</param>
        </member>
        <member name="M:Tunynet.Common.AdvertisingService.SetAdvertisingStatus(System.Int64,System.Boolean)">
            <summary>
            设置广告是否启用
            </summary>
            <param name="advertisingId">广告Id</param>
            <param name="isEnable">是否启用</param>
        </member>
        <member name="M:Tunynet.Common.AdvertisingService.GetAdvertising(System.Int64)">
            <summary>
            获取广告
            </summary>
            <param name="advertisingId">广告Id</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.AdvertisingService.GetAdvertisingCount">
            <summary>
            获取广告统计数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.AdvertisingService.ClearPositionsFromAdvertising(System.Int64)">
            <summary>
            清除广告的所有广告位
            </summary>
            <param name="advertisingId">广告Id</param>
        </member>
        <member name="M:Tunynet.Common.AdvertisingService.AddPositionsToAdvertising(System.Int64,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            为广告批量设置广告位
            </summary>
            <param name="advertisingId">广告Id</param>
            <param name="positionIds">广告位Id集合</param>
        </member>
        <member name="M:Tunynet.Common.AdvertisingService.GetPositionsByAdvertisingId(System.Int64)">
            <summary>
            根据广告Id取所有的广告位
            </summary>
            <param name="advertisingId">广告Id</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.AdvertisingService.UploadAdvertisingImage(Tunynet.Common.Advertising,System.IO.Stream)">
            <summary>
            上传广告图片
            </summary>
            <param name="advertising">广告实体</param>
            <param name="stream">图片流</param>
        </member>
        <member name="M:Tunynet.Common.AdvertisingService.DeleteAdvertisingImage(System.Int64)">
            <summary>
            删除广告示意图
            </summary>
            <param name="advertisingId">广告Id</param>
        </member>
        <member name="M:Tunynet.Common.AdvertisingService.CreatePosition(Tunynet.Common.AdvertisingPosition,System.IO.Stream)">
            <summary>
            创建广告位
            </summary>
            <param name="position">广告位</param>
            <param name="stream">图片流</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.AdvertisingService.UpdatePosition(Tunynet.Common.AdvertisingPosition,System.IO.Stream)">
            <summary>
            更新广告位
            </summary>
            <param name="position">广告位</param>
            <param name="stream">图片流</param>
        </member>
        <member name="M:Tunynet.Common.AdvertisingService.DeletePosition(System.String)">
            <summary>
            删除广告位
            </summary>
            <param name="positionId"></param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.AdvertisingService.GetPositionsForAdmin(System.String,System.Int32,System.Int32,System.Nullable{System.Boolean})">
            <summary>
            获取广告位列表
            </summary>
            <param name="presentAreaKey">投放区域</param>
            <param name="height">高度</param>
            <param name="width">宽度</param>
            <param name="isEnable">是否启用</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.AdvertisingService.GetAdvertisingsByPositionId(System.String,System.Nullable{System.Boolean})">
            <summary>
            根据广告位Id取所有的广告
            </summary>
            <param name="positionId">广告位Id</param>
            <param name="isEnable">是否启用（null：全部广告,true：仅启用广告,false：仅禁用广告）</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.AdvertisingService.UploadPositionImage(Tunynet.Common.AdvertisingPosition,System.IO.Stream)">
            <summary>
            上传示意图
            </summary>
            <param name="position">广告位</param>
            <param name="stream">图片流</param>
        </member>
        <member name="M:Tunynet.Common.AdvertisingService.DeletePositionImage(System.String)">
            <summary>
            删除广告位示意图
            </summary>
            <param name="positionId">广告位Id</param>
        </member>
        <member name="M:Tunynet.Common.AdvertisingService.GetPosition(System.String)">
            <summary>
            获取广告位
            </summary>
            <param name="positionId">广告位ID</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.AdvertisingService.GetAllPositionSize">
            <summary>
            获取所有的广告位尺寸
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.AdvertisingService.GetPositionCount">
            <summary>
            获取广告位统计数据
            </summary>
            <returns></returns>
        </member>
        <member name="T:Tunynet.Common.Repositories.AdvertisingPositionRepository">
             <summary>
            广告位数据访问仓储
             </summary>
        </member>
        <member name="T:Tunynet.Common.Repositories.IAdvertisingPositionRepository">
             <summary>
            广告位数据访问接口
             </summary>
        </member>
        <member name="M:Tunynet.Common.Repositories.IAdvertisingPositionRepository.GetPositionsForAdmin(System.String,System.Int32,System.Int32,System.Nullable{System.Boolean})">
            <summary>
            获取广告位列表
            </summary>
            <param name="presentAreaKey">投放区域</param>
            <param name="height">高度</param>
            <param name="width">宽度</param>
            <param name="isEnable">是否启用</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.IAdvertisingPositionRepository.GetAdvertisingsByPositionId(System.String,System.Nullable{System.Boolean})">
            <summary>
            根据广告位Id取所有的广告
            </summary>
            <param name="positionId">广告位Id</param>
            <param name="isEnable">是否启用</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.IAdvertisingPositionRepository.GetPositionCount">
            <summary>
            获取广告位统计数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.AdvertisingPositionRepository.GetPositionsForAdmin(System.String,System.Int32,System.Int32,System.Nullable{System.Boolean})">
            <summary>
            获取广告位列表
            </summary>
            <param name="presentAreaKey">投放区域</param>
            <param name="height">高度</param>
            <param name="width">宽度</param>
            <param name="isEnable">是否启用</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.AdvertisingPositionRepository.GetPositionCount">
            <summary>
            获取广告位统计数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.AdvertisingPositionRepository.GetAdvertisingsByPositionId(System.String,System.Nullable{System.Boolean})">
            <summary>
            根据广告位Id取所有的广告
            </summary>
            <param name="positionId">广告位Id</param>
            <param name="isEnable">是否启用</param>
            <returns></returns>
        </member>
        <member name="T:Tunynet.Common.Repositories.AdvertisingRepository">
             <summary>
            广告数据访问仓储
             </summary>
        </member>
        <member name="T:Tunynet.Common.Repositories.IAdvertisingRepository">
             <summary>
            广告数据访问接口
             </summary>
        </member>
        <member name="M:Tunynet.Common.Repositories.IAdvertisingRepository.GetAdvertisingsForAdmin(System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Int32,System.Int32)">
            <summary>
            获取广告列表
            </summary>
            <param name="presentAreaKey">投放区域</param>
            <param name="positionId">广告位</param>
            <param name="startDate">开始日期</param>
            <param name="endDate">结束日期</param>
            <param name="isExpired">是否过期</param>
            <param name="isEnable">是否启用</param>
            <param name="pageSize">每页记录数</param>
            <param name="pageIndex">当前页数</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.IAdvertisingRepository.GetPositionsByAdvertisingId(System.Int64)">
            <summary>
            根据广告Id取所有的广告位
            </summary>
            <param name="advertisingId">广告Id</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.IAdvertisingRepository.GetAdvertisingCount">
            <summary>
            获取广告统计数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.IAdvertisingRepository.ClearPositionsFromAdvertising(System.Int64)">
            <summary>
            清除广告的所有广告位
            </summary>
            <param name="advertisingId">广告Id</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.IAdvertisingRepository.AddPositionsToAdvertising(System.Int64,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            为广告批量设置广告位
            </summary>
            <param name="advertisingId">广告Id</param>
            <param name="positionIds">广告位Id集合</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.AdvertisingRepository.GetAdvertisingsForAdmin(System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Int32,System.Int32)">
            <summary>
            获取广告列表
            </summary>
            <param name="presentAreaKey">投放区域</param>
            <param name="positionId">广告位</param>
            <param name="startDate">开始日期</param>
            <param name="endDate">结束日期</param>
            <param name="isExpired">是否过期</param>
            <param name="isEnable">是否启用</param>
            <param name="pageSize">每页记录数</param>
            <param name="pageIndex">当前页数</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.AdvertisingRepository.GetAdvertisingCount">
            <summary>
            获取群组统计数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.AdvertisingRepository.ClearPositionsFromAdvertising(System.Int64)">
            <summary>
            清除广告的所有广告位
            </summary>
            <param name="advertisingId">广告Id</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.AdvertisingRepository.AddPositionsToAdvertising(System.Int64,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            为广告批量设置广告位
            </summary>
            <param name="advertisingId">广告Id</param>
            <param name="positionIds">广告位Id集合</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.AdvertisingRepository.GetPositionsByAdvertisingId(System.Int64)">
            <summary>
            根据广告Id取所有的广告位
            </summary>
            <param name="advertisingId">广告Id</param>
            <returns></returns>
        </member>
        <member name="T:Tunynet.Common.ApplicationData">
            <summary>
            应用数据实体类
            </summary>
        </member>
        <member name="M:Tunynet.Common.ApplicationData.New">
            <summary>
            新建实体时使用
            </summary>
        </member>
        <member name="P:Tunynet.Common.ApplicationData.Id">
             <summary>
            Id
             </summary>
        </member>
        <member name="P:Tunynet.Common.ApplicationData.ApplicationId">
             <summary>
            ApplicationId
             </summary>
        </member>
        <member name="P:Tunynet.Common.ApplicationData.TenantTypeId">
             <summary>
            租户类型Id
             </summary>
        </member>
        <member name="P:Tunynet.Common.ApplicationData.Datakey">
             <summary>
            数据键值（要求Application内唯一）
             </summary>
        </member>
        <member name="P:Tunynet.Common.ApplicationData.LongValue">
             <summary>
            long数据值
             </summary>
        </member>
        <member name="P:Tunynet.Common.ApplicationData.DecimalValue">
             <summary>
            decimal数据值
             </summary>
        </member>
        <member name="P:Tunynet.Common.ApplicationData.StringValue">
             <summary>
            字符串数据值
             </summary>
        </member>
        <member name="T:Tunynet.Common.ApplicationDataKeys">
            <summary>
            应用数据标识
            </summary>
        </member>
        <member name="M:Tunynet.Common.ApplicationDataKeys.Instance">
            <summary>
            获取单例
            </summary>
            <returns></returns>
        </member>
        <member name="T:Tunynet.Common.ApplicationDataService">
            <summary>
            应用数据业务逻辑类
            </summary>
        </member>
        <member name="M:Tunynet.Common.ApplicationDataService.#ctor">
            <summary>
            构造器
            </summary>
        </member>
        <member name="M:Tunynet.Common.ApplicationDataService.#ctor(Tunynet.Common.Repositories.IApplicationDataRepository)">
            <summary>
            构造器
            </summary>
            <param name="applicationDataRepository">应用数据仓储</param>
        </member>
        <member name="M:Tunynet.Common.ApplicationDataService.Change(System.Int32,System.String,System.Int64)">
            <summary>
            变更应用数据
            </summary>
            <param name="applicationId">应用Id</param>
            <param name="dataKey">数据标识</param>
            <param name="value">待变更的数值</param>
        </member>
        <member name="M:Tunynet.Common.ApplicationDataService.Change(System.Int32,System.String,System.Decimal)">
            <summary>
            变更应用数据
            </summary>
            <param name="applicationId">应用Id</param>
            <param name="dataKey">数据标识</param>
            <param name="value">待变更的数值</param>
        </member>
        <member name="M:Tunynet.Common.ApplicationDataService.Change(System.Int32,System.String,System.String)">
            <summary>
            变更应用数据
            </summary>
            <param name="applicationId">应用Id</param>
            <param name="dataKey">数据标识</param>
            <param name="value">待变更的值</param>
        </member>
        <member name="M:Tunynet.Common.ApplicationDataService.Change(System.Int32,System.String,System.String,System.Int64)">
            <summary>
            变更应用数据
            </summary>
            <param name="applicationId">应用Id</param>
            <param name="tenantTypeId">租户类型Id</param> 
            <param name="dataKey">数据标识</param>
            <param name="value">待变更的数值</param>
        </member>
        <member name="M:Tunynet.Common.ApplicationDataService.Change(System.Int32,System.String,System.String,System.Decimal)">
            <summary>
            变更应用数据
            </summary>
            <param name="applicationId">应用Id</param>
            <param name="tenantTypeId">租户类型Id</param> 
            <param name="dataKey">数据标识</param>
            <param name="value">待变更的数值</param>
        </member>
        <member name="M:Tunynet.Common.ApplicationDataService.Change(System.Int32,System.String,System.String,System.String)">
            <summary>
            变更应用数据
            </summary>
            <param name="applicationId">应用Id</param>
            <param name="tenantTypeId">租户类型Id</param> 
            <param name="dataKey">数据标识</param>
            <param name="value">待变更的值</param>
        </member>
        <member name="M:Tunynet.Common.ApplicationDataService.GetLong(System.Int32,System.String,System.String)">
            <summary>
            获取DataKey对应的长整形
            </summary>
            <param name="applicationId">应用Id</param>
            <param name="dataKey">DataKey</param>
            <param name="tenantTypeId">租户类型Id</param> 
            <returns>dataKey不存在时返回0</returns>
        </member>
        <member name="M:Tunynet.Common.ApplicationDataService.GetDecimal(System.Int32,System.String,System.String)">
            <summary>
            获取DataKey对应的Decimal
            </summary>
            <param name="applicationId">应用Id</param>
            <param name="dataKey">DataKey</param>
            <param name="tenantTypeId">租户类型Id</param>
            <returns>dataKey不存在时返回0</returns>
        </member>
        <member name="M:Tunynet.Common.ApplicationDataService.GetString(System.Int32,System.String,System.String)">
            <summary>
            获取DataKey对应的String
            </summary>
            <param name="applicationId">应用Id</param>
            <param name="dataKey">DataKey</param>
            <param name="tenantTypeId">租户类型Id</param>
            <returns>dataKey不存在时返回空字符串</returns>
        </member>
        <member name="T:Tunynet.Common.IApplicationDataCalculater">
            <summary>
            ApplicationData计算器接口
            </summary>
        </member>
        <member name="M:Tunynet.Common.IApplicationDataCalculater.Calculate">
            <summary>
            计算ApplicationData
            </summary>
        </member>
        <member name="T:Tunynet.Common.Repositories.ApplicationDataRepository">
            <summary>
            应用数据Repository
            </summary>
        </member>
        <member name="T:Tunynet.Common.Repositories.IApplicationDataRepository">
            <summary>
            ApplicationData数据访问接口
            </summary>
        </member>
        <member name="M:Tunynet.Common.Repositories.IApplicationDataRepository.Change(System.Int32,System.String,System.Int64)">
            <summary>
            变更系统数据
            </summary>
            <param name="applicationId">applicationId</param>
            <param name="dataKey">数据标识</param>
            <param name="value">待变更的数值</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.IApplicationDataRepository.Change(System.Int32,System.String,System.String,System.Int64)">
            <summary>
            变更应用数据
            </summary>
            <param name="applicationId">应用Id</param>
            <param name="tenantTypeId">租户类型Id</param> 
            <param name="dataKey">数据标识</param>
            <param name="value">待变更的数值</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.IApplicationDataRepository.Change(System.Int32,System.String,System.Decimal)">
            <summary>
            变更系统数据
            </summary>
            <param name="applicationId">applicationId</param>
            <param name="dataKey">数据标识</param>
            <param name="value">待变更的数值</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.IApplicationDataRepository.Change(System.Int32,System.String,System.String,System.Decimal)">
            <summary>
            变更应用数据
            </summary>
            <param name="applicationId">应用Id</param>
            <param name="tenantTypeId">租户类型Id</param> 
            <param name="dataKey">数据标识</param>
            <param name="value">待变更的数值</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.IApplicationDataRepository.Change(System.Int32,System.String,System.String)">
            <summary>
            变更应用数据
            </summary>
            <param name="applicationId">应用Id</param>
            <param name="dataKey">数据标识</param>
            <param name="value">待变更的值</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.IApplicationDataRepository.Change(System.Int32,System.String,System.String,System.String)">
            <summary>
            变更应用数据
            </summary>
            <param name="applicationId">应用Id</param>
            <param name="tenantTypeId">租户类型Id</param> 
            <param name="dataKey">数据标识</param>
            <param name="value">待变更的数值</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.IApplicationDataRepository.Get(System.Int32,System.String)">
            <summary>
            获取ApplicationData
            </summary>
            <param name="applicationId">应用Id</param>
            <param name="dataKey">数据标识</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.IApplicationDataRepository.Get(System.Int32,System.String,System.String)">
            <summary>
            获取ApplicationData
            </summary>
            <param name="applicationId">应用Id</param>
            <param name="tenantTypeId">数据标识</param> 
            <param name="dataKey">数据标识</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.IApplicationDataRepository.GetAll(System.Int32,System.String)">
            <summary>
            获取DataKey对应的值
            </summary>
            <param name="applicationId">应用Id</param>
            <param name="tenantTypeId">租户类型Id</param> 
        </member>
        <member name="M:Tunynet.Common.Repositories.ApplicationDataRepository.Change(System.Int32,System.String,System.Int64)">
            <summary>
            变更系统数据
            </summary>
            <param name="applicationId">applicationId</param>
            <param name="dataKey">数据标识</param>
            <param name="value">待变更的数值</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.ApplicationDataRepository.Change(System.Int32,System.String,System.String,System.Int64)">
            <summary>
            变更应用数据
            </summary>
            <param name="applicationId">应用Id</param>
            <param name="tenantTypeId">租户类型Id</param> 
            <param name="dataKey">数据标识</param>
            <param name="value">待变更的数值</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.ApplicationDataRepository.Change(System.Int32,System.String,System.Decimal)">
            <summary>
            变更系统数据
            </summary>
            <param name="applicationId">applicationId</param>
            <param name="dataKey">数据标识</param>
            <param name="value">待变更的数值</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.ApplicationDataRepository.Change(System.Int32,System.String,System.String,System.Decimal)">
            <summary>
            变更应用数据
            </summary>
            <param name="applicationId">应用Id</param>
            <param name="tenantTypeId">租户类型Id</param> 
            <param name="dataKey">数据标识</param>
            <param name="value">待变更的数值</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.ApplicationDataRepository.Change(System.Int32,System.String,System.String)">
            <summary>
            变更应用数据
            </summary>
            <param name="applicationId">应用Id</param>
            <param name="dataKey">数据标识</param>
            <param name="value">待变更的值</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.ApplicationDataRepository.Change(System.Int32,System.String,System.String,System.String)">
            <summary>
            变更应用数据
            </summary>
            <param name="applicationId">应用Id</param>
            <param name="tenantTypeId">租户类型Id</param> 
            <param name="dataKey">数据标识</param>
            <param name="value">待变更的数值</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.ApplicationDataRepository.Get(System.Int32,System.String)">
            <summary>
            获取ApplicationData
            </summary>
            <param name="applicationId">应用Id</param>
            <param name="dataKey">数据标识</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.ApplicationDataRepository.Get(System.Int32,System.String,System.String)">
            <summary>
            获取ApplicationData
            </summary>
            <param name="applicationId">应用Id</param>
            <param name="tenantTypeId">数据标识</param> 
            <param name="dataKey">数据标识</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.ApplicationDataRepository.GetAll(System.Int32,System.String)">
            <summary>
            获取DataKey对应的值
            </summary>
            <param name="applicationId">应用Id</param>
            <param name="tenantTypeId">租户类型Id</param> 
        </member>
        <member name="M:Tunynet.Common.Repositories.ApplicationDataRepository.GetCacheKey_GetApplicationData(System.Int32,System.String)">
            <summary>
            获取ApplicationData的CacheKey
            </summary>
            <param name="applicationId">应用Id</param>
            <param name="dataKey">数据标识</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.ApplicationDataRepository.GetCacheKey_GetApplicationData(System.Int32,System.String,System.String)">
            <summary>
            获取ApplicationData的CacheKey
            </summary>
            <param name="applicationId">应用Id</param>
            <param name="tenantTypeId">租户类型Id</param> 
            <param name="dataKey">数据标识</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.ApplicationDataRepository.GetCacheKey_GetAllApplicationData(System.Int32)">
            <summary>
            获取所有ApplicationData的CacheKey
            </summary>
            <param name="applicationId">应用Id</param>
            <param name="tenantTypeId">租户类型Id</param> 
        </member>
        <member name="T:Tunynet.Common.ApplicationDataCalculaterTask">
            <summary>
            定时计算ApplicationData
            </summary>
        </member>
        <member name="M:Tunynet.Common.ApplicationDataCalculaterTask.Tunynet#Tasks#ITask#Execute(Tunynet.Tasks.TaskDetail)">
            <summary>
            计算ApplicationData
            </summary>
            <param name="taskDetail"></param>
        </member>
        <member name="T:Tunynet.Common.ApplicationBase">
            <summary>
            应用模块基类
            </summary>
        </member>
        <member name="T:Tunynet.Common.ApplicationModel">
            <summary>
            应用元数据
            </summary>
        </member>
        <member name="P:Tunynet.Common.ApplicationModel.ApplicationId">
             <summary>
            应用程序Id
             </summary>
        </member>
        <member name="P:Tunynet.Common.ApplicationModel.ApplicationKey">
             <summary>
            Application英文唯一标识
             </summary>
        </member>
        <member name="P:Tunynet.Common.ApplicationModel.Description">
            <summary>
            应用描述
            </summary>
        </member>
        <member name="P:Tunynet.Common.ApplicationModel.IsEnabled">
             <summary>
            是否启用
             </summary>
        </member>
        <member name="P:Tunynet.Common.ApplicationModel.IsLocked">
             <summary>
            是否锁定
             </summary>
        </member>
        <member name="P:Tunynet.Common.ApplicationModel.DisplayOrder">
             <summary>
            排序序号
             </summary>
        </member>
        <member name="M:Tunynet.Common.ApplicationBase.#ctor(Tunynet.Common.ApplicationModel)">
            <summary>
            构造函数
            </summary>
            <param name="model">应用元数据</param>
        </member>
        <member name="M:Tunynet.Common.ApplicationBase.Install(System.String,System.Int64)">
            <summary>
            为呈现区域实例安装应用
            </summary>
            <param name="presentAreaKey">呈现区域标识</param>
            <param name="ownerId">呈现区域实例拥有者Id</param>
        </member>
        <member name="M:Tunynet.Common.ApplicationBase.UnInstall(System.String,System.Int64)">
            <summary>
            为呈现区域实例卸载应用
            </summary>
            <param name="presentAreaKey">呈现区域标识</param>
            <param name="ownerId">呈现区域实例拥有者Id</param>
        </member>
        <member name="M:Tunynet.Common.ApplicationBase.DeleteUser(System.Int64,System.String,System.Boolean)">
            <summary>
            删除用户在应用中的数据
            </summary>
            <param name="userId">用户Id</param>
            <param name="takeOverUserName">用于接管删除用户时不能删除的内容(例如：用户创建的群组)</param>
            <param name="isTakeOver">是否接管被删除用户可被接管的内容</param>
        </member>
        <member name="M:Tunynet.Common.ApplicationBase.GetDynamicNavigations(System.String,System.Int64)">
            <summary>
            获取应用在程序区域实例的动态导航（默认无动态导航，如果需要在ApplicationBase具体实现类进行重写）
            </summary>
            <remarks>
            例如：资讯栏目
            </remarks>
            <param name="presentAreaKey">呈现区域标识</param>
            <param name="ownerId">呈现区域实例拥有者Id</param>
        </member>
        <member name="P:Tunynet.Common.ApplicationBase.Config">
            <summary>
            ApplicationConfig
            </summary>
        </member>
        <member name="T:Tunynet.Common.ApplicationConfig">
            <summary>
            应用的配置文件
            </summary>
        </member>
        <member name="M:Tunynet.Common.ApplicationConfig.InitializeAll(Autofac.ContainerBuilder)">
            <summary>
            加载所有的application.config
            </summary>
            <param name="containerBuilder">容器构建器</param>
            <returns>Key=ApplicationId</returns>
        </member>
        <member name="M:Tunynet.Common.ApplicationConfig.GetConfig(System.Int32)">
            <summary>
            获取某一个Application.Config
            </summary>
            <param name="applicationId">applicationID</param>
            <returns>返回ApplicationConfig</returns>
        </member>
        <member name="M:Tunynet.Common.ApplicationConfig.LoadConfigs">
            <summary>
            加载所有的Application.config文件
            </summary>
        </member>
        <member name="M:Tunynet.Common.ApplicationConfig.#ctor(System.Xml.Linq.XElement)">
            <summary>
            构造函数
            </summary>
            <param name="xElement">XElement</param>
        </member>
        <member name="M:Tunynet.Common.ApplicationConfig.Initialize(Autofac.ContainerBuilder)">
            <summary>
            应用初始化运行环境（每次站点启动时DI容器构建前调用）
            </summary>
            <remarks>
            用于注册组件、解析配置文件，不可使用DI容器解析对象因为此时尚未构建
            </remarks>
            <param name="containerBuilder">DI容器构建器(autofac)</param>
        </member>
        <member name="M:Tunynet.Common.ApplicationConfig.Load">
            <summary>
            加载应用
            </summary>
            <remarks>用于应用预启动，可做加载基础数据等操作</remarks>
        </member>
        <member name="P:Tunynet.Common.ApplicationConfig.ApplicationElement">
            <summary>
            ApplicationConfig的根节点
            </summary>
        </member>
        <member name="P:Tunynet.Common.ApplicationConfig.ApplicationName">
            <summary>
            应用名称
            </summary>
        </member>
        <member name="P:Tunynet.Common.ApplicationConfig.ApplicationId">
            <summary>
            ApplicationId
            </summary>
        </member>
        <member name="P:Tunynet.Common.ApplicationConfig.ApplicationKey">
            <summary>
            ApplicationKey
            </summary>
        </member>
        <member name="P:Tunynet.Common.ApplicationConfig.ApplicationType">
            <summary>
            Application类型
            </summary>
        </member>
        <member name="T:Tunynet.Common.ApplicationInPresentAreaInstallation">
            <summary>
            应用在呈现区域安装记录实体
            </summary>
        </member>
        <member name="P:Tunynet.Common.ApplicationInPresentAreaInstallation.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:Tunynet.Common.ApplicationInPresentAreaInstallation.OwnerId">
             <summary>
            呈现区域实例拥有者Id
             </summary>
        </member>
        <member name="P:Tunynet.Common.ApplicationInPresentAreaInstallation.ApplicationId">
             <summary>
            应用程序Id
             </summary>
        </member>
        <member name="P:Tunynet.Common.ApplicationInPresentAreaInstallation.PresentAreaKey">
             <summary>
            呈现区域标识
             </summary>
        </member>
        <member name="T:Tunynet.Common.ApplicationInPresentAreaSetting">
            <summary>
            应用的呈现区域设置实体
            </summary>
        </member>
        <member name="P:Tunynet.Common.ApplicationInPresentAreaSetting.Id">
             <summary>
            Id
             </summary>
        </member>
        <member name="P:Tunynet.Common.ApplicationInPresentAreaSetting.ApplicationId">
             <summary>
            应用Id
             </summary>
        </member>
        <member name="P:Tunynet.Common.ApplicationInPresentAreaSetting.PresentAreaKey">
             <summary>
            呈现区域标识
             </summary>
        </member>
        <member name="P:Tunynet.Common.ApplicationInPresentAreaSetting.IsBuiltIn">
             <summary>
            是否为呈现区域内置应用，内置应用默认创建，并且不允许卸载
             </summary>
        </member>
        <member name="P:Tunynet.Common.ApplicationInPresentAreaSetting.IsAutoInstall">
             <summary>
            是否在呈现区域自动安装
             </summary>
        </member>
        <member name="P:Tunynet.Common.ApplicationInPresentAreaSetting.IsGenerateData">
             <summary>
            应用在该呈现区域是否产生数据
             </summary>
        </member>
        <member name="T:Tunynet.Common.ApplicationService">
            <summary>
            应用业务逻辑
            </summary>
        </member>
        <member name="M:Tunynet.Common.ApplicationService.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Tunynet.Common.ApplicationService.#ctor(Tunynet.Repositories.IRepository{Tunynet.Common.ApplicationModel},Tunynet.Repositories.IRepository{Tunynet.Common.ApplicationInPresentAreaSetting},Tunynet.Common.IApplicationInPresentAreaInstallationRepository,System.Func{System.Int32,Tunynet.Common.ApplicationConfig})">
            <summary>
            可设置repository的构造函数（主要用于测试用例）
            </summary>
        </member>
        <member name="M:Tunynet.Common.ApplicationService.GetAll(System.Nullable{System.Boolean})">
            <summary>
            获取Application集合
            </summary>
            <param name="onlyIsEnabled">仅启用的应用</param>
            <returns>返回满足条件的应用集合</returns>
        </member>
        <member name="M:Tunynet.Common.ApplicationService.Get(System.Int32)">
            <summary>
            依据ApplicationId获取应用
            </summary>
            <param name="applicationId">应用Id</param>
        </member>
        <member name="M:Tunynet.Common.ApplicationService.Get(System.String)">
            <summary>
            依据ApplicationKey获取应用
            </summary>
            <param name="applicationKey">applicationKey</param>
        </member>
        <member name="M:Tunynet.Common.ApplicationService.SetStatus(System.Int32,System.Boolean)">
            <summary>
            设置应用启用禁用状态
            </summary>
            <param name="applicationId">applicationId</param>
            <param name="isEnabled">是否启用</param>
            <remarks>设置成功返回true，设置失败返回false</remarks>
        </member>
        <member name="M:Tunynet.Common.ApplicationService.Install(System.String,System.Int64,System.Int32)">
            <summary>
            为呈现区域实例安装应用
            </summary>
            <param name="presentAreaKey">呈现区域标识</param>
            <param name="ownerId">呈现区域实例拥有者Id</param>
            <param name="applicationId">applicationId</param>
            <returns>安装成功返回true，安装失败返回false</returns>
        </member>
        <member name="M:Tunynet.Common.ApplicationService.UnInstall(System.String,System.Int64,System.Int32)">
            <summary>
            为呈现区域实例卸载应用
            </summary>
            <remarks>
            <list type="bullet">
                <item>呈现区域的内置应用不允许移除</item>
                <item>未安装的应用移除失败</item>
            </list>
            </remarks>
            <param name="presentAreaKey">呈现区域标识</param>
            <param name="ownerId">呈现区域实例拥有者Id</param>
            <param name="applicationId">applicationId</param>
            <returns>卸载成功返回true，卸载失败返回false</returns>
        </member>
        <member name="M:Tunynet.Common.ApplicationService.InstallApplicationsOfPresentAreaOwner(System.String,System.Int64)">
            <summary>
            创建呈现区域实例时，安装该表现区域自动安装的应用
            </summary>
            <param name="presentAreaKey">呈现区域标识</param>
            <param name="ownerId">呈现区域实例拥有者Id</param>
        </member>
        <member name="M:Tunynet.Common.ApplicationService.DeleteApplicationsOfPresentAreaOwner(System.String,System.Int64)">
            <summary>
            删除呈现区域实例时清除应用相关的内容
            </summary>
            <param name="presentAreaKey">呈现区域标识</param>
            <param name="ownerId">呈现区域实例拥有者Id</param>
        </member>
        <member name="M:Tunynet.Common.ApplicationService.IsInstalled(System.String,System.Int64,System.Int32)">
            <summary>
            判断Owner是否安装过此应用
            </summary>
            <param name="presentAreaKey">呈现区域标识</param>
            <param name="ownerId">呈现区域实例拥有者Id</param>
            <param name="applicationId">applicationId</param>
            <returns>已经安装返回true，未安装返回false</returns>
        </member>
        <member name="M:Tunynet.Common.ApplicationService.IsAvailable(System.String,System.Int32)">
            <summary>
            判断某呈现区域是否可以使用此应用
            </summary>
            <param name="presentAreaKey">呈现区域标识</param>
            <param name="applicationId">applicationId</param>
            <returns>可以使用返回true，不能使用返回false</returns>
        </member>
        <member name="M:Tunynet.Common.ApplicationService.IsBuiltIn(System.String,System.Int32)">
            <summary>
            判断应用在某呈现区域是否内置应用
            </summary>
            <param name="presentAreaKey">呈现区域标识</param>
            <param name="applicationId">applicationId</param>
            <returns>内置应用返回true，否则返回false</returns>
        </member>
        <member name="M:Tunynet.Common.ApplicationService.GetBuiltInApplicationIds(System.String)">
            <summary>
            获取呈现区域内置ApplicationId
            </summary>
            <param name="presentAreaKey">呈现区域标识</param>
            <returns>返回该呈现区域的所有内置应用的ApplicationId集合</returns>
        </member>
        <member name="M:Tunynet.Common.ApplicationService.GetAutomaticInstalledApplicationIds(System.String)">
            <summary>
            获取呈现区域自动安装的ApplicationId
            </summary>
            <remarks>
            包括IsBuiltIn=true的应用
            </remarks>
            <param name="presentAreaKey">呈现区域标识</param>
            <returns>返回该呈现区域的所有已经安装的ApplicationId集合</returns>
        </member>
        <member name="M:Tunynet.Common.ApplicationService.GetInstalledApplicationsOfOwner(System.String,System.Int64)">
            <summary>
            获取拥有者已安装的应用列表
            </summary>
            <param name="presentAreaKey">呈现区域标识</param>
            <param name="ownerId">拥有者ID</param>
            <returns>应用列表</returns>
        </member>
        <member name="M:Tunynet.Common.ApplicationService.DeleteUser(System.Int64,System.String,System.Boolean)">
            <summary>
            删除用户在应用中的数据
            </summary>
            <param name="userId">用户Id</param>
            <param name="takeOverUserName">用于接管删除用户时不能删除的内容(例如：用户创建的群组)</param>
            <param name="isTakeOver">是否接管被删除用户可被接管的内容</param>
        </member>
        <member name="M:Tunynet.Common.ApplicationService.GetCacheKey_AllApplicationBases">
            <summary>
            所有ApplicationBase的CacheKey
            </summary>        
        </member>
        <member name="T:Tunynet.Common.ApplicationInPresentAreaInstallationRepository">
            <summary>
            ApplicationInPresentAreaInstallation仓储
            </summary>
        </member>
        <member name="T:Tunynet.Common.IApplicationInPresentAreaInstallationRepository">
            <summary>
            ApplicationInPresentAreaInstallation仓储接口
            </summary>
        </member>
        <member name="M:Tunynet.Common.IApplicationInPresentAreaInstallationRepository.Fetch(System.String,System.Int64,System.Int32)">
            <summary>
            依据presentAreaKey、ownerId、applicationId获取对应的ApplicationInPresentAreaInstallation
            </summary>
            <param name="presentAreaKey">呈现区域标识</param>
            <param name="ownerId">呈现区域实例拥有者Id</param>
            <param name="applicationId">applicationId</param>
        </member>
        <member name="M:Tunynet.Common.IApplicationInPresentAreaInstallationRepository.GetInstalledApplicationIds(System.String,System.Int64)">
            <summary>
            获取呈现区域实例拥有者已安装的ApplicationId列表
            </summary>
            <param name="presentAreaKey">区域区域Id</param>
            <param name="ownerId">呈现区域实例拥有者Id</param>
            <returns>返回在呈现区域安装的应用Id集合</returns>
        </member>
        <member name="M:Tunynet.Common.ApplicationInPresentAreaInstallationRepository.Fetch(System.String,System.Int64,System.Int32)">
            <summary>
            依据presentAreaKey、ownerId、applicationId获取对应的ApplicationInPresentAreaInstallation
            </summary>
            <param name="presentAreaKey">呈现区域标识</param>
            <param name="ownerId">呈现区域实例拥有者Id</param>
            <param name="applicationId">applicationId</param>
        </member>
        <member name="M:Tunynet.Common.ApplicationInPresentAreaInstallationRepository.GetInstalledApplicationIds(System.String,System.Int64)">
            <summary>
            获取呈现区域实例拥有者已安装的ApplicationId列表
            </summary>
            <param name="presentAreaKey">区域区域Id</param>
            <param name="ownerId">呈现区域实例拥有者Id</param>
            <returns>返回在呈现区域安装的应用Id集合</returns>
        </member>
        <member name="T:Tunynet.Common.Area">
            <summary>
            地区实体类
            </summary>
        </member>
        <member name="M:Tunynet.Common.Area.New">
            <summary>
            新建实体时使用
            </summary>
        </member>
        <member name="P:Tunynet.Common.Area.AreaCode">
             <summary>
            地区编码
             </summary>
        </member>
        <member name="P:Tunynet.Common.Area.ParentCode">
             <summary>
            父级地区编码
             </summary>
        </member>
        <member name="P:Tunynet.Common.Area.Name">
             <summary>
            地区名称
             </summary>
        </member>
        <member name="P:Tunynet.Common.Area.PostCode">
             <summary>
            邮政编码
             </summary>
        </member>
        <member name="P:Tunynet.Common.Area.DisplayOrder">
             <summary>
            排序序号
             </summary>
        </member>
        <member name="P:Tunynet.Common.Area.Depth">
             <summary>
            深度
             </summary>
        </member>
        <member name="P:Tunynet.Common.Area.ChildCount">
             <summary>
            子地区个数
             </summary>
        </member>
        <member name="P:Tunynet.Common.Area.Children">
            <summary>
            子地区列表
            </summary>
        </member>
        <member name="T:Tunynet.Common.AreaService">
            <summary>
            地区业务逻辑类
            </summary>
        </member>
        <member name="M:Tunynet.Common.AreaService.#ctor">
            <summary>
            构造器方法
            </summary>
        </member>
        <member name="M:Tunynet.Common.AreaService.#ctor(Tunynet.Common.Repositories.IAreaRepository)">
            <summary>
            构造器方法
            </summary>
            <param name="areaRepository"></param>
        </member>
        <member name="M:Tunynet.Common.AreaService.Create(Tunynet.Common.Area)">
            <summary>
            添加地区
            </summary>
        </member>
        <member name="M:Tunynet.Common.AreaService.Update(Tunynet.Common.Area)">
            <summary>
            更新地区
            </summary>
            <param name="area">要更新的地区</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.AreaService.Delete(System.String)">
            <summary>
            删除地区
            </summary>
            <param name="areaCode">地区编码</param>
        </member>
        <member name="M:Tunynet.Common.AreaService.Get(System.String)">
            <summary>
            获取地区统计信息
            </summary>
        </member>
        <member name="M:Tunynet.Common.AreaService.GetRoots">
            <summary>
            获取顶级地区集合
            </summary>
        </member>
        <member name="M:Tunynet.Common.AreaService.GetDescendants(System.String)">
            <summary>
            获取后代地区
            </summary>
            <param name="parentAreaCode">父级地区编码</param>
        </member>
        <member name="M:Tunynet.Common.AreaService.IsChildArea(System.String,System.String)">
            <summary>
            判断地区是否父级地区
            </summary>
            <param name="area"></param>
            <param name="parentAreaCode"></param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.AreaService.GetAllParentAreas(System.String)">
            <summary>
            获取所有父级地区
            </summary>
            <param name="areaCode"></param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.AreaService.RecursiveGetAllParentArea(Tunynet.Common.Area,System.Collections.Generic.List{Tunynet.Common.Area}@)">
            <summary>
            获取所有的父级地区
            </summary>
            <param name="area"></param>
            <param name="areas"></param>
        </member>
        <member name="T:Tunynet.Common.AreaSettings">
            <summary>
            站点地区设置
            </summary>
        </member>
        <member name="P:Tunynet.Common.AreaSettings.AreaLevel">
            <summary>
            默认使用地区的层级
            </summary>
            <remarks>1-国家级、2-省级（直辖市）、3-市级、4-县级</remarks>
        </member>
        <member name="P:Tunynet.Common.AreaSettings.RootAreaCode">
            <summary>
            地区的根地区Code
            </summary>
        </member>
        <member name="T:Tunynet.Common.Repositories.AreaRepository">
            <summary>
            地区的数据访问类
            </summary>
        </member>
        <member name="T:Tunynet.Common.Repositories.IAreaRepository">
            <summary>
            地区访问的借口
            </summary>
        </member>
        <member name="M:Tunynet.Common.Repositories.IAreaRepository.Update(Tunynet.Common.Area)">
            <summary>
            更新地区
            </summary>
            <param name="area">地区</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.IAreaRepository.Get(System.String)">
            <summary>
            获取地区
            </summary>
            <param name="areaCode">地区编码</param>
            <returns>地区</returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.IAreaRepository.GetRoots">
            <summary>
            获取根级地区列表
            </summary>
            <returns>根级地区列表</returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.IAreaRepository.GetDescendants(System.String)">
            <summary>
            获取某一地区的所有后代地区
            </summary>
            <param name="areaCode"></param>
            <returns>所有后代地区</returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.IAreaRepository.Insert(Tunynet.Common.Area)">
            <summary>
            创建地区
            </summary>
            <param name="area">地区</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.IAreaRepository.Delete(System.String)">
            <summary>
            删除地区
            </summary>
            <param name="areaCode">地区编码</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.AreaRepository.CreateDAO">
            <summary>
            默认Database实例
            </summary>
        </member>
        <member name="M:Tunynet.Common.Repositories.AreaRepository.Insert(Tunynet.Common.Area)">
            <summary>
            插入地区数据
            </summary>
            <param name="area"></param>
        </member>
        <member name="M:Tunynet.Common.Repositories.AreaRepository.Update(Tunynet.Common.Area)">
            <summary>
            更新子节点信息
            </summary>
            <param name="area">要更新的地区实体</param>
            <returns>更新之后的实体</returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.AreaRepository.Delete(System.String)">
            <summary>
            删除地区点
            </summary>
            <param name="areaCode">地区编码</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.AreaRepository.Get(System.String)">
            <summary>
            获取某一地区
            </summary>
            <param name="areaCode">地区编码</param>
            <returns>地区实体</returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.AreaRepository.GetDescendants(System.String)">
            <summary>
            获取所有子地区
            </summary>
        </member>
        <member name="M:Tunynet.Common.Repositories.AreaRepository.GetRoots">
            <summary>
            获取根地区
            </summary>
            <returns>根地区列表</returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.AreaRepository.GetAreaDictionary">
            <summary>
            获取地区的字典类型
            </summary>
            <returns>地区的字典类型</returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.AreaRepository.RecursiveGetAllAreas(Tunynet.Common.Area,System.Collections.Generic.Dictionary{System.String,Tunynet.Common.Area}@)">
            <summary>
            递归获取parentArea所有子Area
            </summary>
            <param name="parentArea">父地区</param>
            <param name="allChildAreas">递归获取的所有子地区</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.AreaRepository.GetAllAreas">
            <summary>
            获取全部的地区的方法
            </summary>
            <returns>所有的地区</returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.AreaRepository.Organize(System.Collections.Generic.List{Tunynet.Common.Area},System.Int32)">
            <summary>
            生成类别深度信息并对类别进行计数统计
            </summary>
        </member>
        <member name="M:Tunynet.Common.Repositories.AreaRepository.GetCacheKey_AreaDictionary">
            <summary>
            获取地区的地点集合的cachekey
            </summary>
            <returns></returns>
        </member>
        <member name="P:Tunynet.Common.Repositories.AreaRepository.RealTimeCacheHelper">
            <summary>
            缓存设置
            </summary>
        </member>
        <member name="T:Tunynet.Common.Attachment">
            <summary>
            附件实体
            </summary>
        </member>
        <member name="M:Tunynet.Common.Attachment.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Tunynet.Common.Attachment.New">
            <summary>
            初始化属性默认值
            </summary>
        </member>
        <member name="M:Tunynet.Common.Attachment.#ctor(System.Web.HttpPostedFileBase,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="postedFile"></param>
            <param name="contentType">指定contentType，会优先采用此contentType</param>
        </member>
        <member name="M:Tunynet.Common.Attachment.#ctor(System.Web.HttpPostedFile,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="postedFile"></param>
            <param name="contentType">指定contentType，会优先采用此contentType</param>
        </member>
        <member name="M:Tunynet.Common.Attachment.#ctor(System.IO.Stream,System.String,System.String)">
            <summary>
            构造器
            </summary>
            <param name="httpWebResponse"></param>
            <param name="friendlyFileName"></param>
        </member>
        <member name="M:Tunynet.Common.Attachment.SetIP(System.String)">
            <summary>
            在类外为IP赋值
            </summary>
            <param name="ip"></param>
        </member>
        <member name="M:Tunynet.Common.Attachment.GetOriginalFileName">
            <summary>
            获取附件原始文件名称
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Attachment.GetRelativePath">
            <summary>
            获取附件存储的相对路径
            </summary>
        </member>
        <member name="M:Tunynet.Common.Attachment.GenerateFileName(System.String)">
            <summary>
            生成随机文件名
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Attachment.GenerateFileName">
            <summary>
            生成随机文件名
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Attachment.GetMediaType(System.String)">
            <summary>
            依据MIME获取MediaType
            </summary>
            <param name="contentType">附件MIME类型</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Attachment.CheckImageInfo(System.IO.Stream)">
            <summary>
            获取图片附件的宽度和高度
            </summary>
        </member>
        <member name="P:Tunynet.Common.Attachment.AttachmentId">
             <summary>
            Id
             </summary>
        </member>
        <member name="P:Tunynet.Common.Attachment.AssociateId">
             <summary>
            附件关联Id（例如：博文Id、帖子Id）
             </summary>
        </member>
        <member name="P:Tunynet.Common.Attachment.OwnerId">
             <summary>
            拥有者Id
             </summary>
        </member>
        <member name="P:Tunynet.Common.Attachment.TenantTypeId">
             <summary>
            租户类型Id
             </summary>
        </member>
        <member name="P:Tunynet.Common.Attachment.UserId">
             <summary>
            附件上传人UserId
             </summary>
        </member>
        <member name="P:Tunynet.Common.Attachment.UserDisplayName">
             <summary>
            附件上传人名称
             </summary>
        </member>
        <member name="P:Tunynet.Common.Attachment.FileName">
             <summary>
            实际存储文件名称
             </summary>
        </member>
        <member name="P:Tunynet.Common.Attachment.FriendlyFileName">
             <summary>
            文件显示名称
             </summary>
        </member>
        <member name="P:Tunynet.Common.Attachment.ContentType">
             <summary>
            附件MIME类型
             </summary>
        </member>
        <member name="P:Tunynet.Common.Attachment.FileLength">
             <summary>
            文件大小
             </summary>
        </member>
        <member name="P:Tunynet.Common.Attachment.Height">
             <summary>
            图片类型附件的高度（单位:px）
             </summary>
        </member>
        <member name="P:Tunynet.Common.Attachment.Width">
             <summary>
            图片类型附件的高度（单位:px）
             </summary>
        </member>
        <member name="P:Tunynet.Common.Attachment.Price">
             <summary>
            售价（积分）
             </summary>
        </member>
        <member name="P:Tunynet.Common.Attachment.Password">
             <summary>
            下载密码
             </summary>
        </member>
        <member name="P:Tunynet.Common.Attachment.IP">
             <summary>
            附件上传人IP
             </summary>
        </member>
        <member name="P:Tunynet.Common.Attachment.DateCreated">
             <summary>
            创建日期
             </summary>
        </member>
        <member name="P:Tunynet.Common.Attachment.MediaType">
            <summary>
            附件类型（<seealso cref="T:Tunynet.Common.MediaType"/>）
            </summary>
        </member>
        <member name="P:Tunynet.Common.Attachment.DownloadCount">
            <summary>
            下载计数
            </summary>
        </member>
        <member name="P:Tunynet.Common.Attachment.FriendlyFileLength">
            <summary>
            友好的附件大小信息
            </summary>
        </member>
        <member name="T:Tunynet.Common.AttachmentDownloadRecord">
            <summary>
            附件下载记录
            </summary>
        </member>
        <member name="M:Tunynet.Common.AttachmentDownloadRecord.New(Tunynet.Common.Attachment)">
            <summary>
            实例化下载记录对象
            </summary>
            <param name="attachment">附件实体（用来为下载记录提供一些信息）</param>
            <returns></returns>
        </member>
        <member name="P:Tunynet.Common.AttachmentDownloadRecord.Id">
             <summary>
            Id
             </summary>
        </member>
        <member name="P:Tunynet.Common.AttachmentDownloadRecord.AttachmentId">
             <summary>
            附件Id
             </summary>
        </member>
        <member name="P:Tunynet.Common.AttachmentDownloadRecord.AssociateId">
             <summary>
            附件关联Id（例如：博文Id、帖子Id）
             </summary>
        </member>
        <member name="P:Tunynet.Common.AttachmentDownloadRecord.OwnerId">
             <summary>
            拥有者Id
             </summary>
        </member>
        <member name="P:Tunynet.Common.AttachmentDownloadRecord.TenantTypeId">
             <summary>
            租户类型Id
             </summary>
        </member>
        <member name="P:Tunynet.Common.AttachmentDownloadRecord.UserId">
             <summary>
            UserId
             </summary>
        </member>
        <member name="P:Tunynet.Common.AttachmentDownloadRecord.UserDisplayName">
             <summary>
            UserDisplayName
             </summary>
        </member>
        <member name="P:Tunynet.Common.AttachmentDownloadRecord.Price">
             <summary>
            消费的积分
             </summary>
        </member>
        <member name="P:Tunynet.Common.AttachmentDownloadRecord.LastDownloadDate">
             <summary>
            最近下载日期
             </summary>
        </member>
        <member name="P:Tunynet.Common.AttachmentDownloadRecord.DownloadDate">
             <summary>
            下载日期
             </summary>
        </member>
        <member name="P:Tunynet.Common.AttachmentDownloadRecord.FromUrl">
             <summary>
            下载附件时页面的URL
             </summary>
        </member>
        <member name="P:Tunynet.Common.AttachmentDownloadRecord.IP">
             <summary>
            附件下载人IP
             </summary>
        </member>
        <member name="T:Tunynet.Common.AttachmentDownloadService">
            <summary>
            下载记录业务逻辑类
            </summary>
        </member>
        <member name="M:Tunynet.Common.AttachmentDownloadService.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Tunynet.Common.AttachmentDownloadService.#ctor(Tunynet.Common.IAttachmentDownloadRepository,Tunynet.Repositories.IRepository{Tunynet.Common.Attachment})">
            <summary>
            可设置repository的构造函数（主要用于测试用例）
            </summary>
        </member>
        <member name="M:Tunynet.Common.AttachmentDownloadService.Create(System.Int64,System.Int64)">
            <summary>
            创建下载记录
            </summary>
            <param name="userId">下载用户UserId</param>
            <param name="attachmentId">附件Id</param>
            <returns>创建成功返回true，否则返回false</returns>
        </member>
        <member name="M:Tunynet.Common.AttachmentDownloadService.IsDownloaded(System.Int64,System.Int64)">
            <summary>
            用户是否已经下载某个附件
            </summary>
            <param name="userId">下载用户UserId</param>
            <param name="attachmentId">附件Id</param>
            <returns>曾经下载过返回true，否则返回false</returns>
        </member>
        <member name="M:Tunynet.Common.AttachmentDownloadService.GetTopsByAttachmentId(System.Int32,System.Int32)">
            <summary>
            获取附件的前topNumber条下载记录
            </summary>
            <param name="attachmentID">附件Id</param>
            <param name="topNumber">获取记录条数</param>
        </member>
        <member name="M:Tunynet.Common.AttachmentDownloadService.GetsByAttachmentId(System.Int32,System.Int32)">
            <summary>
            获取附件的下载记录分页显示
            </summary>
            <param name="attachmentID">附件Id</param>
            <param name="pageIndex">页码</param>
        </member>
        <member name="M:Tunynet.Common.AttachmentDownloadService.GetTopsByAssociateId(System.Int32,System.Int32)">
            <summary>
            获取附件依附对象的前topNumber条下载记录
            </summary>
            <param name="associateId">依附对象Id</param>
            <param name="topNumber">获取记录条数</param>
        </member>
        <member name="M:Tunynet.Common.AttachmentDownloadService.GetsByAssociateId(System.Int32,System.Int32)">
            <summary>
            获取附件依附对象的下载记录分页显示
            </summary>
            <param name="associateId">依附对象Id</param>
            <param name="pageIndex">页码</param>
        </member>
        <member name="M:Tunynet.Common.AttachmentDownloadService.GetsByUserId(System.Int32,System.Int32,System.Boolean)">
            <summary>
            获取用户的下载记录分页显示
            </summary>
            <param name="userId">下载用户UserId</param>
            <param name="pageIndex">页码</param>
            <param name="needToBuy">是否需要购买</param>
        </member>
        <member name="M:Tunynet.Common.AttachmentDownloadService.GetsByOwnerId(System.Int32,System.Int32,System.Boolean)">
            <summary>
            获取拥有者附件的下载记录分页显示
            </summary>
            <param name="ownerId">附件拥有者Id</param>
            <param name="pageIndex">页码</param>
            <param name="needToBuy">是否需要够买</param>
        </member>
        <member name="T:Tunynet.Common.MediaType">
            <summary>
            附件媒体类型
            </summary>
        </member>
        <member name="F:Tunynet.Common.MediaType.Image">
            <summary>
            图片
            </summary>
        </member>
        <member name="F:Tunynet.Common.MediaType.Video">
            <summary>
            视频
            </summary>
        </member>
        <member name="F:Tunynet.Common.MediaType.Flash">
            <summary>
            Flash
            </summary>
        </member>
        <member name="F:Tunynet.Common.MediaType.Audio">
            <summary>
            音乐
            </summary>
        </member>
        <member name="F:Tunynet.Common.MediaType.Document">
            <summary>
            文档
            </summary>
        </member>
        <member name="F:Tunynet.Common.MediaType.Compressed">
            <summary>
            压缩包
            </summary>
        </member>
        <member name="F:Tunynet.Common.MediaType.Other">
            <summary>
            其他类型
            </summary>
        </member>
        <member name="T:Tunynet.Common.AttachmentService`1">
            <summary>
            附件业务逻辑类
            </summary>
            <typeparam name="T">附件实体类</typeparam>
        </member>
        <member name="M:Tunynet.Common.AttachmentService`1.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="tenantTypeId">租户类型Id</param>
        </member>
        <member name="M:Tunynet.Common.AttachmentService`1.#ctor(Tunynet.Common.IAttachmentRepository{`0},Tunynet.Common.Configuration.TenantAttachmentSettings,Tunynet.FileStore.IStoreProvider)">
            <summary>
            可设置repository的构造函数（主要用于测试用例）
            </summary>
            <param name="attachmentRepository">附件仓储</param>
            <param name="tenantAttachmentSettings">租户附件设置</param>
            <param name="storeProvider">文件存储Provider</param>
        </member>
        <member name="M:Tunynet.Common.AttachmentService`1.Create(`0,System.IO.Stream)">
            <summary>
            创建附件
            </summary>
            <param name="attachment">附件</param>
            <param name="contentStream">文件流</param>
        </member>
        <member name="M:Tunynet.Common.AttachmentService`1.Rename(System.Int64,System.String)">
            <summary>
            附件重新命名（修改FriendlyFileName）
            </summary>
            <param name="attachmentId">附件Id</param>
            <param name="newFriendlyFileName">新附件名</param>
        </member>
        <member name="M:Tunynet.Common.AttachmentService`1.UpdatePrice(System.Int64,System.Int32)">
            <summary>
            附件重新调整售价（修改Price）
            </summary>
            <param name="attachmentId">附件Id</param>
            <param name="price">新售价</param>
        </member>
        <member name="M:Tunynet.Common.AttachmentService`1.Delete(System.Int64)">
            <summary>
            删除附件
            </summary>
            <param name="attachmentId">附件Id</param>
        </member>
        <member name="M:Tunynet.Common.AttachmentService`1.Delete(`0)">
            <summary>
            删除附件
            </summary>
            <param name="attachment">附件</param>
        </member>
        <member name="M:Tunynet.Common.AttachmentService`1.DeletesByAssociateId(System.Int64)">
            <summary>
            删除AssociateId相关的附件
            </summary>
            <param name="associateId">附件关联Id（例如：博文Id、帖子Id）</param>
        </member>
        <member name="M:Tunynet.Common.AttachmentService`1.DeletesByOwnerId(System.Int64)">
            <summary>
            删除OwnerId相关的附件
            </summary>
            <param name="ownerId">拥有者Id</param>
        </member>
        <member name="M:Tunynet.Common.AttachmentService`1.DeletesByUserId(System.Int64)">
            <summary>
            删除UserId相关的附件
            </summary>
            <param name="userId">上传者Id</param>
        </member>
        <member name="M:Tunynet.Common.AttachmentService`1.DeleteStoredFile(`0)">
            <summary>
            删除文件系统中的文件
            </summary>
            <param name="attachment">附件</param>
        </member>
        <member name="M:Tunynet.Common.AttachmentService`1.CloneForUser(System.Int64,System.Int64)">
            <summary>
            为指定用户生成指定附件的拷贝
            </summary>
            <param name="attachmentId">指定附件的id</param>
            <param name="userId">指定用户的id</param>
            <returns>新附件实体</returns>
        </member>
        <member name="M:Tunynet.Common.AttachmentService`1.CloneForUser(`0,System.Int64)">
            <summary>
            为指定用户生成指定附件的拷贝
            </summary>
            <param name="attachment">指定附件实体</param>
            <param name="userId">指定用户的id</param>
            <returns>新附件实体</returns>
        </member>
        <member name="M:Tunynet.Common.AttachmentService`1.Get(System.Int64)">
            <summary>
            依据attachmentId获取附件
            </summary>
            <param name="attachmentId">附件Id</param>
        </member>
        <member name="M:Tunynet.Common.AttachmentService`1.GetByAssociateId(System.Int64)">
            <summary>
            依据AssociateId获取单个附件（用于AssociateId与附件一对一关系）
            </summary>
            <param name="associateId">附件关联Id</param>
            <returns>附件</returns>
        </member>
        <member name="M:Tunynet.Common.AttachmentService`1.GetsByAssociateId(System.Int64)">
            <summary>
            依据AssociateId获取附件列表（用于AssociateId与附件一对多关系）
            </summary>
            <param name="associateId">附件关联Id</param>
            <returns>附件列表</returns>
        </member>
        <member name="M:Tunynet.Common.AttachmentService`1.GetsByUserId(System.Int64)">
            <summary>
            依据userId获取附件列表（用于userId与附件一对多关系）
            </summary>
            <param name="userId">附件上传人Id</param>
            <returns>附件列表</returns>
        </member>
        <member name="M:Tunynet.Common.AttachmentService`1.Gets(System.Int64,System.String)">
            <summary>
            获取拥有者的所有附件或者拥有者一种租户类型的附件
            </summary>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="ownerId">拥有者Id</param>
            <returns>附件列表</returns>
        </member>
        <member name="M:Tunynet.Common.AttachmentService`1.Gets(System.String,System.String,System.Int32)">
            <summary>
            搜索附件并分页显示
            </summary>
            <param name="tenantTypeId">附件租户类型</param>
            <param name="keyword">搜索关键词</param>
            <param name="pageIndex">当前页码</param>
            <returns>附件分页列表</returns>
        </member>
        <member name="M:Tunynet.Common.AttachmentService`1.GetDirectlyUrl(`0)">
            <summary>
            获取直连URL
            </summary>
            <param name="attachment">附件</param>
            <returns>返回可以http直连该附件的url</returns>
        </member>
        <member name="M:Tunynet.Common.AttachmentService`1.GetTemporaryAttachments(System.Int64,System.String)">
            <summary>
            获取拥有者一种租户类型的临时附件
            </summary>
            <param name="ownerId">拥有者Id</param>
            <param name="tenantTypeId">租户类型Id</param>
        </member>
        <member name="M:Tunynet.Common.AttachmentService`1.DeleteTemporaryAttachments(System.Int64,System.String)">
            <summary>
            删除拥有者的临时附件
            </summary>
            <param name="ownerId">拥有者Id</param>
            <param name="tenantTypeId">租户类型Id</param>
        </member>
        <member name="M:Tunynet.Common.AttachmentService`1.DeleteTrashTemporaryAttachments">
            <summary>
            删除垃圾临时附件
            </summary>
        </member>
        <member name="M:Tunynet.Common.AttachmentService`1.ToggleTemporaryAttachments(System.Int64,System.String,System.Int64)">
            <summary>
            把临时附件转成正常附件
            </summary>
        </member>
        <member name="P:Tunynet.Common.AttachmentService`1.StoreProvider">
            <summary>
            文件存储Provider
            </summary>
        </member>
        <member name="P:Tunynet.Common.AttachmentService`1.TenantAttachmentSettings">
            <summary>
            租户附件设置
            </summary>
        </member>
        <member name="T:Tunynet.Common.Configuration.AttachmentSettings">
            <summary>
            附件全局设置类
            </summary>
        </member>
        <member name="P:Tunynet.Common.Configuration.AttachmentSettings.MaxAttachmentLength">
            <summary>
            附件最大长度
            </summary>
        </member>
        <member name="P:Tunynet.Common.Configuration.AttachmentSettings.BatchUploadLimit">
            <summary>
            批量上传数目限制
            </summary>
        </member>
        <member name="P:Tunynet.Common.Configuration.AttachmentSettings.AllowedFileExtensions">
            <summary>
            附件允许的文件扩展名
            </summary>
        </member>
        <member name="P:Tunynet.Common.Configuration.AttachmentSettings.TemporaryAttachmentStorageDay">
            <summary>
            临时附件保留的天数
            </summary>
        </member>
        <member name="P:Tunynet.Common.Configuration.AttachmentSettings.WatermarkSettings">
            <summary>
            水印设置
            </summary>
        </member>
        <member name="P:Tunynet.Common.Configuration.AttachmentSettings.MaxImageWidth">
            <summary>
            图片最大宽度
            </summary>
        </member>
        <member name="P:Tunynet.Common.Configuration.AttachmentSettings.MaxImageHeight">
            <summary>
            图片最大高度
            </summary>
        </member>
        <member name="P:Tunynet.Common.Configuration.AttachmentSettings.InlinedImageWidth">
            <summary>
            页面呈现图片的最大宽度
            </summary>
        </member>
        <member name="P:Tunynet.Common.Configuration.AttachmentSettings.InlinedImageHeight">
            <summary>
            页面呈现图片的最大高度
            </summary>
        </member>
        <member name="P:Tunynet.Common.Configuration.AttachmentSettings.ImageSizeTypes">
            <summary>
            图片尺寸类型集合
            </summary>
        </member>
        <member name="T:Tunynet.Common.Configuration.MimeTypeConfiguration">
            <summary>
            mime配置
            </summary>
        </member>
        <member name="M:Tunynet.Common.Configuration.MimeTypeConfiguration.GetMimeType(System.String)">
            <summary>
            通过filename获取mime
            </summary>
        </member>
        <member name="M:Tunynet.Common.Configuration.MimeTypeConfiguration.GetExtension(System.String)">
            <summary>
            通过mimeType获取文件扩展名
            </summary>
        </member>
        <member name="M:Tunynet.Common.Configuration.MimeTypeConfiguration.GetImageExtensions">
            <summary>
            获取所有是图片的后缀名集合
            </summary>
        </member>
        <member name="P:Tunynet.Common.Configuration.MimeTypeConfiguration.Extensions">
            <summary>
            扩展名集合
            </summary>
        </member>
        <member name="T:Tunynet.Common.Configuration.TenantAttachmentSettings">
            <summary>
            租户附件配置类
            </summary>
        </member>
        <member name="M:Tunynet.Common.Configuration.TenantAttachmentSettings.#ctor(System.Xml.Linq.XElement)">
            <summary>
            构造器
            </summary>
            <param name="xElement">附件配置节点</param>
        </member>
        <member name="M:Tunynet.Common.Configuration.TenantAttachmentSettings.GetRegisteredSettings(System.String)">
            <summary>
            获取注册的TenantAttachmentSettings
            </summary>
            <param name="tenantTypeId">租户类型Id</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Configuration.TenantAttachmentSettings.GetAll">
            <summary>
            获取所有注册的TenantAttachmentSettings
            </summary>
            <returns>TenantAttachmentSettings集合</returns>
        </member>
        <member name="M:Tunynet.Common.Configuration.TenantAttachmentSettings.RegisterSettings(System.Xml.Linq.XElement)">
            <summary>
            注册TenantAttachmentSettings
            </summary>
            <remarks>若xElement下有多个add节点，会同时注册多个TenantAttachmentSettings</remarks>
            <param name="xElement">附件配置节点，会据此寻找其下所有子节点add</param>
        </member>
        <member name="M:Tunynet.Common.Configuration.TenantAttachmentSettings.ValidateFileExtensions(System.String)">
            <summary>
            验证是否支持当前文件扩展名
            </summary>
            <param name="fileName">文件名（带后缀）</param>
            <returns>true-支持,false-不支持</returns>
        </member>
        <member name="M:Tunynet.Common.Configuration.TenantAttachmentSettings.ValidateFileLength(System.Int32)">
            <summary>
            验证文件大小是否超出限制
            </summary>
            <param name="contentLength">需要验证的文件大小</param>
            <returns>true-未超出限制,false-超出限制</returns>
        </member>
        <member name="P:Tunynet.Common.Configuration.TenantAttachmentSettings.StoreProviderName">
            <summary>
            文件存储功能提供者名称
            </summary>
        </member>
        <member name="P:Tunynet.Common.Configuration.TenantAttachmentSettings.TenantTypeId">
            <summary>
            租户类型Id
            </summary>
        </member>
        <member name="P:Tunynet.Common.Configuration.TenantAttachmentSettings.TenantAttachmentDirectory">
            <summary>
            租户附件目录
            </summary>
        </member>
        <member name="P:Tunynet.Common.Configuration.TenantAttachmentSettings.EnableWatermark">
            <summary>
            是否允许使用水印
            </summary>
        </member>
        <member name="P:Tunynet.Common.Configuration.TenantAttachmentSettings.ImageSizeTypes">
            <summary>
            图片尺寸类型集合
            </summary>
        </member>
        <member name="P:Tunynet.Common.Configuration.TenantAttachmentSettings.MaxImageWidth">
            <summary>
            图片最大宽度
            </summary>
        </member>
        <member name="P:Tunynet.Common.Configuration.TenantAttachmentSettings.MaxImageHeight">
            <summary>
            图片最大高度
            </summary>
        </member>
        <member name="P:Tunynet.Common.Configuration.TenantAttachmentSettings.MaxAttachmentLength">
            <summary>
            附件最大长度(单位：K)
            </summary>
        </member>
        <member name="P:Tunynet.Common.Configuration.TenantAttachmentSettings.AllowedFileExtensions">
            <summary>
            附件允许的文件扩展名
            </summary>
        </member>
        <member name="P:Tunynet.Common.Configuration.TenantAttachmentSettings.InlinedImageWidth">
            <summary>
            页面呈现图片的最大宽度
            </summary>
        </member>
        <member name="P:Tunynet.Common.Configuration.TenantAttachmentSettings.InlinedImageHeight">
            <summary>
            页面呈现图片的最大高度
            </summary>
        </member>
        <member name="T:Tunynet.Common.Configuration.WatermarkSettings">
            <summary>
            水印设置
            </summary>
        </member>
        <member name="P:Tunynet.Common.Configuration.WatermarkSettings.WatermarkType">
            <summary>
            水印类型
            </summary>
        </member>
        <member name="P:Tunynet.Common.Configuration.WatermarkSettings.WatermarkLocation">
            <summary>
            水印位置
            </summary>
        </member>
        <member name="P:Tunynet.Common.Configuration.WatermarkSettings.WatermarkText">
            <summary>
            水印文字
            </summary>
        </member>
        <member name="P:Tunynet.Common.Configuration.WatermarkSettings.WatermarkImageName">
            <summary>
            水印图片名称
            </summary>
        </member>
        <member name="P:Tunynet.Common.Configuration.WatermarkSettings.WatermarkMinWidth">
            <summary>
            添加水印的图片最小宽度(px)
            </summary>
        </member>
        <member name="P:Tunynet.Common.Configuration.WatermarkSettings.WatermarkMinHeight">
            <summary>
            添加水印的图片最小高度(px)
            </summary>
        </member>
        <member name="P:Tunynet.Common.Configuration.WatermarkSettings.WatermarkOpacity">
            <summary>
            水印不透明度
            </summary>
            <remarks>
            取值范围 0.1~1.0
            </remarks>
        </member>
        <member name="P:Tunynet.Common.Configuration.WatermarkSettings.WatermarkImageDirectory">
            <summary>
            水印图片所在目录
            </summary>
        </member>
        <member name="P:Tunynet.Common.Configuration.WatermarkSettings.WatermarkImagePhysicalPath">
            <summary>
            水印图片所在完整物理路径
            </summary>
        </member>
        <member name="T:Tunynet.Common.Configuration.WatermarkType">
            <summary>
            水印类型
            </summary>
        </member>
        <member name="F:Tunynet.Common.Configuration.WatermarkType.None">
            <summary>
            禁用水印
            </summary>
        </member>
        <member name="F:Tunynet.Common.Configuration.WatermarkType.Text">
            <summary>
            文字水印
            </summary>
        </member>
        <member name="F:Tunynet.Common.Configuration.WatermarkType.Image">
            <summary>
            图像水印
            </summary>
        </member>
        <member name="T:Tunynet.Common.ImageSizeType">
            <summary>
            图片尺寸类型
            </summary>
        </member>
        <member name="M:Tunynet.Common.ImageSizeType.#ctor">
            <summary>
            构造器
            </summary>
        </member>
        <member name="M:Tunynet.Common.ImageSizeType.#ctor(System.String,System.Drawing.Size,Tunynet.Imaging.ResizeMethod)">
            <summary>
            构造器
            </summary>
            <param name="imageSizeTypeKey">图片尺寸类型Key</param>
            <param name="size">图片尺寸</param>
            <param name="resizeMethod">缩放方式</param>
        </member>
        <member name="P:Tunynet.Common.ImageSizeType.ImageSizeTypeKey">
            <summary>
            图片尺寸类型Key
            </summary>
        </member>
        <member name="P:Tunynet.Common.ImageSizeType.Size">
            <summary>
            图片尺寸
            </summary>
        </member>
        <member name="P:Tunynet.Common.ImageSizeType.ResizeMethod">
            <summary>
            缩放方式
            </summary>
        </member>
        <member name="T:Tunynet.Common.ImageSizeTypeKeys">
            <summary>
            图片尺寸类型
            </summary>
        </member>
        <member name="M:Tunynet.Common.ImageSizeTypeKeys.Instance">
            <summary>
            创建图片尺寸类型
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.ImageSizeTypeKeys.Original">
            <summary>
            原始尺寸
            </summary>
        </member>
        <member name="M:Tunynet.Common.ImageSizeTypeKeys.Biggest">
            <summary>
            最大尺寸
            </summary>
            <remarks>建议配置为800*600，较少使用，主要用于全屏浏览</remarks>
        </member>
        <member name="M:Tunynet.Common.ImageSizeTypeKeys.Bigger">
            <summary>
            较大尺寸
            </summary>
            <remarks>建议配置为500*500，用于主内容区详细展示</remarks>
        </member>
        <member name="M:Tunynet.Common.ImageSizeTypeKeys.Big">
            <summary>
            大尺寸
            </summary>
            <remarks>建议配置为320*240，用于幻灯片展示</remarks>
        </member>
        <member name="M:Tunynet.Common.ImageSizeTypeKeys.Medium">
            <summary>
            中尺寸
            </summary>
            <remarks>建议配置为100*100，用于缩略图展示</remarks>
        </member>
        <member name="M:Tunynet.Common.ImageSizeTypeKeys.Small">
            <summary>
            小尺寸
            </summary>
            <remarks>建议配置为50*50，用于小型缩略图展示</remarks>
        </member>
        <member name="M:Tunynet.Common.ImageSizeTypeKeys.P450">
            <summary>
            宽度450，高度任意
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.ImageSizeTypeKeys.P300">
            <summary>
            宽度300，高度任意
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.ImageSizeTypeKeys.P320">
            <summary>
            宽度320，高度任意
            </summary>
            <returns></returns>
        </member>
        <member name="T:Tunynet.Common.AttachmentRepository`1">
            <summary>
            ApplicationInPresentAreaInstallation仓储
            </summary>
        </member>
        <member name="T:Tunynet.Common.IAttachmentRepository`1">
            <summary>
            ApplicationInPresentAreaInstallation仓储接口
            </summary>
        </member>
        <member name="M:Tunynet.Common.IAttachmentRepository`1.DeletesByAssociateId(System.String,System.Int64)">
            <summary>
            删除AssociateId相关的附件
            </summary>
        </member>
        <member name="M:Tunynet.Common.IAttachmentRepository`1.DeletesByUserId(System.String,System.Int64)">
            <summary>
            删除UserId相关的附件
            </summary>
            <param name="userId">上传者Id</param>
        </member>
        <member name="M:Tunynet.Common.IAttachmentRepository`1.DeletesByOwnerId(System.String,System.Int64)">
            <summary>
            删除OwnerId相关的附件
            </summary>
        </member>
        <member name="M:Tunynet.Common.IAttachmentRepository`1.GetsByAssociateId(System.String,System.Int64)">
            <summary>
            依据AssociateId获取附件列表（用于AssociateId与附件一对多关系）
            </summary>
        </member>
        <member name="M:Tunynet.Common.IAttachmentRepository`1.GetsByUserId(System.String,System.Int64)">
            <summary>
            依据userId获取附件列表（用于userId与附件一对多关系）
            </summary>
            <param name="userId">附件上传人Id</param>
            <returns>附件列表</returns>
        </member>
        <member name="M:Tunynet.Common.IAttachmentRepository`1.Gets(System.Int64,System.String)">
            <summary>
            获取拥有者的所有附件或者拥有者一种租户类型的附件
            </summary>
        </member>
        <member name="M:Tunynet.Common.IAttachmentRepository`1.Gets(System.String,System.String,System.Int32)">
            <summary>
            搜索附件并分页显示
            </summary>
        </member>
        <member name="M:Tunynet.Common.IAttachmentRepository`1.GetTemporaryAttachments(System.Int64,System.String)">
            <summary>
            获取拥有者一种租户类型的临时附件
            </summary>
        </member>
        <member name="M:Tunynet.Common.IAttachmentRepository`1.GetTrashTemporaryAttachments(System.Int32)">
            <summary>
            获取需删除的垃圾临时附件
            </summary>
            <param name="beforeDays">多少天之前的附件</param>
        </member>
        <member name="M:Tunynet.Common.IAttachmentRepository`1.DeleteTrashTemporaryAttachments(System.Int32)">
            <summary>
            删除垃圾临时附件
            </summary>
        </member>
        <member name="M:Tunynet.Common.IAttachmentRepository`1.ToggleTemporaryAttachments(System.Int64,System.String,System.Int64)">
            <summary>
            把临时附件转成正常附件
            </summary>
        </member>
        <member name="M:Tunynet.Common.AttachmentRepository`1.DeletesByAssociateId(System.String,System.Int64)">
            <summary>
            删除AssociateId相关的附件
            </summary>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="associateId">附件关联Id（例如：博文Id、帖子Id）</param>
        </member>
        <member name="M:Tunynet.Common.AttachmentRepository`1.DeletesByUserId(System.String,System.Int64)">
            <summary>
            删除UserId相关的附件
            </summary>
            <param name="userId">上传者Id</param>
        </member>
        <member name="M:Tunynet.Common.AttachmentRepository`1.DeletesByOwnerId(System.String,System.Int64)">
            <summary>
            删除OwnerId相关的附件
            </summary>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="ownerId">拥有者Id</param>
        </member>
        <member name="M:Tunynet.Common.AttachmentRepository`1.GetsByUserId(System.String,System.Int64)">
            <summary>
            依据UserId获取附件列表（用于UserId与附件一对多关系）
            </summary>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="userId">附件关联Id</param>
            <returns>附件列表</returns>
        </member>
        <member name="M:Tunynet.Common.AttachmentRepository`1.GetIdsByUserId(System.String,System.Int64)">
            <summary>
            依据UserId获取附件Id列表（用于UserId与附件一对多关系）
            </summary>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="userId">附件关联Id</param>
            <returns>附件Id列表</returns>
        </member>
        <member name="M:Tunynet.Common.AttachmentRepository`1.GetsByAssociateId(System.String,System.Int64)">
            <summary>
            依据AssociateId获取附件列表（用于AssociateId与附件一对多关系）
            </summary>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="associateId">附件关联Id</param>
            <returns>附件列表</returns>
        </member>
        <member name="M:Tunynet.Common.AttachmentRepository`1.GetIdsByAssociateId(System.String,System.Int64)">
            <summary>
            依据AssociateId获取附件Id列表（用于AssociateId与附件一对多关系）
            </summary>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="associateId">附件关联Id</param>
            <returns>附件Id列表</returns>
        </member>
        <member name="M:Tunynet.Common.AttachmentRepository`1.Gets(System.Int64,System.String)">
            <summary>
            获取拥有者的所有附件或者拥有者一种租户类型的附件
            </summary>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="ownerId">拥有者Id</param>
            <returns>附件列表</returns>
        </member>
        <member name="M:Tunynet.Common.AttachmentRepository`1.GetIdsByOwnerId(System.Int64,System.String)">
            <summary>
            获取拥有者的所有附件或者拥有者一种租户类型的附件
            </summary>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="ownerId">拥有者Id</param>
            <returns>附件Id列表</returns>
        </member>
        <member name="M:Tunynet.Common.AttachmentRepository`1.Gets(System.String,System.String,System.Int32)">
            <summary>
            搜索附件并分页显示
            </summary>
            <param name="tenantTypeId">附件租户类型</param>
            <param name="keyword">搜索关键词</param>
            <param name="pageIndex">当前页码</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.AttachmentRepository`1.GetTemporaryAttachments(System.Int64,System.String)">
            <summary>
            获取拥有者一种租户类型的临时附件
            </summary>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="ownerId">拥有者Id</param>
        </member>
        <member name="M:Tunynet.Common.AttachmentRepository`1.GetTrashTemporaryAttachments(System.Int32)">
            <summary>
            获取需删除的垃圾临时附件
            </summary>
            <param name="beforeDays">多少天之前的附件</param>
        </member>
        <member name="M:Tunynet.Common.AttachmentRepository`1.DeleteTrashTemporaryAttachments(System.Int32)">
            <summary>
            删除垃圾临时附件
            </summary>
            <param name="beforeDays">多少天之前的附件</param>
        </member>
        <member name="M:Tunynet.Common.AttachmentRepository`1.ToggleTemporaryAttachments(System.Int64,System.String,System.Int64)">
            <summary>
            把临时附件转成正常附件
            </summary>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="ownerId">拥有者Id</param>
            <param name="associateId">附件关联Id</param>
        </member>
        <member name="M:Tunynet.Common.AttachmentRepository`1.DeleteTrashDatas">
            <summary>
            删除垃圾数据
            </summary>
            <param name="serviceKey">服务标识</param>
        </member>
        <member name="T:Tunynet.Common.AttachmentDownloadRepository`1">
            <summary>
            AttachmentDownload仓储
            </summary>
        </member>
        <member name="T:Tunynet.Common.IAttachmentDownloadRepository">
            <summary>
            AttachmentDownloadRepository仓储接口
            </summary>
        </member>
        <member name="M:Tunynet.Common.IAttachmentDownloadRepository.Insert(Tunynet.Common.AttachmentDownloadRecord)">
            <summary>
            创建新的下载记录
            </summary>
            <param name="entity">下载记录实体</param>
            <returns>下载记录Id</returns>
        </member>
        <member name="M:Tunynet.Common.IAttachmentDownloadRepository.UpdateLastDownloadDate(System.Int64,System.Int64)">
            <summary>
            更新最后下载时间
            </summary>
            <param name="userId">下载用户UserId</param>
            <param name="attachmentId">附件Id</param>
        </member>
        <member name="M:Tunynet.Common.IAttachmentDownloadRepository.GetIds_AttachmentIdsByUser(System.Int64)">
            <summary>
            根据获取用户附件下载记录及附件的Id集合
            </summary>
            <param name="userId">下载用户UserId</param>
            <returns>下载记录Id和附件Id的字典集合，{key-下载记录Id:value-附件Id}</returns>
        </member>
        <member name="M:Tunynet.Common.IAttachmentDownloadRepository.GetTopsByAttachmentId(System.Int64,System.Int32)">
            <summary>
            获取附件的前topNumber条下载记录
            </summary>
            <param name="attachmentId">附件Id</param>
            <param name="topNumber">返回的记录数</param>
        </member>
        <member name="M:Tunynet.Common.IAttachmentDownloadRepository.GetsByAttachmentId(System.Int64,System.Int32)">
            <summary>
            获取附件的下载记录分页显示
            </summary>
            <param name="attachmentId">附件Id</param>
            <param name="pageIndex">页码</param>
        </member>
        <member name="M:Tunynet.Common.IAttachmentDownloadRepository.GetTopsByAssociateId(System.Int64,System.Int32)">
            <summary>
            获取附件依附对象的前topNumber条下载记录
            </summary>
            <param name="associateId">附件依附对象Id</param>
            <param name="topNumber">获取记录数</param>
        </member>
        <member name="M:Tunynet.Common.IAttachmentDownloadRepository.GetsByAssociateId(System.Int64,System.Int32)">
            <summary>
            获取附件依附对象的下载记录分页显示
            </summary>
            <param name="associateId">依附对象Id</param>
            <param name="pageIndex">页码</param>
        </member>
        <member name="M:Tunynet.Common.IAttachmentDownloadRepository.GetsByUserId(System.Int64,System.Int32,System.Boolean)">
            <summary>
            获取用户的下载记录分页显示
            </summary>
            <param name="userId">下载用户UserId</param>
            <param name="pageIndex">页码</param>
            <param name="needToBuy">是否需要购买</param>
        </member>
        <member name="M:Tunynet.Common.IAttachmentDownloadRepository.GetsByOwnerId(System.Int64,System.Int32,System.Boolean)">
            <summary>
            获取拥有者附件的下载记录分页显示
            </summary>
            <param name="ownerId">附件拥有者Id</param>
            <param name="pageIndex">页码</param>
            <param name="needToBuy">是否需要购买</param>
        </member>
        <member name="M:Tunynet.Common.AttachmentDownloadRepository`1.Insert(Tunynet.Common.AttachmentDownloadRecord)">
            <summary>
            创建新的下载记录
            </summary>
            <param name="entity">下载记录实体</param>
            <returns>下载记录Id</returns>
        </member>
        <member name="M:Tunynet.Common.AttachmentDownloadRepository`1.UpdateLastDownloadDate(System.Int64,System.Int64)">
            <summary>
            更新最后下载时间
            </summary>
            <param name="userId">下载用户UserId</param>
            <param name="attachmentId">附件Id</param>
        </member>
        <member name="M:Tunynet.Common.AttachmentDownloadRepository`1.GetIds_AttachmentIdsByUser(System.Int64)">
            <summary>
            根据获取用户附件下载记录及附件的Id集合
            </summary>
            <param name="userId">下载用户UserId</param>
        </member>
        <member name="M:Tunynet.Common.AttachmentDownloadRepository`1.GetTopsByAttachmentId(System.Int64,System.Int32)">
            <summary>
            获取附件的前topNumber条下载记录
            </summary>
            <param name="attachmentId">附件Id</param>
            <param name="topNumber">返回的记录数</param>
        </member>
        <member name="M:Tunynet.Common.AttachmentDownloadRepository`1.GetsByAttachmentId(System.Int64,System.Int32)">
            <summary>
            获取附件的下载记录分页显示
            </summary>
            <param name="attachmentId">附件Id</param>
            <param name="pageIndex">页码</param>
        </member>
        <member name="M:Tunynet.Common.AttachmentDownloadRepository`1.GetTopsByAssociateId(System.Int64,System.Int32)">
            <summary>
            获取附件依附对象的前topNumber条下载记录
            </summary>
            <param name="associateId">附件依附对象Id</param>
            <param name="topNumber">获取记录数</param>
        </member>
        <member name="M:Tunynet.Common.AttachmentDownloadRepository`1.GetsByAssociateId(System.Int64,System.Int32)">
            <summary>
            获取附件依附对象的下载记录分页显示
            </summary>
            <param name="associateId">依附对象Id</param>
            <param name="pageIndex">页码</param>
        </member>
        <member name="M:Tunynet.Common.AttachmentDownloadRepository`1.GetsByUserId(System.Int64,System.Int32,System.Boolean)">
            <summary>
            获取用户的下载记录分页显示
            </summary>
            <param name="userId">下载用户UserId</param>
            <param name="pageIndex">页码</param>
            <param name="needToBuy">是否需要购买</param>
        </member>
        <member name="M:Tunynet.Common.AttachmentDownloadRepository`1.GetsByOwnerId(System.Int64,System.Int32,System.Boolean)">
            <summary>
            获取拥有者附件的下载记录分页显示
            </summary>
            <param name="ownerId">附件拥有者Id</param>
            <param name="pageIndex">页码</param>
            <param name="needToBuy">是否需要购买</param>
        </member>
        <member name="M:Tunynet.Common.AttachmentDownloadRepository`1.GetCacheKey_RecordIds_AttachmentIds(System.Int64)">
            <summary>
            获取下载记录与附件Id集合的CacheKey
            </summary>
            <param name="userId">下载用户UserId</param>
            <returns></returns>
        </member>
        <member name="T:Tunynet.Common.AttachmentService">
            <summary>
            附件业务逻辑类
            </summary>
        </member>
        <member name="M:Tunynet.Common.AttachmentService.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="tenantTypeId">租户类型Id</param>
        </member>
        <member name="M:Tunynet.Common.AttachmentService.#ctor(Tunynet.Common.IAttachmentRepository{Tunynet.Common.Attachment},Tunynet.Common.Configuration.TenantAttachmentSettings,Tunynet.FileStore.IStoreProvider)">
            <summary>
            构造器
            </summary>
            <param name="attachmentRepository"></param>
            <param name="tenantAttachmentSettings"></param>
            <param name="storeProvider"></param>
        </member>
        <member name="T:Tunynet.Common.DeleteTrashTemporaryAttachmentsTask">
            <summary>
            清理垃圾临时附件任务
            </summary>
        </member>
        <member name="M:Tunynet.Common.DeleteTrashTemporaryAttachmentsTask.Execute(Tunynet.Tasks.TaskDetail)">
            <summary>
            任务执行的内容
            </summary>
            <param name="taskDetail">任务配置状态信息</param>
        </member>
        <member name="F:Tunynet.Common.PauseSiteSettings.isEnable">
            <summary>
            站点状态
            </summary>
        </member>
        <member name="F:Tunynet.Common.PauseSiteSettings.pausePageType">
            <summary>
            暂停页面类型
            </summary>
        </member>
        <member name="F:Tunynet.Common.PauseSiteSettings.pauseAnnouncement">
            <summary>
            暂停公告
            </summary>
        </member>
        <member name="F:Tunynet.Common.PauseSiteSettings.pauseLink">
            <summary>
            外链
            </summary>
        </member>
        <member name="T:Tunynet.Common.ISettingsManager`1">
            <summary>
            设置管理器接口
            </summary>
            <typeparam name="TSettingsEntity"></typeparam>
        </member>
        <member name="M:Tunynet.Common.ISettingsManager`1.Get">
            <summary>
            获取设置
            </summary>
            <returns>settings</returns>
        </member>
        <member name="M:Tunynet.Common.ISettingsManager`1.Save(`0)">
            <summary>
            保存设置
            </summary>
            <param name="settings">settings</param>
        </member>
        <member name="T:Tunynet.Common.Repositories.ISettingsRepository`1">
            <summary>
            设置Repository接口
            </summary>
            <typeparam name="TSettingsEntity">设置的实体类</typeparam>
        </member>
        <member name="M:Tunynet.Common.Repositories.ISettingsRepository`1.Get">
            <summary>
            获取设置
            </summary>
            <returns>settings</returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.ISettingsRepository`1.Save(`0)">
            <summary>
            保存设置
            </summary>
            <param name="settings">settings</param>
        </member>
        <member name="T:Tunynet.Common.Repositories.SettingsRepository`1">
            <summary>
            设置Repository
            </summary>
            <typeparam name="TSettingsEntity">设置的实体类</typeparam>
        </member>
        <member name="M:Tunynet.Common.Repositories.SettingsRepository`1.CreateDAO">
            <summary>
            默认Database实例
            </summary>
        </member>
        <member name="M:Tunynet.Common.Repositories.SettingsRepository`1.Get">
            <summary>
            获取设置
            </summary>
            <returns>settings</returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.SettingsRepository`1.Save(`0)">
            <summary>
            保存设置
            </summary>
            <param name="settings">settings</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.SettingsRepository`1.GetClassType">
            <summary>
            获取ClassType
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.SettingsRepository`1.Serialize(`0)">
            <summary>
            把TSettingsEntity对象转换成xml
            </summary>
            <param name="settingsEntity">被转换的对象</param>
            <returns>序列化后的xml字符串</returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.SettingsRepository`1.Deserialize(System.String)">
            <summary>
            把json的字符串反序列化成SettingsEntity对象
            </summary>
            <param name="json">被反序列化的xml字符串</param>
            <returns>反序列化后的SettingsEntity</returns>
        </member>
        <member name="P:Tunynet.Common.Repositories.SettingsRepository`1.RealTimeCacheHelper">
            <summary>
            缓存设置
            </summary>
        </member>
        <member name="T:Tunynet.Common.SettingManager`1">
            <summary>
            设置管理器
            </summary>
            <typeparam name="TSettingsEntity"></typeparam>
        </member>
        <member name="T:Tunynet.Common.DeleteTrashDataTask">
            <summary>
            清理垃圾临时附件任务
            </summary>
        </member>
        <member name="M:Tunynet.Common.DeleteTrashDataTask.Execute(Tunynet.Tasks.TaskDetail)">
            <summary>
            任务执行的内容
            </summary>
            <param name="taskDetail">任务配置状态信息</param>
        </member>
        <member name="T:Tunynet.Common.FavoriteEntity">
            <summary>
            用户收藏实体类
            </summary>
        </member>
        <member name="M:Tunynet.Common.FavoriteEntity.New">
            <summary>
            新建实体时使用
            </summary>
        </member>
        <member name="P:Tunynet.Common.FavoriteEntity.Id">
            <summary>
            标识列
            </summary>
        </member>
        <member name="P:Tunynet.Common.FavoriteEntity.TenantTypeId">
             <summary>
            租户类型Id
             </summary>
        </member>
        <member name="P:Tunynet.Common.FavoriteEntity.UserId">
             <summary>
            收藏用户Id
             </summary>
        </member>
        <member name="P:Tunynet.Common.FavoriteEntity.ObjectId">
             <summary>
            收藏对象Id
             </summary>
        </member>
        <member name="T:Tunynet.Common.FavoriteEventArgs">
            <summary>
            收藏自定义事件
            </summary>
        </member>
        <member name="M:Tunynet.Common.FavoriteEventArgs.#ctor(System.String,System.String,System.Int64)">
            <summary>
            构造器
            </summary>
            <param name="eventOperationType">事件操作类型</param>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="ownerId">收藏用户Id</param>
        </member>
        <member name="P:Tunynet.Common.FavoriteEventArgs.TenantTypeId">
             <summary>
            租户类型Id 
             </summary>
        </member>
        <member name="P:Tunynet.Common.FavoriteEventArgs.UserId">
             <summary>
            收藏用户Id 
             </summary>
        </member>
        <member name="T:Tunynet.Common.FavoriteService">
            <summary>
            收藏逻辑类
            </summary>
        </member>
        <member name="M:Tunynet.Common.FavoriteService.#ctor(System.String)">
            <summary>
            构造器方法
            </summary>
            <param name="tenantTypeId">租户类型Id</param>
        </member>
        <member name="M:Tunynet.Common.FavoriteService.#ctor(System.String,Tunynet.Common.Repositories.IFavoriteRepository)">
            <summary>
            构造器方法
            </summary>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="favoriteRepository">收藏数据访问</param>
        </member>
        <member name="M:Tunynet.Common.FavoriteService.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            构造器方法
            </summary>
            <param name="tenantTypeId">租户类型Id</param>
        </member>
        <member name="M:Tunynet.Common.FavoriteService.#ctor(System.Collections.Generic.IEnumerable{System.String},Tunynet.Common.Repositories.IFavoriteRepository)">
            <summary>
            构造器方法
            </summary>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="favoriteRepository">收藏数据访问</param>
        </member>
        <member name="M:Tunynet.Common.FavoriteService.Favorite(System.Int64,System.Int64)">
            <summary>
            添加收藏
            </summary>
            <param name="objectId">被收藏对象Id</param>
            <param name="userId">用户Id</param>
            <returns>true-收藏成功,false-收藏失败</returns>
        </member>
        <member name="M:Tunynet.Common.FavoriteService.CancelFavorite(System.Int64,System.Int64)">
            <summary>
            取消收藏
            </summary>
            <param name="userId">用户Id</param>
            <param name="objectId">被收藏对象Id</param>
            <returns>true-取消成功,false-取消失败</returns>
        </member>
        <member name="M:Tunynet.Common.FavoriteService.IsFavorited(System.Int64,System.Int64)">
            <summary>
            判断是否收藏
            </summary>
            <param name="objectId">被收藏对象Id</param>
            <param name="userId">用户Id</param>
            <returns>true-已收藏，false-未收藏</returns>
        </member>
        <member name="M:Tunynet.Common.FavoriteService.GetPagingObjectIds(System.Int64,System.Int32,System.Nullable{System.Int32})">
             <summary>
             获取收藏对象Id分页数据
             </summary>
             <param name="userId">用户Id</param>
             <param name="pageIndex">页码</param>
             <param name="pageSize">每页显示内容数</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.FavoriteService.GetPagingPartObjectIds(System.Int64,System.Int32,System.Nullable{System.Int32})">
             <summary>
             获取部分收藏对象Id分页数据
             </summary>
             <param name="userId">用户Id</param>
             <param name="pageIndex">页码</param>
             <param name="pageSize">每页显示内容数</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.FavoriteService.GetTopObjectIds(System.Int64,System.Int32)">
             <summary>
             获取前N个收藏对象Id
             </summary>
             <param name="userId">用户Id</param>
             <param name="topNumber">要获取Id的个数</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.FavoriteService.GetAllObjectIds(System.Int64)">
             <summary>
             获取全部收藏对象Id
             </summary>
             <param name="userId">用户Id</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.FavoriteService.GetUserIdsOfObject(System.Int64)">
            <summary>
            根据收藏对象获取UserId
            </summary>
            <param name="objectId">收藏对象Id</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.FavoriteService.GetTopUserIdsOfObject(System.Int64,System.Int32)">
            <summary>
            根据收藏对象获取收藏了此对象的前N个用户Id集合
            </summary>
            <param name="objectId">对象Id</param>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="topNumber">要获取记录数</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.FavoriteService.GetPagingUserIdsOfObject(System.Int64,System.Int32)">
            <summary>
            根据收藏对象获取收藏了此对象的用户Id分页集合
            </summary>
            <param name="objectId">对象Id</param>
            <param name="pageIndex">页码</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.FavoriteService.GetFollowedUserIdsOfObject(System.Int64,System.Int64)">
            <summary>
            根据收藏对象获取同样收藏此对象的关注用户
            </summary>
            <param name="objectId">对象Id</param>
            <param name="userId">当前用户的userId</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.FavoriteService.GetFavoritedUserCount(System.Int64)">
            <summary>
            获取被收藏数
            </summary>
            <param name="objectId">收藏对象Id</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.FavoriteService.GetFavorites(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            根据收藏主键集合组装收藏实体集合
            </summary>
            <param name="favoriteIds">收藏主键集合</param>
            <returns></returns>
        </member>
        <member name="T:Tunynet.Common.Repositories.FavoriteRepository">
            <summary>
            用户收藏数据访问类
            </summary>
        </member>
        <member name="T:Tunynet.Common.Repositories.IFavoriteRepository">
            <summary>
            用户收藏的接口
            </summary>
        </member>
        <member name="M:Tunynet.Common.Repositories.IFavoriteRepository.Favorite(System.Int64,System.Int64,System.String)">
            <summary>
            添加收藏
            </summary>
            <param name="objectId">被收藏对象Id</param>
            <param name="userId">用户Id</param>
            <param name="tenantTypeId">租户类型Id</param>
            <returns>true-收藏成功,false-收藏失败</returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.IFavoriteRepository.CancelFavorited(System.Int64,System.Int64,System.String)">
            <summary>
            取消收藏
            </summary>
            <param name="objectId">被收藏对象Id</param>
            <param name="userId">用户Id</param>
            <param name="tenantTypeId">租户类型Id</param>
            <returns>true-取消成功,false-取消失败</returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.IFavoriteRepository.IsFavorited(System.Int64,System.Int64,System.String)">
            <summary>
            判断是否收藏
            </summary>
            <param name="objectId">被收藏对象Id</param>
            <param name="userId">用户Id</param>
            <param name="tenantTypeId">租户类型Id</param>
            <returns>true-已收藏，false-未收藏</returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.IFavoriteRepository.GetPagingObjectIds(System.Int64,System.String,System.Int32,System.Nullable{System.Int32})">
             <summary>
             获取收藏对象Id分页数据
             </summary>
             <param name="userId">用户Id</param>
             <param name="tenantTypeId">租户类型Id</param>
             <param name="pageIndex">页码</param>
             <param name="pageSize">每页显示内容数</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.IFavoriteRepository.GetPagingPartObjectIds(System.Int64,System.Collections.Generic.IEnumerable{System.String},System.Int32,System.Nullable{System.Int32})">
             <summary>
             获取部分收藏对象Id分页数据
             </summary>
             <param name="userId">用户Id</param>
             <param name="tenantTypeId">租户类型Id</param>
             <param name="pageIndex">页码</param>
             <param name="pageSize">每页显示内容数</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.IFavoriteRepository.GetTopObjectIds(System.Int64,System.String,System.Int32)">
             <summary>
             获取前N个收藏对象Id
             </summary>
             <param name="userId">用户Id</param>
             <param name="tenantTypeId">租户类型Id</param>
             <param name="topNumber">要获取Id的个数</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.IFavoriteRepository.GetAllObjectIds(System.Int64,System.String)">
             <summary>
             获取全部收藏对象Id
             </summary>
             <param name="userId">用户Id</param>
             <param name="tenantTypeId">租户类型Id</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.IFavoriteRepository.GetUserIdsOfObject(System.Int64,System.String)">
            <summary>
            根据收藏对象获取UserId
            </summary>
            <param name="objectId">收藏对象Id</param>
            <param name="tenantTypeId">租户类型Id</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.IFavoriteRepository.GetTopUserIdsOfObject(System.Int64,System.String,System.Int32)">
            <summary>
            根据收藏对象获取收藏了此对象的前N个用户Id集合
            </summary>
            <param name="objectId">对象Id</param>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="topNumber">要获取记录数</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.IFavoriteRepository.GetPagingUserIdsOfObject(System.Int64,System.String,System.Int32)">
            <summary>
            根据收藏对象获取收藏了此对象的用户Id分页集合
            </summary>
            <param name="objectId">对象Id</param>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="pageIndex">页码</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.IFavoriteRepository.GetFollowedUserIdsOfObject(System.Int64,System.Int64,System.String)">
            <summary>
            根据收藏对象获取同样收藏此对象的关注用户
            </summary>
            <param name="objectId">对象Id</param>
            <param name="userId">当前用户的userId</param>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="pageIndex">页码</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.IFavoriteRepository.GetFavoritedUserCount(System.Int64,System.String)">
            <summary>
            获取被收藏数
            </summary>
            <param name="objectId">收藏对象Id</param>
            <param name="tenantTypeId">租户类型Id</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.IFavoriteRepository.CleanSubscribesFromObject(System.Int64)">
            <summary>
            清除某个实体的所有订阅
            </summary>
            <param name="objectId">实体ID</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.FavoriteRepository.Favorite(System.Int64,System.Int64,System.String)">
            <summary>
            添加收藏
            </summary>
            <param name="objectId">被收藏对象Id</param>
            <param name="userId">用户Id</param>
            <param name="tenantTypeId">租户类型Id</param>
            <returns>true-收藏成功,false-收藏失败</returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.FavoriteRepository.CancelFavorited(System.Int64,System.Int64,System.String)">
            <summary>
            取消收藏
            </summary>
            <param name="objectId">被收藏对象Id</param>
            <param name="userId">用户Id</param>
            <param name="tenantTypeId">租户类型Id</param>
            <returns>true-取消成功,false-取消失败</returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.FavoriteRepository.CleanSubscribesFromObject(System.Int64)">
            <summary>
            清除某个实体的所有订阅
            </summary>
            <param name="objectId">实体ID</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.FavoriteRepository.IsFavorited(System.Int64,System.Int64,System.String)">
            <summary>
            判断是否收藏
            </summary>
            <param name="objectId">被收藏对象Id</param>
            <param name="userId">用户Id</param>
            <param name="tenantTypeId">租户类型Id</param>
            <returns>true-已收藏，false-未收藏</returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.FavoriteRepository.GetPagingPartObjectIds(System.Int64,System.Collections.Generic.IEnumerable{System.String},System.Int32,System.Nullable{System.Int32})">
             <summary>
             获取部分收藏对象Id分页数据
             </summary>
             <param name="userId">用户Id</param>
             <param name="tenantTypeId">租户类型Id</param>
             <param name="pageIndex">页码</param>
             <param name="pageSize">每页显示的内容数</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.FavoriteRepository.GetPagingObjectIds(System.Int64,System.String,System.Int32,System.Nullable{System.Int32})">
             <summary>
             获取收藏对象Id分页数据
             </summary>
             <param name="userId">用户Id</param>
             <param name="tenantTypeId">租户类型Id</param>
             <param name="pageIndex">页码</param>
             <param name="pageSize">每页显示的内容数</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.FavoriteRepository.GetTopObjectIds(System.Int64,System.String,System.Int32)">
             <summary>
             获取前N个收藏对象Id
             </summary>
             <param name="userId">用户Id</param>
             <param name="tenantTypeId">租户类型Id</param>
             <param name="topNumber">要获取Id的个数</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.FavoriteRepository.GetAllObjectIds(System.Int64,System.String)">
             <summary>
             获取全部收藏对象Id
             </summary>
             <param name="userId">用户Id</param>
             <param name="tenantTypeId">租户类型Id</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.FavoriteRepository.GetUserIdsOfObject(System.Int64,System.String)">
            <summary>
            根据收藏对象获取UserId
            </summary>
            <param name="objectId">收藏对象Id</param>
            <param name="tenantTypeId">租户类型Id</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.FavoriteRepository.GetTopUserIdsOfObject(System.Int64,System.String,System.Int32)">
            <summary>
            根据收藏对象获取收藏了此对象的前N个用户Id集合
            </summary>
            <param name="objectId">对象Id</param>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="topNumber">要获取记录数</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.FavoriteRepository.GetPagingUserIdsOfObject(System.Int64,System.String,System.Int32)">
            <summary>
            根据收藏对象获取收藏了此对象的用户Id分页集合
            </summary>
            <param name="objectId">对象Id</param>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="pageIndex">页码</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.FavoriteRepository.GetFollowedUserIdsOfObject(System.Int64,System.Int64,System.String)">
            <summary>
            根据收藏对象获取同样收藏此对象的我的关注用户
            </summary>
            <param name="objectId">对象Id</param>
            <param name="userId">当前用户的userId</param>
            <param name="tenantTypeId">租户类型Id</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.FavoriteRepository.GetFavoritedUserCount(System.Int64,System.String)">
            <summary>
            获取被收藏数
            </summary>
            <param name="objectId">收藏对象Id</param>
            <param name="tenantTypeId">租户类型Id</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.FavoriteRepository.DeleteTrashDatas(System.String)">
            <summary>
            删除垃圾数据
            </summary>
            <param name="serviceKey">服务标识</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.FavoriteRepository.GetCacheKey_AllFavorites(System.Int64,System.String)">
            <summary>
            获取全部收藏CacheKey
            </summary>
            <param name="userId">收藏用户Id</param>
            <param name="tenantTypeId">租户类型Id</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.FavoriteRepository.GetCacheKey_PaingObjectIds(System.Int64,System.String)">
            <summary>
            获取全部收藏CacheKey
            </summary>
            <param name="userId">收藏用户Id</param>
            <param name="tenantTypeId">租户类型Id</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.FavoriteRepository.GetCacheKey_AllUserIdOfObject(System.Int64,System.String)">
            <summary>
            获取收藏对象全部收藏用户
            </summary>
            <param name="objectId">收藏对象Id</param>
            <param name="tenantTypeId">租户类型Id</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.FavoriteRepository.GetCacheKey_AllFollowedUserIdsOfObject(System.Int64,System.Int64,System.String)">
            <summary>
            根据收藏对象获取同样收藏此对象的我的关注用户
            </summary>
            <param name="objectId">对象Id</param>
            <param name="userId">当前用户的userId</param>
            <param name="tenantTypeId">租户类型Id</param>
            <returns></returns>
        </member>
        <member name="T:Tunynet.Common.LinktimelinessSettings">
            <summary>
            链接时效性配置
            </summary>
        </member>
        <member name="P:Tunynet.Common.LinktimelinessSettings.Highlinktimeliness">
            <summary>
            高链接时效性期限配置(单位：天)
            </summary>
        </member>
        <member name="P:Tunynet.Common.LinktimelinessSettings.Lowlinktimeliness">
            <summary>
            低链接时效性期限配置(单位：天)
            </summary>
        </member>
        <member name="T:Tunynet.Common.Configuration.LogoSettings">
            <summary>
            标识图全局设置类
            </summary>
        </member>
        <member name="M:Tunynet.Common.Configuration.LogoSettings.ValidateFileExtensions(System.String)">
            <summary>
            验证是否支持当前文件扩展名
            </summary>
            <param name="fileName">文件名（带后缀）</param>
            <returns>true-支持,false-不支持</returns>
        </member>
        <member name="P:Tunynet.Common.Configuration.LogoSettings.MaxLogoLength">
            <summary>
            标识图最大长度
            </summary>
        </member>
        <member name="P:Tunynet.Common.Configuration.LogoSettings.AllowedFileExtensions">
            <summary>
            附件允许的文件扩展名
            </summary>
        </member>
        <member name="P:Tunynet.Common.Configuration.LogoSettings.MaxWidth">
            <summary>
            标识图最大宽度
            </summary>
        </member>
        <member name="P:Tunynet.Common.Configuration.LogoSettings.MaxHeight">
            <summary>
            标识图最大高度
            </summary>
        </member>
        <member name="P:Tunynet.Common.Configuration.LogoSettings.ResizeMethod">
            <summary>
            标识图超过最大尺寸限制时，裁剪图像所采用的缩放方式
            </summary>
        </member>
        <member name="T:Tunynet.Common.Configuration.TenantLogoSettings">
            <summary>
            租户标识图配置类
            </summary>
        </member>
        <member name="M:Tunynet.Common.Configuration.TenantLogoSettings.#ctor(System.Xml.Linq.XElement)">
            <summary>
            构造器
            </summary>
            <param name="xElement">标识图配置节点</param>
        </member>
        <member name="M:Tunynet.Common.Configuration.TenantLogoSettings.GetRegisteredSettings(System.String)">
            <summary>
            获取注册的TenantLogoSettings
            </summary>
            <param name="tenantTypeId">租户类型Id</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Configuration.TenantLogoSettings.GetAll">
            <summary>
            获取所有注册的TenantLogoSettings
            </summary>
            <returns>TenantLogoSettings集合</returns>
        </member>
        <member name="M:Tunynet.Common.Configuration.TenantLogoSettings.RegisterSettings(System.Xml.Linq.XElement)">
            <summary>
            注册TenantLogoSettings
            </summary>
            <remarks>若xElement下有多个add节点，会同时注册多个TenantLogoSettings</remarks>
            <param name="xElement">标识图配置节点，会据此寻找其下所有子节点add</param>
        </member>
        <member name="M:Tunynet.Common.Configuration.TenantLogoSettings.ValidateFileLength(System.Int32)">
            <summary>
            验证文件大小是否超出限制
            </summary>
            <param name="contentLength">需要验证的文件大小</param>
            <returns>true-未超出限制,false-超出限制</returns>
        </member>
        <member name="P:Tunynet.Common.Configuration.TenantLogoSettings.StoreProviderName">
            <summary>
            文件存储功能提供者名称
            </summary>
        </member>
        <member name="P:Tunynet.Common.Configuration.TenantLogoSettings.TenantTypeId">
            <summary>
            租户类型Id
            </summary>
        </member>
        <member name="P:Tunynet.Common.Configuration.TenantLogoSettings.TenantLogoDirectory">
            <summary>
            租户标识图目录
            </summary>
        </member>
        <member name="P:Tunynet.Common.Configuration.TenantLogoSettings.ImageSizeTypes">
            <summary>
            图片尺寸类型集合
            </summary>
        </member>
        <member name="P:Tunynet.Common.Configuration.TenantLogoSettings.MaxWidth">
            <summary>
            图片最大宽度
            </summary>
        </member>
        <member name="P:Tunynet.Common.Configuration.TenantLogoSettings.MaxHeight">
            <summary>
            图片最大高度
            </summary>
        </member>
        <member name="P:Tunynet.Common.Configuration.TenantLogoSettings.MaxLogoLength">
            <summary>
            标识图最大长度(单位：K)
            </summary>
        </member>
        <member name="T:Tunynet.Common.LogoService">
            <summary>
            标识图业务逻辑类
            </summary>
        </member>
        <member name="M:Tunynet.Common.LogoService.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="tenantTypeId">租户类型Id</param>
        </member>
        <member name="M:Tunynet.Common.LogoService.UploadLogo(System.Object,System.IO.Stream)">
            <summary>
            上传Logo
            </summary>
            <param name="associateId"></param>
            <param name="stream"></param>
            <returns>上传文件的相对路径（包含文件名）</returns>
        </member>
        <member name="M:Tunynet.Common.LogoService.DeleteLogo(System.Object)">
            <summary>
            删除Logo
            </summary>
            <param name="associateId">关联Id</param>
        </member>
        <member name="M:Tunynet.Common.LogoService.GetDirectlyUrl(System.Object)">
            <summary>
            获取直连URL
            </summary>
            <param name="associateId">关联Id</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.LogoService.GetLogo(System.Object)">
            <summary>
            获取Logo
            </summary>
            <param name="associateId">关联Id</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.LogoService.GetResizedLogo(System.Object,System.String)">
            <summary>
            获取不同尺寸的Logo
            </summary>
            <param name="associateId"></param>
            <param name="imageSizeTypeKey"></param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.LogoService.GetLogoRelativePath(System.Object)">
            <summary>
            获取Logo存储的相对路径
            </summary>
            <param name="associateId">associateId</param>
        </member>
        <member name="M:Tunynet.Common.LogoService.GetLogoFileName(System.Object)">
            <summary>
            获取Logo文件名称
            </summary>
            <param name="associateId">associateId</param>
        </member>
        <member name="P:Tunynet.Common.LogoService.StoreProvider">
            <summary>
            文件存储Provider
            </summary>
        </member>
        <member name="P:Tunynet.Common.LogoService.TenantLogoSettings">
            <summary>
            租户标识图设置
            </summary>
        </member>
        <member name="T:Tunynet.Common.OwnerData_SortBy">
            <summary>
            用户数据排序
            </summary>
        </member>
        <member name="F:Tunynet.Common.OwnerData_SortBy.LongValue">
            <summary>
            LongValue正排序
            </summary>
        </member>
        <member name="F:Tunynet.Common.OwnerData_SortBy.LongValue_DESC">
            <summary>
            LongValue倒排序
            </summary>
        </member>
        <member name="F:Tunynet.Common.OwnerData_SortBy.DecimalValue">
            <summary>
            DecimalValue正排序
            </summary>
        </member>
        <member name="F:Tunynet.Common.OwnerData_SortBy.DecimalValue_DESC">
            <summary>
            DecimalValue倒排序
            </summary>
        </member>
        <member name="T:Tunynet.Common.ParsedMedia">
            <summary>
            短网址实体
            </summary>
        </member>
        <member name="M:Tunynet.Common.ParsedMedia.New(System.String)">
            <summary>
            创建示例
            </summary>
            <param name="alias">Url别名</param>
            <returns></returns>
        </member>
        <member name="P:Tunynet.Common.ParsedMedia.Alias">
             <summary>
            Url别名
             </summary>
        </member>
        <member name="P:Tunynet.Common.ParsedMedia.Url">
             <summary>
            网址
             </summary>
        </member>
        <member name="P:Tunynet.Common.ParsedMedia.MediaType">
             <summary>
            多媒体类型
             </summary>
        </member>
        <member name="P:Tunynet.Common.ParsedMedia.Name">
             <summary>
            多媒体名称
             </summary>
        </member>
        <member name="P:Tunynet.Common.ParsedMedia.Description">
             <summary>
            描述
             </summary>
        </member>
        <member name="P:Tunynet.Common.ParsedMedia.ThumbnailUrl">
             <summary>
            缩略图地址
             </summary>
        </member>
        <member name="P:Tunynet.Common.ParsedMedia.PlayerUrl">
             <summary>
            播放器地址
             </summary>
        </member>
        <member name="P:Tunynet.Common.ParsedMedia.SourceFileUrl">
             <summary>
            源文件地址
             </summary>
        </member>
        <member name="P:Tunynet.Common.ParsedMedia.DateCreated">
             <summary>
            创建时间
             </summary>
        </member>
        <member name="P:Tunynet.Common.ParsedMedia.ShortUrl">
            <summary>
            短网址
            </summary>
        </member>
        <member name="T:Tunynet.Common.ParsedMediaService">
            <summary>
            多媒体网址业务逻辑类
            </summary>
        </member>
        <member name="M:Tunynet.Common.ParsedMediaService.#ctor">
            <summary>
            构造器
            </summary>
        </member>
        <member name="M:Tunynet.Common.ParsedMediaService.#ctor(Tunynet.Common.Repositories.IParsedMediaRepository)">
            <summary>
            构造器
            </summary>
        </member>
        <member name="M:Tunynet.Common.ParsedMediaService.Create(Tunynet.Common.ParsedMedia)">
            <summary>
            创建多媒体网址
            </summary>
            <param name="ParsedMedia">多媒体网址实体</param>
            <returns>Url别名</returns>
        </member>
        <member name="M:Tunynet.Common.ParsedMediaService.Update(Tunynet.Common.ParsedMedia)">
            <summary>
            更新多媒体网址
            </summary>
            <param name="ParsedMedia">多媒体网址实体</param>
        </member>
        <member name="M:Tunynet.Common.ParsedMediaService.Delete(System.String)">
            <summary>
            删除多媒体网址
            </summary>
            <param name="alias">多媒体网址别名</param>
        </member>
        <member name="M:Tunynet.Common.ParsedMediaService.Get(System.String)">
             <summary>
             获取多媒体网址实体
             </summary>
            <param name="alias">多媒体网址别名</param>
        </member>
        <member name="M:Tunynet.Common.ParsedMediaService.ResolveBodyForEdit(System.String,System.String@,System.String@)">
            <summary>
            解析内容用于创建AtUser
            </summary>
            <param name="body">待解析的内容</param>
            <param name="videoAlias">视频Url别名</param>
            <param name="audioAlias">音乐Url别名</param>
        </member>
        <member name="M:Tunynet.Common.ParsedMediaService.ResolveBodyForDetail(System.String,System.Int64,System.Int64,System.Func{System.String,System.Int64,System.Int64,Tunynet.Common.ParsedMedia,System.String})">
            <summary>
            解析内容中的AtUser用户展示展示
            </summary>
            <param name="body">待解析的内容</param>
            <param name="associateId">关联项Id</param>
            <param name="userId">关联项作者Id</param>
            <param name="UrlGenerate">url生成对应标签的方法</param>
        </member>
        <member name="M:Tunynet.Common.ParsedMediaService.ResolveBodyForHtmlDetail(System.String,System.Func{System.String,Tunynet.Common.ParsedMedia,System.String})">
            <summary>
            解析内容中的多媒体内容
            </summary>
            <param name="body">待解析的内容</param>
            <param name="TagGenerate">url生成对应标签的方法</param>
        </member>
        <member name="T:Tunynet.Common.Repositories.IParsedMediaRepository">
            <summary>
            媒体网址数据访问接口
            </summary>
        </member>
        <member name="T:Tunynet.Common.Repositories.ParsedMediaRepository">
            <summary>
            媒体网址数据访问
            </summary>
        </member>
        <member name="M:Tunynet.Common.Repositories.ParsedMediaRepository.Insert(Tunynet.Common.ParsedMedia)">
            <summary>
            插入新数据的方法
            </summary>
            <param name="entity">准备插入的实体</param>
            <returns>是否插入成功</returns>
        </member>
        <member name="T:Tunynet.Common.SchoolType">
            <summary>
            学校类型
            </summary>
        </member>
        <member name="F:Tunynet.Common.SchoolType.University">
            <summary>
            大学
            </summary>
        </member>
        <member name="F:Tunynet.Common.SchoolType.SeniorHighSchool">
            <summary>
            高中
            </summary>
        </member>
        <member name="F:Tunynet.Common.SchoolType.JuniorHighSchool">
            <summary>
            初中
            </summary>
        </member>
        <member name="F:Tunynet.Common.SchoolType.GradeSchool">
            <summary>
            小学
            </summary>
        </member>
        <member name="T:Tunynet.Common.Repositories.ISensitiveWordRepository">
            <summary>
            敏感词数据访问
            </summary>
        </member>
        <member name="M:Tunynet.Common.Repositories.ISensitiveWordRepository.GetSensitiveWords(System.String,System.Nullable{System.Int32})">
            <summary>
            获取敏感词(管理员后台用)
            </summary>
            <param name="keyword">带过滤文字关键字</param>
            <param name="typeId">敏感词类型</param>
            <returns>带过滤文字集合</returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.ISensitiveWordRepository.BatchInsert(System.Collections.Generic.List{Tunynet.Common.SensitiveWord})">
            <summary>
            批量添加敏感词
            </summary>
            <param name="sensitiveWords">敏感词集合</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.ISensitiveWordRepository.Create(Tunynet.Common.SensitiveWord)">
            <summary>
            添加敏感词
            </summary>
            <param name="sensitiveWord">敏感词名</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.ISensitiveWordRepository.Update(Tunynet.Common.SensitiveWord)">
            <summary>
            更新敏感词
            </summary>
            <param name="sensitiveWord"></param>
            <returns></returns>
        </member>
        <member name="T:Tunynet.Common.Repositories.SensitiveWordRepository">
            <summary>
            敏感词的数据访问类
            </summary>
        </member>
        <member name="M:Tunynet.Common.Repositories.SensitiveWordRepository.Create(Tunynet.Common.SensitiveWord)">
            <summary>
            添加敏感词
            </summary>
            <param name="sensitiveWord"></param>
        </member>
        <member name="M:Tunynet.Common.Repositories.SensitiveWordRepository.Update(Tunynet.Common.SensitiveWord)">
            <summary>
            更新敏感词
            </summary>
            <param name="sensitiveWord"></param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.SensitiveWordRepository.GetSensitiveWords(System.String,System.Nullable{System.Int32})">
            <summary>
            获取敏感词(管理员后台用)
            </summary>
            <param name="keyword">带过滤文字关键字</param>
            <param name="typeId">敏感词类型</param>
            <returns>待过滤文字集合</returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.SensitiveWordRepository.BatchInsert(System.Collections.Generic.List{Tunynet.Common.SensitiveWord})">
            <summary>
            批量添加敏感词
            </summary>
            <param name="sensitiveWords">敏感词集合</param>
        </member>
        <member name="T:Tunynet.Common.Repositories.SensitiveWordTypeRepository">
            <summary>
            敏感词的数据访问类
            </summary>
        </member>
        <member name="M:Tunynet.Common.Repositories.SensitiveWordTypeRepository.Delete(Tunynet.Common.SensitiveWordType)">
            <summary>
            删除敏感词类型
            </summary>
            <param name="entity">敏感词类型实体</param>
            <returns></returns>
        </member>
        <member name="T:Tunynet.Common.SensitiveWord">
            <summary>
            敏感词实体类
            </summary>
        </member>
        <member name="M:Tunynet.Common.SensitiveWord.New">
            <summary>
            新建实体时使用
            </summary>
        </member>
        <member name="P:Tunynet.Common.SensitiveWord.Id">
             <summary>
            Id
             </summary>
        </member>
        <member name="P:Tunynet.Common.SensitiveWord.Word">
            <summary>
            敏感词
            </summary>
        </member>
        <member name="P:Tunynet.Common.SensitiveWord.TypeId">
            <summary>
            敏感词类型Id
            </summary>
        </member>
        <member name="P:Tunynet.Common.SensitiveWord.Replacement">
            <summary>
            替换后的字符
            </summary>
        </member>
        <member name="T:Tunynet.Common.SensitiveWordService">
            <summary>
            敏感词业务逻辑类
            </summary>
        </member>
        <member name="M:Tunynet.Common.SensitiveWordService.#ctor">
            <summary>
            构造器方法
            </summary>
        </member>
        <member name="M:Tunynet.Common.SensitiveWordService.#ctor(Tunynet.Common.Repositories.ISensitiveWordRepository,Tunynet.Repositories.IRepository{Tunynet.Common.SensitiveWordType})">
            <summary>
            构造器方法
            </summary>
            <param name="sensitiveWordRepository">敏感词数据访问</param>
            <param name="sensitiveWordTypeRepository">敏感词类型数据访问</param>
        </member>
        <member name="M:Tunynet.Common.SensitiveWordService.Create(Tunynet.Common.SensitiveWord)">
            <summary>
            添加敏感词
            </summary>
            <param name="sensitiveWord">敏感词实体类型</param>
        </member>
        <member name="M:Tunynet.Common.SensitiveWordService.BatchCreate(System.IO.Stream,System.Nullable{System.Int32})">
            <summary>
            添加敏感词
            </summary>
            <param name="stream">敏感词文件流</param>
            <param name="typeId">敏感词类型Id</param>
        </member>
        <member name="M:Tunynet.Common.SensitiveWordService.BatchCreate(System.Collections.Generic.IList{System.String},System.Nullable{System.Int32})">
            <summary>
            添加敏感词
            </summary>
            <param name="words">敏感词集合</param>
            <param name="typeId">敏感词类型Id</param>
        </member>
        <member name="M:Tunynet.Common.SensitiveWordService.Update(Tunynet.Common.SensitiveWord)">
            <summary>
            更新敏感词
            </summary>
            <param name="sensitiveWord">待更新敏感词</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.SensitiveWordService.Delete(System.Int32)">
            <summary>
            删除敏感词
            </summary>
            <param name="id">敏感词Id</param>
        </member>
        <member name="M:Tunynet.Common.SensitiveWordService.Get(System.Int32)">
            <summary>
            获取敏感词实体
            </summary>
            <param name="id">敏感词Id</param>
        </member>
        <member name="M:Tunynet.Common.SensitiveWordService.Gets(System.String,System.Nullable{System.Int32})">
            <summary>
            获取敏感词集合（后台用）
            </summary>
            <param name="keyword">敏感词关键字</param>
            <param name="typeId">分类Id</param>
        </member>
        <member name="M:Tunynet.Common.SensitiveWordService.Export">
            <summary>
            导出敏感词
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.SensitiveWordService.CreateType(Tunynet.Common.SensitiveWordType)">
            <summary>
            创建敏感词类型
            </summary>
        </member>
        <member name="M:Tunynet.Common.SensitiveWordService.DeleteType(System.Object)">
            <summary>
            删除敏感词类型
            </summary>
            <param name="typeId">敏感词类型Id</param>
        </member>
        <member name="M:Tunynet.Common.SensitiveWordService.UpdateType(Tunynet.Common.SensitiveWordType)">
            <summary>
            更新敏感词类型
            </summary>
            <param name="type">敏感词类型实体</param>
        </member>
        <member name="M:Tunynet.Common.SensitiveWordService.GetAllSensitiveWordTypes">
            <summary>
            获取敏感词类型集合
            </summary>
        </member>
        <member name="M:Tunynet.Common.SensitiveWordService.GetSensitiveWordType(System.Int32)">
            <summary>
            获取敏感词类型集合
            </summary>
            <param name="id">敏感词类型Id</param>
        </member>
        <member name="T:Tunynet.Common.SensitiveWordType">
            <summary>
            敏感词类型实体类
            </summary>
        </member>
        <member name="M:Tunynet.Common.SensitiveWordType.New">
            <summary>
            新建实体时使用
            </summary>
        </member>
        <member name="P:Tunynet.Common.SensitiveWordType.TypeId">
            <summary>
            TypeId
            </summary>
        </member>
        <member name="P:Tunynet.Common.SensitiveWordType.Name">
            <summary>
            敏感词类型名
            </summary>
        </member>
        <member name="T:Tunynet.Common.IUrlShortner">
            <summary>
            UrlShortner接口
            </summary>
        </member>
        <member name="M:Tunynet.Common.IUrlShortner.Shortner(System.String)">
            <summary>
            进行短网址处理
            </summary>
            <param name="url">待处理的Url</param>
            <returns>缩短后的网址</returns>
        </member>
        <member name="T:Tunynet.Common.Repositories.IShortUrlRepository">
            <summary>
            短网址数据访问接口
            </summary>
        </member>
        <member name="M:Tunynet.Common.Repositories.IShortUrlRepository.GetUnusedAlias(System.String[],System.String,System.Boolean@)">
            <summary>
            获取未使用的Url别名
            </summary>
            <param name="aliases">Url别名集合</param>
            <param name="url">待处理的Url</param>
            <param name="urlExists">带处理Url是否已存在</param>
        </member>
        <member name="T:Tunynet.Common.Repositories.ShortUrlRepository">
            <summary>
            短网址数据访问
            </summary>
        </member>
        <member name="M:Tunynet.Common.Repositories.ShortUrlRepository.Insert(Tunynet.Common.ShortUrlEntity)">
            <summary>
            把实体Entity插入到数据库
            </summary>
            <param name="entity">实体</param>
            <returns>主键</returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.ShortUrlRepository.GetUnusedAlias(System.String[],System.String,System.Boolean@)">
            <summary>
            获取未使用的Url别名
            </summary>
            <param name="aliases">Url别名集合</param>
            <param name="url">待处理的Url</param>
            <param name="urlExists">带处理Url是否已存在</param>
        </member>
        <member name="T:Tunynet.Common.ShortUrlEntity">
            <summary>
            短网址实体
            </summary>
        </member>
        <member name="M:Tunynet.Common.ShortUrlEntity.New(System.String)">
            <summary>
            创建示例
            </summary>
            <param name="alias">Url别名</param>
            <returns></returns>
        </member>
        <member name="P:Tunynet.Common.ShortUrlEntity.Alias">
            <summary>
            Url别名
            </summary>
        </member>
        <member name="P:Tunynet.Common.ShortUrlEntity.Url">
            <summary>
            实际的Url地址
            </summary>
        </member>
        <member name="P:Tunynet.Common.ShortUrlEntity.OtherShortUrl">
            <summary>
            第三方服务处理后的短网址
            </summary>
        </member>
        <member name="P:Tunynet.Common.ShortUrlEntity.DateCreated">
            <summary>
            创建时间
            </summary>
        </member>
        <member name="T:Tunynet.Common.ShortUrlService">
            <summary>
            短网址业务逻辑类
            </summary>
        </member>
        <member name="M:Tunynet.Common.ShortUrlService.#ctor">
            <summary>
            构造器
            </summary>
        </member>
        <member name="M:Tunynet.Common.ShortUrlService.#ctor(Tunynet.Common.Repositories.IShortUrlRepository)">
            <summary>
            构造器
            </summary>
        </member>
        <member name="M:Tunynet.Common.ShortUrlService.Create(System.String)">
            <summary>
            创建短网址
            </summary>
            <param name="url">需要处理的Url</param>
            <returns>Url别名</returns>
        </member>
        <member name="M:Tunynet.Common.ShortUrlService.Update(Tunynet.Common.ShortUrlEntity)">
            <summary>
            更新短网址
            </summary>
            <param name="entity">需要更新的短网址信息</param>
        </member>
        <member name="M:Tunynet.Common.ShortUrlService.Delete(System.String)">
            <summary>
            删除短网址
            </summary>
            <param name="alias">短网址别名</param>
        </member>
        <member name="M:Tunynet.Common.ShortUrlService.Get(System.String,System.String)">
             <summary>
             获取短网址实体
             </summary>
            <param name="alias">短网址别名</param>
        </member>
        <member name="M:Tunynet.Common.ShortUrlService.GetShortUrl(System.String,System.String)">
             <summary>
             获取短网址
             </summary>
            <param name="alias">短网址别名</param>
            <param name="urlDomain">自定义短网址域名</param>
        </member>
        <member name="M:Tunynet.Common.ShortUrlService.GetShortUrl(System.String,Tunynet.Common.ShortUrlEntity@,System.String)">
             <summary>
             获取短网址
             </summary>
            <param name="alias">短网址别名</param>
            <param name="entity">要输出的实体</param>
            <param name="urlDomain">自定义短网址域名</param>
        </member>
        <member name="M:Tunynet.Common.ShortUrlService.GetUrlAlias(System.String,System.Boolean@)">
            <summary>
            获取Url别名
            </summary>
            <param name="url">需要处理的Url</param>
            <param name="urlExists">Url是否已存在</param>
            <returns>返回Url别名</returns>
        </member>
        <member name="M:Tunynet.Common.ShortUrlService.GetUrlDomain">
            <summary>
            获取短网址主域名
            </summary>
            <returns></returns>
        </member>
        <member name="T:Tunynet.Common.ShortUrlSettings">
            <summary>
            短网址配置类
            </summary>
        </member>
        <member name="P:Tunynet.Common.ShortUrlSettings.ShortUrlDomain">
            <summary>
            内置短网址处理主域名
            </summary>
        </member>
        <member name="P:Tunynet.Common.ShortUrlSettings.IsEnableOtherShortner">
            <summary>
            启用第三方短网址处理
            </summary>
        </member>
        <member name="T:Tunynet.Common.SiteSettings">
            <summary>
            站点设置
            </summary>
            <remarks>安装站点时，必须设置MainSiteRootUrl</remarks>
        </member>
        <member name="P:Tunynet.Common.SiteSettings.BeiAnScript">
            <summary>
            备案信息
            </summary>
        </member>
        <member name="P:Tunynet.Common.SiteSettings.StatScript">
            <summary>
            页脚统计脚本
            </summary>
        </member>
        <member name="P:Tunynet.Common.SiteSettings.Links">
            <summary>
            页脚链接
            </summary>
        </member>
        <member name="P:Tunynet.Common.SiteSettings.SiteKey">
            <summary>
            站点唯一标识
            </summary>
        </member>
        <member name="P:Tunynet.Common.SiteSettings.SiteName">
            <summary>
            站点名称
            </summary>
        </member>
        <member name="P:Tunynet.Common.SiteSettings.SiteDescription">
            <summary>
            站点描述
            </summary>
        </member>
        <member name="P:Tunynet.Common.SiteSettings.SearchMetaDescription">
            <summary>
            页面头信息的description
            </summary>
        </member>
        <member name="P:Tunynet.Common.SiteSettings.SearchMetaKeyWords">
            <summary>
            页面头信息的KeyWord
            </summary>
        </member>
        <member name="P:Tunynet.Common.SiteSettings.EnableMultilingual">
            <summary>
            是否启用国际化
            </summary>
        </member>
        <member name="P:Tunynet.Common.SiteSettings.DefaultLanguage">
            <summary>
            系统默认语言
            </summary>
        </member>
        <member name="P:Tunynet.Common.SiteSettings.MainSiteRootUrl">
            <summary>
            主站URL
            </summary>
            <remarks>
            安装程序（或者首次启动时）需要自动保存该地址
            </remarks>
        </member>
        <member name="P:Tunynet.Common.SiteSettings.SiteTheme">
            <summary>
            站点主题
            </summary>
        </member>
        <member name="P:Tunynet.Common.SiteSettings.SiteThemeAppearance">
            <summary>
            站点皮肤外观
            </summary>
        </member>
        <member name="P:Tunynet.Common.SiteSettings.EnableAnonymousPosting">
            <summary>
            是否允许匿名发帖
            </summary>
            <remarks>
            包括所有的：评论、留言、回帖等
            </remarks>
        </member>
        <member name="P:Tunynet.Common.SiteSettings.EnableAnonymousBrowse">
            <summary>
            是否允许匿名用户访问站点
            </summary>
        </member>
        <member name="P:Tunynet.Common.SiteSettings.EnableSimpleHome">
            <summary>
            匿名用户默认访问
            </summary>
        </member>
        <member name="P:Tunynet.Common.SiteSettings.ShareToThirdIsEnabled">
            <summary>
            分享到站外是否启用
            </summary>
        </member>
        <member name="P:Tunynet.Common.SiteSettings.ShareToThirdDisplayType">
            <summary>
            分享到站外展示类型
            </summary>
        </member>
        <member name="P:Tunynet.Common.SiteSettings.ShareDisplayIconSize">
            <summary>
            分享到站外图标形式展示大小
            </summary>
        </member>
        <member name="P:Tunynet.Common.SiteSettings.ShareToThirdBusiness">
            <summary>
            分享到站外展示商家
            </summary>
        </member>
        <member name="T:Tunynet.Common.ShareDisplayType">
            <summary>
            分享到站外展示形式
            </summary>
        </member>
        <member name="F:Tunynet.Common.ShareDisplayType.Word">
            <summary>
            文字
            </summary>
        </member>
        <member name="F:Tunynet.Common.ShareDisplayType.Icon">
            <summary>
            图标
            </summary>
        </member>
        <member name="F:Tunynet.Common.ShareDisplayType.Sidebar">
            <summary>
            侧栏
            </summary>
        </member>
        <member name="T:Tunynet.Common.ShareDisplayIconSize">
            <summary>
            分享到站外图标形式展示大小
            </summary>
        </member>
        <member name="F:Tunynet.Common.ShareDisplayIconSize.Big">
            <summary>
            大图标
            </summary>
        </member>
        <member name="F:Tunynet.Common.ShareDisplayIconSize.middle">
            <summary>
            中图标
            </summary>
        </member>
        <member name="F:Tunynet.Common.ShareDisplayIconSize.small">
            <summary>
            小图标
            </summary>
        </member>
        <member name="T:Tunynet.Common.SubscribeEventArgs">
            <summary>
            订阅自定义事件
            </summary>
        </member>
        <member name="M:Tunynet.Common.SubscribeEventArgs.#ctor(System.String,System.String,System.Int64)">
            <summary>
            构造器
            </summary>
            <param name="eventOperationType">事件操作类型</param>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="ownerId">收藏用户Id</param>
        </member>
        <member name="P:Tunynet.Common.SubscribeEventArgs.TenantTypeId">
             <summary>
            租户类型Id 
             </summary>
        </member>
        <member name="P:Tunynet.Common.SubscribeEventArgs.UserId">
             <summary>
            收藏用户Id 
             </summary>
        </member>
        <member name="T:Tunynet.Common.SubscribeService">
            <summary>
            订阅逻辑类
            </summary>
        </member>
        <member name="M:Tunynet.Common.SubscribeService.#ctor(System.String)">
            <summary>
            构造器方法
            </summary>
            <param name="tenantTypeId">租户类型Id</param>
        </member>
        <member name="M:Tunynet.Common.SubscribeService.#ctor(System.String,Tunynet.Common.Repositories.IFavoriteRepository)">
            <summary>
            构造器方法
            </summary>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="favoriteRepository">订阅数据访问</param>
        </member>
        <member name="M:Tunynet.Common.SubscribeService.Subscribe(System.Int64,System.Int64)">
            <summary>
            添加订阅
            </summary>
            <param name="objectId">被订阅对象Id</param>
            <param name="userId">用户Id</param>
            <returns>true-订阅成功,false-订阅失败</returns>
        </member>
        <member name="M:Tunynet.Common.SubscribeService.CancelSubscribe(System.Int64,System.Int64)">
            <summary>
            取消订阅
            </summary>
            <param name="userId">用户Id</param>
            <param name="objectId">被订阅对象Id</param>
            <returns>true-取消成功,false-取消失败</returns>
        </member>
        <member name="M:Tunynet.Common.SubscribeService.CleanSubscribesFromObject(System.Int64)">
            <summary>
            清除某个实体的所有订阅
            </summary>
            <param name="objectId">实体ID</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.SubscribeService.IsSubscribed(System.Int64,System.Int64)">
            <summary>
            判断是否订阅
            </summary>
            <param name="objectId">被订阅对象Id</param>
            <param name="userId">用户Id</param>
            <returns>true-已订阅，false-未订阅</returns>
        </member>
        <member name="M:Tunynet.Common.SubscribeService.GetPagingObjectIds(System.Int64,System.Int32,System.Nullable{System.Int32})">
             <summary>
             获取订阅对象Id分页数据
             </summary>
             <param name="userId">用户Id</param>
             <param name="pageIndex">页码</param>
             <param name="pageSize">每页显示内容数</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.SubscribeService.GetTopObjectIds(System.Int64,System.Int32)">
             <summary>
             获取前N个订阅对象Id
             </summary>
             <param name="userId">用户Id</param>
             <param name="topNumber">要获取Id的个数</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.SubscribeService.GetAllObjectIds(System.Int64)">
             <summary>
             获取全部订阅对象Id
             </summary>
             <param name="userId">用户Id</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.SubscribeService.GetUserIdsOfObject(System.Int64)">
            <summary>
            根据订阅对象获取UserId
            </summary>
            <param name="objectId">订阅对象Id</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.SubscribeService.GetTopUserIdsOfObject(System.Int64,System.Int32)">
            <summary>
            根据订阅对象获取订阅了此对象的前N个用户Id集合
            </summary>
            <param name="objectId">对象Id</param>
            <param name="topNumber">要获取记录数</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.SubscribeService.GetPagingUserIdsOfObject(System.Int64,System.Int32)">
            <summary>
            根据订阅对象获取订阅了此对象的用户Id分页集合
            </summary>
            <param name="objectId">对象Id</param>
            <param name="pageIndex">页码</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.SubscribeService.GetFollowedUserIdsOfObject(System.Int64,System.Int64)">
            <summary>
            根据订阅对象获取同样订阅此对象的我的关注用户
            </summary>
            <param name="objectId">对象Id</param>
            <param name="userId">当前用户的userId</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.SubscribeService.GetSubscribedUserCount(System.Int64)">
            <summary>
            获取被订阅数
            </summary>
            <param name="objectId">订阅对象Id</param>
            <returns></returns>
        </member>
        <member name="T:Tunynet.Common.Repositories.ISystemDataRepository">
            <summary>
            SystemData数据访问接口
            </summary>
        </member>
        <member name="M:Tunynet.Common.Repositories.ISystemDataRepository.Change(System.String,System.Int64)">
            <summary>
            变更系统数据
            </summary>
            <param name="dataKey">数据标识</param>
            <param name="number">待变更的数值</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.ISystemDataRepository.Change(System.String,System.Decimal)">
            <summary>
            变更系统数据
            </summary>
            <param name="dataKey">数据标识</param>
            <param name="number">待变更的数值</param>
        </member>
        <member name="T:Tunynet.Common.Repositories.SystemDataRepository">
            <summary>
            系统数据Repository
            </summary>
        </member>
        <member name="M:Tunynet.Common.Repositories.SystemDataRepository.Change(System.String,System.Int64)">
            <summary>
            变更系统数据
            </summary>
            <param name="dataKey">数据标识</param>
            <param name="number">待变更的数值</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.SystemDataRepository.Change(System.String,System.Decimal)">
            <summary>
            变更系统数据
            </summary>
            <param name="dataKey">数据标识</param>
            <param name="number">待变更的数值</param>
        </member>
        <member name="T:Tunynet.Common.SystemData">
            <summary>
            系统数据实体类
            </summary>
        </member>
        <member name="M:Tunynet.Common.SystemData.New">
            <summary>
            新建实体时使用
            </summary>
        </member>
        <member name="P:Tunynet.Common.SystemData.Datakey">
             <summary>
            数据键值
             </summary>
        </member>
        <member name="P:Tunynet.Common.SystemData.LongValue">
             <summary>
            long数据值
             </summary>
        </member>
        <member name="P:Tunynet.Common.SystemData.DecimalValue">
             <summary>
            decimal数据值
             </summary>
        </member>
        <member name="T:Tunynet.Common.SystemDataKeys">
            <summary>
            系统数据标识
            </summary>
        </member>
        <member name="M:Tunynet.Common.SystemDataKeys.Instance">
            <summary>
            获取单例
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.SystemDataKeys.TradePoints">
            <summary>
            交易积分
            </summary>
            <returns></returns>
        </member>
        <member name="T:Tunynet.Common.SystemDataService">
            <summary>
            系统数据业务逻辑
            </summary>
        </member>
        <member name="M:Tunynet.Common.SystemDataService.#ctor">
            <summary>
            构造器
            </summary>
        </member>
        <member name="M:Tunynet.Common.SystemDataService.#ctor(Tunynet.Common.Repositories.ISystemDataRepository)">
            <summary>
            构造器
            </summary>
            <param name="systemDataRepository">系统数据仓储</param>
        </member>
        <member name="M:Tunynet.Common.SystemDataService.Change(System.String,System.Int64)">
            <summary>
            变更系统数据
            </summary>
            <param name="dataKey">数据标识</param>
            <param name="number">待变更的数值</param>
        </member>
        <member name="M:Tunynet.Common.SystemDataService.Change(System.String,System.Decimal)">
            <summary>
            变更系统数据
            </summary>
            <param name="dataKey">数据标识</param>
            <param name="number">待变更的数值</param>
        </member>
        <member name="M:Tunynet.Common.SystemDataService.GetLong(System.String)">
            <summary>
            获取DataKey对应的长整形
            </summary>
            <param name="dataKey">DataKey</param>
            <returns>dataKey不存在时返回0</returns>
        </member>
        <member name="M:Tunynet.Common.SystemDataService.GetDecimal(System.String)">
            <summary>
            获取DataKey对应的Decimal
            </summary>
            <param name="dataKey">DataKey</param>
            <returns>dataKey不存在时返回0</returns>
        </member>
        <member name="T:Tunynet.Common.MultiTenantServiceKeys">
            <summary>
            多租户服务标识
            </summary>
        </member>
        <member name="M:Tunynet.Common.MultiTenantServiceKeys.Count">
            <summary>
            计数
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.MultiTenantServiceKeys.Comment">
            <summary>
            评论
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.MultiTenantServiceKeys.SiteCategory">
            <summary>
            站点类别
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.MultiTenantServiceKeys.UserCategory">
            <summary>
            用户类别
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.MultiTenantServiceKeys.Tag">
            <summary>
            标签
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.MultiTenantServiceKeys.Recommend">
            <summary>
             推荐
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.MultiTenantServiceKeys.Attitude">
            <summary>
            顶踩
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.MultiTenantServiceKeys.Attachment">
            <summary>
            附件
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.MultiTenantServiceKeys.AtUser">
            <summary>
            AtUser
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.MultiTenantServiceKeys.Subscribe">
            <summary>
            关注内容
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.MultiTenantServiceKeys.Favorites">
            <summary>
            收藏
            </summary>
            <returns></returns>
        </member>
        <member name="T:Tunynet.Common.Repositories.TenantTypeRepository">
            <summary>
            租户类型Repository
            </summary>
        </member>
        <member name="T:Tunynet.Common.Repositories.ITenantTypeRepository">
             <summary>
            TenantType数据访问接口
             </summary>
        </member>
        <member name="M:Tunynet.Common.Repositories.ITenantTypeRepository.Gets(System.String,System.Nullable{System.Int32})">
            <summary>
            依据服务或应用获取租户类型
            </summary>
            <param name="serviceKey">服务标识</param>
            <param name="applicationId">应用Id</param>
            <returns>如未满足条件的TenantType则返回空集合</returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.TenantTypeRepository.Gets(System.String,System.Nullable{System.Int32})">
            <summary>
            依据服务或应用获取租户类型
            </summary>
            <param name="serviceKey">服务标识</param>
            <param name="applicationId">应用Id</param>
            <returns>如未满足条件的TenantType则返回空集合</returns>
        </member>
        <member name="T:Tunynet.Common.TenantType">
            <summary>
            用户数据实体类
            </summary>
        </member>
        <member name="P:Tunynet.Common.TenantType.TenantTypeId">
            <summary>
            租户类型Id
            </summary>
        </member>
        <member name="P:Tunynet.Common.TenantType.Name">
            <summary>
            租户类型名称
            </summary>
        </member>
        <member name="P:Tunynet.Common.TenantType.ApplicationId">
            <summary>
            应用Id
            </summary>
        </member>
        <member name="P:Tunynet.Common.TenantType.ClassType">
            <summary>
            类型
            </summary>
        </member>
        <member name="T:Tunynet.Common.TenantTypeIds">
            <summary>
            租户类型Id
            </summary>
        </member>
        <member name="M:Tunynet.Common.TenantTypeIds.User">
            <summary>
            用户
            </summary>
        </member>
        <member name="M:Tunynet.Common.TenantTypeIds.Group">
            <summary>
            群组
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.TenantTypeIds.Message">
            <summary>
            私信
            </summary>
        </member>
        <member name="M:Tunynet.Common.TenantTypeIds.UserProfile">
            <summary>
            用户资料
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.TenantTypeIds.Search">
            <summary>
            搜索
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.TenantTypeIds.Comment">
            <summary>
            评论
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.TenantTypeIds.Tag">
            <summary>
            标签
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.TenantTypeIds.Attachment">
            <summary>
            附件
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.TenantTypeIds.Recommend">
            <summary>
            推荐
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.TenantTypeIds.Link">
            <summary>
            友情链接
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.TenantTypeIds.Announcement">
            <summary>
            站点公告
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.TenantTypeIds.Identification">
            <summary>
            身份认证
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.TenantTypeIds.IdentificationType">
            <summary>
            认证标识
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.TenantTypeIds.Advertising">
            <summary>
            广告
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.TenantTypeIds.AdvertisingPosition">
            <summary>
            广告位
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.TenantTypeIds.Role">
            <summary>
            角色
            </summary>
            <returns></returns>
        </member>
        <member name="T:Tunynet.Common.TenantTypeService">
            <summary>
            租户类型业务逻辑类
            </summary>
        </member>
        <member name="M:Tunynet.Common.TenantTypeService.#ctor">
            <summary>
            构造器
            </summary>
        </member>
        <member name="M:Tunynet.Common.TenantTypeService.#ctor(Tunynet.Common.Repositories.ITenantTypeRepository)">
            <summary>
            构造器
            </summary>
            <param name="userDataRepository">用户数据仓储</param>
        </member>
        <member name="M:Tunynet.Common.TenantTypeService.Gets(System.String,System.Nullable{System.Int32})">
            <summary>
            依据服务或应用获取租户类型
            </summary>
            <param name="serviceKey">服务标识</param>
            <param name="applicationId">应用Id</param>
            <returns>如未满足条件的TenantType则返回空集合</returns>
        </member>
        <member name="M:Tunynet.Common.TenantTypeService.Get(System.String)">
            <summary>
            依据tenantTypeId获取租户类型
            </summary>
            <param name="tenantTypeId">租户类型Id</param>
            <returns></returns>
        </member>
        <member name="T:Tunynet.Common.School">
            <summary>
            学校实体类
            </summary>
        </member>
        <member name="P:Tunynet.Common.School.Id">
            <summary>
            标识列
            </summary>
        </member>
        <member name="P:Tunynet.Common.School.Name">
            <summary>
            院校名称
            </summary>
        </member>
        <member name="P:Tunynet.Common.School.PinyinName">
            <summary>
            名称的拼音（例如“汉语”：hanyu）
            </summary>
        </member>
        <member name="P:Tunynet.Common.School.ShortPinyinName">
            <summary>
            名称的简写拼音（例如“汉语”的简写拼音：hy）
            </summary>
        </member>
        <member name="P:Tunynet.Common.School.SchoolType">
            <summary>
            学校类型
            </summary>
        </member>
        <member name="P:Tunynet.Common.School.AreaCode">
            <summary>
            所在地区编码
            </summary>
        </member>
        <member name="P:Tunynet.Common.School.DisplayOrder">
            <summary>
            排序序号
            </summary>
        </member>
        <member name="T:Tunynet.Common.SchoolService">
            <summary>
            学校业务逻辑类
            </summary>
        </member>
        <member name="M:Tunynet.Common.SchoolService.#ctor">
            <summary>
            构造器方法
            </summary>
        </member>
        <member name="M:Tunynet.Common.SchoolService.#ctor(Tunynet.Common.Repositories.ISchoolRepository)">
            <summary>
            构造器方法
            </summary>
            <param name="schoolRepository"></param>
        </member>
        <member name="M:Tunynet.Common.SchoolService.Create(Tunynet.Common.School)">
            <summary>
            添加学校
            </summary>
        </member>
        <member name="M:Tunynet.Common.SchoolService.Update(Tunynet.Common.School)">
            <summary>
            更新学校
            </summary>
            <param name="school">要更新的学校</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.SchoolService.Delete(System.Int64)">
            <summary>
            删除学校
            </summary>
            <param name="schoolId">学校编码</param>
        </member>
        <member name="M:Tunynet.Common.SchoolService.ChangeDisplayOrder(System.Int64,System.Int64)">
            <summary>
            变更学校的排列顺序
            </summary>
            <param name="id">待调整的Id</param>
            <param name="referenceId">参照Id</param>        
        </member>
        <member name="M:Tunynet.Common.SchoolService.Get(System.Int64)">
            <summary>
            获取学校统计信息
            </summary>
        </member>
        <member name="M:Tunynet.Common.SchoolService.Gets(System.String,System.String,System.Nullable{Tunynet.Common.SchoolType},System.Int32,System.Int32)">
            <summary>
            查询学校
            </summary>
            <param name="areaCode">地区编码</param>
            <param name="keyword">关键词（支持拼音搜索）</param>
            <param name="schoolType"></param>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <returns></returns>
        </member>
        <member name="T:Tunynet.Common.Repositories.SchoolRepository">
            <summary>
            地区的数据访问类
            </summary>
        </member>
        <member name="T:Tunynet.Common.Repositories.ISchoolRepository">
            <summary>
            地区访问的接口
            </summary>
        </member>
        <member name="M:Tunynet.Common.Repositories.ISchoolRepository.ChangeDisplayOrder(System.Int64,System.Int64)">
            <summary>
            交换学校排列顺序
            </summary>
        </member>
        <member name="M:Tunynet.Common.Repositories.ISchoolRepository.Gets(System.String,System.String,System.Nullable{Tunynet.Common.SchoolType},System.Int32,System.Int32)">
            <summary>
            获取学校
            </summary>
            <param name="areaCode"></param>
            <param name="keyword"></param>
            <param name="schoolType"></param>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.SchoolRepository.ChangeDisplayOrder(System.Int64,System.Int64)">
            <summary>
            交换学校排列顺序
            </summary>
        </member>
        <member name="M:Tunynet.Common.Repositories.SchoolRepository.Gets(System.String,System.String,System.Nullable{Tunynet.Common.SchoolType},System.Int32,System.Int32)">
            <summary>
            获取学校
            </summary>
            <param name="areaCode">地区编码</param>
            <param name="keyword">关键字</param>
            <param name="schoolType">学校类型</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.SchoolRepository.GetSql_Gets(System.String,System.String,System.Nullable{Tunynet.Common.SchoolType})">
            <summary>
            获取Sql
            </summary>
            <param name="areaCode">地区编码</param>
            <param name="keyword">关键字</param>
            <param name="schoolType">学校类型</param>
            <returns></returns>
        </member>
        <member name="T:Tunynet.Common.Activity">
            <summary>
            动态的实体类
            </summary>
        </member>
        <member name="M:Tunynet.Common.Activity.New">
            <summary>
            新建实体时使用
            </summary>
        </member>
        <member name="P:Tunynet.Common.Activity.ActivityId">
             <summary>
            ActivityId
             </summary>
        </member>
        <member name="P:Tunynet.Common.Activity.OwnerId">
             <summary>
            拥有者Id
             </summary>
        </member>
        <member name="P:Tunynet.Common.Activity.OwnerType">
             <summary>
            动态拥有者类型
             </summary>
        </member>
        <member name="P:Tunynet.Common.Activity.OwnerName">
             <summary>
            拥有者名称
             </summary>
        </member>
        <member name="P:Tunynet.Common.Activity.ActivityItemKey">
             <summary>
            动态项目标识
             </summary>
        </member>
        <member name="P:Tunynet.Common.Activity.ApplicationId">
             <summary>
            应用Id
             </summary>
        </member>
        <member name="P:Tunynet.Common.Activity.TenantTypeId">
             <summary>
            租户类型Id
             </summary>
        </member>
        <member name="P:Tunynet.Common.Activity.UserId">
             <summary>
            操作者Id
             </summary>
        </member>
        <member name="P:Tunynet.Common.Activity.SourceId">
             <summary>
            动态源内容id（例如：日志动态的日志Id）
             </summary>
        </member>
        <member name="P:Tunynet.Common.Activity.ReferenceId">
             <summary>
            涉及的Id（例如：评论动态的评论对象Id）
             </summary>
        </member>
        <member name="P:Tunynet.Common.Activity.ReferenceTenantTypeId">
             <summary>
            涉及对象的租户类型Id
             </summary>
        </member>
        <member name="P:Tunynet.Common.Activity.IsPrivate">
             <summary>
            是否私有（仅允许自己查看）
             </summary>
        </member>
        <member name="P:Tunynet.Common.Activity.IsOriginalThread">
             <summary>
            是否原创主题
             </summary>
        </member>
        <member name="P:Tunynet.Common.Activity.HasVideo">
             <summary>
            是否包含视频
             </summary>
        </member>
        <member name="P:Tunynet.Common.Activity.HasMusic">
             <summary>
            是否包含音乐
             </summary>
        </member>
        <member name="P:Tunynet.Common.Activity.HasImage">
             <summary>
            是否包含图片
             </summary>
        </member>
        <member name="P:Tunynet.Common.Activity.DateCreated">
             <summary>
            创建时间
             </summary>
        </member>
        <member name="P:Tunynet.Common.Activity.LastModified">
             <summary>
            最后更新时间
             </summary>
        </member>
        <member name="T:Tunynet.Common.ActivityItem">
            <summary>
            动态项目
            </summary>
        </member>
        <member name="M:Tunynet.Common.ActivityItem.New">
            <summary>
            新建实体时使用
            </summary>
        </member>
        <member name="P:Tunynet.Common.ActivityItem.ItemKey">
             <summary>
            动态项目标识
             </summary>
        </member>
        <member name="P:Tunynet.Common.ActivityItem.ApplicationId">
             <summary>
            应用程序Id
             </summary>
        </member>
        <member name="P:Tunynet.Common.ActivityItem.ItemName">
             <summary>
            项目名称
             </summary>
        </member>
        <member name="P:Tunynet.Common.ActivityItem.DisplayOrder">
             <summary>
            排序序号
             </summary>
        </member>
        <member name="P:Tunynet.Common.ActivityItem.Description">
             <summary>
            描述
             </summary>
        </member>
        <member name="P:Tunynet.Common.ActivityItem.IsOnlyOnce">
             <summary>
            每个Owner是否仅生成一个动态
             </summary>
        </member>
        <member name="P:Tunynet.Common.ActivityItem.IsUserReceived">
             <summary>
            是否推送给用户
             </summary>
        </member>
        <member name="P:Tunynet.Common.ActivityItem.IsSiteReceived">
             <summary>
            是否推送给站点
             </summary>
        </member>
        <member name="T:Tunynet.Common.ActivityItemKeys">
            <summary>
            动态项目标识
            </summary>
        </member>
        <member name="T:Tunynet.Common.ActivityItemUserSetting">
            <summary>
            动态项目用户设置
            </summary>
        </member>
        <member name="M:Tunynet.Common.ActivityItemUserSetting.New">
            <summary>
            新建实体时使用
            </summary>
        </member>
        <member name="P:Tunynet.Common.ActivityItemUserSetting.Id">
             <summary>
            Id
             </summary>
        </member>
        <member name="P:Tunynet.Common.ActivityItemUserSetting.UserId">
             <summary>
            用户Id
             </summary>
        </member>
        <member name="P:Tunynet.Common.ActivityItemUserSetting.ItemKey">
             <summary>
            动态项目标识
             </summary>
        </member>
        <member name="P:Tunynet.Common.ActivityItemUserSetting.IsReceived">
             <summary>
            是否接收
             </summary>
        </member>
        <member name="T:Tunynet.Common.ActivityOwnerTypes">
            <summary>
            动态拥有者类型
            </summary>
        </member>
        <member name="M:Tunynet.Common.ActivityOwnerTypes.User">
            <summary>
            用户
            </summary>
        </member>
        <member name="M:Tunynet.Common.ActivityOwnerTypes.Group">
            <summary>
            群组
            </summary>
        </member>
        <member name="T:Tunynet.Common.ActivityService">
            <summary>
            动态业务逻辑类
            </summary>
        </member>
        <member name="M:Tunynet.Common.ActivityService.#ctor">
            <summary>
            构造器
            </summary>
        </member>
        <member name="M:Tunynet.Common.ActivityService.#ctor(Tunynet.Common.Repositories.IActivityRepository,Tunynet.Common.Repositories.IActivityItemRepository,Tunynet.Common.Repositories.IActivityItemUserSettingRepository)">
            <summary>
            构造器
            </summary>
            <param name="activityRepository">ActivityRepository仓储</param>
            <param name="activityItemRepository">activityItemRepository仓储</param>
            <param name="activityItemUserSettingRepository">activityItemUserSettingRepository仓储</param>
        </member>
        <member name="M:Tunynet.Common.ActivityService.Generate(Tunynet.Common.Activity,System.Boolean,System.Boolean)">
            <summary>
            生成动态
            </summary>
            <param name="activity">待生成的动态</param>
            <param name="toMyInbox">是否加入我的动态收件箱</param>
            <param name="isPublic">是否是公开的</param>
        </member>
        <member name="M:Tunynet.Common.ActivityService.isExistInSiteBox(System.Int64)">
            判断动态是否存在在站点动态里
        </member>
        <member name="M:Tunynet.Common.ActivityService.DeleteActivity(System.Int64)">
            <summary>
            删除拥有者动态
            </summary>
            <param name="activityId">动态Id</param>
        </member>
        <member name="M:Tunynet.Common.ActivityService.CleanByUser(System.Int64)">
            <summary>
            根据用户删除用户动态（删除用户时使用）
            </summary>
        </member>
        <member name="M:Tunynet.Common.ActivityService.DeleteSource(System.String,System.Int64)">
            <summary>
            删除动态源时删除动态
            </summary>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="sourceId">动态源内容id</param>
        </member>
        <member name="M:Tunynet.Common.ActivityService.UpdatePrivateStatus(System.Int64,System.Boolean,System.Boolean)">
            <summary>
            更新动态的私有状态
            </summary>
        </member>
        <member name="M:Tunynet.Common.ActivityService.UpdateLastModified(System.Int64)">
            <summary>
            把动态最后更新时间设置为当前时间
            </summary>
            <param name="activityId"></param>
        </member>
        <member name="M:Tunynet.Common.ActivityService.UpdateLastModified(System.String,System.Int64)">
            <summary>
            主体内容动态的最后更新时间设置为当前时间
            </summary>
            <param name="tenantTypeId"></param>
            <param name="sourceId"></param>
        </member>
        <member name="M:Tunynet.Common.ActivityService.DeleteFromUserInbox(System.Int64,System.Int64)">
            <summary>
            从用户收件箱移除动态
            </summary>
            <param name="userId">用户Id</param>
            <param name="activityId">动态Id</param>
        </member>
        <member name="M:Tunynet.Common.ActivityService.DeleteFromSiteInbox(System.Int64)">
            <summary>
            从站点收件箱移除动态
            </summary>
            <param name="activityId">动态Id</param>
        </member>
        <member name="M:Tunynet.Common.ActivityService.RemoveInboxAboutOwner(System.Int64,System.Int64,System.Int32)">
            <summary>
            从用户动态收件箱移除OwnerId的所有动态
            </summary>
            <remarks>
            取消关注/退出群组、屏蔽用户/屏蔽群组时使用
            </remarks>
            <param name="userId">UserId</param>
            <param name="ownerType">动态拥有者类型</param>
            <param name="ownerId">动态拥有者Id</param>
        </member>
        <member name="M:Tunynet.Common.ActivityService.TraceBackInboxAboutOwner(System.Int64,System.Int64,System.Int32)">
            <summary>
            在用户动态收件箱追溯OwnerId的动态
            </summary>
            <remarks>
            关注用户/加入群组、取消屏蔽用户/取消屏蔽群组时使用
            </remarks>
            <param name="userId">UserId</param>
            <param name="ownerId">动态拥有者Id</param>
            <param name="ownerType">动态拥有者类型</param>
        </member>
        <member name="M:Tunynet.Common.ActivityService.Get(System.Int64)">
            <summary>
            获取某条动态
            </summary>
            <param name="activityId"></param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.ActivityService.Get(System.String,System.Int64)">
            <summary>
            获取某条动态
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.ActivityService.GetMyTimeline(System.Int64,System.Nullable{System.Int64},System.Nullable{System.Int32},System.Nullable{Tunynet.Common.MediaType},System.Nullable{System.Boolean},System.Int32,System.Collections.Generic.List{System.String})">
             <summary>
             获取用户的时间线
             </summary>
             <param name="userId">用户Id</param>
             <param name="followGroupId"><para>关注用户分组Id</para><remarks>groupId为-1时获取相互关注的用户，为null时获取所有用户</remarks></param>
             <param name="applicationId">应用Id</param>
             <param name="mediaType"><see cref="T:Tunynet.Common.MediaType"/></param>
             <param name="isOriginalThread">是不是原创主题</param>
             <param name="pageIndex">页码</param>
             <param name="isMobileClient">是否是移动客户端（针对于移动客户端，用来过滤动态）</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.ActivityService.GetNewerCount(System.Int64,System.Int64,System.Nullable{System.Int32},System.String@,System.Nullable{System.Int32},System.Nullable{System.Int64})">
            <summary>
            查询自lastActivityId以后又有多少动态进入用户的时间线
            </summary>
            <param name="ownerId">拥有者Id</param>
            <param name="lastActivityId">上次最后呈现的ActivityId</param>
            <param name="applicationId">应用Id</param>
            <param name="operatorName">返回首个动态操作者名称</param>
            <param name="ownerType">动态拥有者类型</param>
            <param name="exceptUserId">需要排除的用户Id</param>
            <returns>自lastActivityId以后进入用户时间线的动态个数</returns>
        </member>
        <member name="M:Tunynet.Common.ActivityService.GetNewerActivities(System.Int64,System.Int64,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int64})">
            <summary>
            查询自lastActivityId以后进入用户时间线的动态
            </summary>
            <param name="ownerId">拥有者Id</param>
            <param name="lastActivityId">上次最后呈现的ActivityId</param>
            <param name="applicationId">应用Id</param>
            <param name="ownerType">动态拥有者类型</param>
            <param name="exceptUserId">需要排除的用户Id</param>
            <returns>lastActivityId</returns>
        </member>
        <member name="M:Tunynet.Common.ActivityService.GetOwnerActivities(System.Int32,System.Int64,System.Nullable{System.Int32},System.Nullable{Tunynet.Common.MediaType},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Int32,System.Nullable{System.Int64},System.Nullable{System.Boolean})">
             <summary>
             获取拥有者的动态
             </summary>
             <param name="ownerType">动态拥有者类型</param>
             <param name="ownerId">动态拥有者Id</param>        
             <param name="applicationId">应用Id</param>
             <param name="mediaType">媒体类型</param>
             <param name="isOriginalThread">是否原创</param>
             <param name="pageIndex">页码</param>
             <param name="userId">用户Id</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.ActivityService.GetSiteActivities(System.Nullable{System.Int32},System.Int32,System.Int32)">
             <summary>
             获取站点动态
             </summary>
             <param name="applicationId">应用Id</param>
             <param name="pageIndex">页码</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.ActivityService.GetActivityItems">
            <summary>
            获取所有的动态项目
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.ActivityService.GetActivityItem(System.String)">
            <summary>
            获取动态项目
            </summary>
            <param name="itemKey">动态项目标识</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.ActivityService.UpdateActivityItems(System.Collections.Generic.IEnumerable{Tunynet.Common.ActivityItem})">
            <summary>
            更新动态项目
            </summary>
            <param name="activityItems">动态项目集合</param>
        </member>
        <member name="M:Tunynet.Common.ActivityService.UpdateActivityItemUserSettings(System.Int64,System.Collections.Generic.Dictionary{System.String,System.Boolean})">
            <summary>
            更新用户的动态设置
            </summary>
            <param name="userId">用户Id</param>
            <param name="userSettigns"><remarks>key=itemKey,value=IsReceived</remarks></param>
        </member>
        <member name="M:Tunynet.Common.ActivityService.GetActivityItemUserSettings(System.Int64)">
            <summary>
            获取用户的动态设置
            </summary>
            <param name="userId">用户Id</param>
            <returns><para>如果用户无设置返回空集合</para><remarks>key=itemKey,value=IsReceived</remarks></returns>
        </member>
        <member name="T:Tunynet.Common.Configuration.ActivitySettings">
            <summary>
            动态配置
            </summary>
        </member>
        <member name="P:Tunynet.Common.Configuration.ActivitySettings.TraceBackNumber">
            <summary>
            关注用户/加入群组时追溯添加的动态条数
            </summary>
        </member>
        <member name="T:Tunynet.Common.IActivityReceiverGetter">
            <summary>
            动态接收人获取器
            </summary>
        </member>
        <member name="M:Tunynet.Common.IActivityReceiverGetter.GetReceiverUserIds(Tunynet.Common.ActivityService,Tunynet.Common.Activity)">
            <summary>
            获取接收人UserId集合
            </summary>
            <param name="activityService">动态业务逻辑类</param>
            <param name="activity">动态</param>
            <returns></returns>
        </member>
        <member name="T:Tunynet.Common.Repositories.ActivityItemRepository">
            <summary>
            动态项目仓储
            </summary>
        </member>
        <member name="T:Tunynet.Common.Repositories.IActivityItemRepository">
            <summary>
            动态项目仓储接口
            </summary>
        </member>
        <member name="M:Tunynet.Common.Repositories.ActivityItemRepository.UpdateActivityItems(System.Collections.Generic.IEnumerable{Tunynet.Common.ActivityItem})">
            <summary>
            更新动态项目（仅更新IsUserReceived、IsSiteReceived）
            </summary>
            <param name="activityItems">准备更新的动态项目</param>
        </member>
        <member name="T:Tunynet.Common.Repositories.ActivityItemUserSettingRepository">
            <summary>
            用户动态设置仓储
            </summary>
        </member>
        <member name="T:Tunynet.Common.Repositories.IActivityItemUserSettingRepository">
            <summary>
            用户动态设置仓储接口
            </summary>
        </member>
        <member name="M:Tunynet.Common.Repositories.ActivityItemUserSettingRepository.CreateDAO">
            <summary>
            默认Database实例
            </summary>
        </member>
        <member name="M:Tunynet.Common.Repositories.ActivityItemUserSettingRepository.UpdateActivityItemUserSettings(System.Int64,System.Collections.Generic.Dictionary{System.String,System.Boolean})">
            <summary>
            更新用户动态设置
            </summary>
            <param name="userId">用户id</param>
            <param name="userSettings">用户设置</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.ActivityItemUserSettingRepository.GetActivityItemUserSettings(System.Int64)">
            <summary>
            获取用户设置
            </summary>
            <param name="userId">用户id</param>
            <returns>用户设置</returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.ActivityItemUserSettingRepository.GetCacheKey_ActivityItemUserSettings(System.Int64)">
            <summary>
            获取用户设置的cachekey
            </summary>
            <param name="userId">用户id</param>
            <returns>用户设置的cachekey</returns>
        </member>
        <member name="P:Tunynet.Common.Repositories.ActivityItemUserSettingRepository.RealTimeCacheHelper">
            <summary>
            缓存设置
            </summary>
        </member>
        <member name="T:Tunynet.Common.Repositories.ActivityRepository">
            <summary>
            动态仓储
            </summary>
        </member>
        <member name="T:Tunynet.Common.Repositories.IActivityRepository">
            <summary>
            动态仓储接口
            </summary>
        </member>
        <member name="M:Tunynet.Common.Repositories.IActivityRepository.UpdateLastModified(System.Int64)">
            <summary>
            把动态最后更新时间设置为当前时间
            </summary>
            <param name="activityId"></param>
        </member>
        <member name="M:Tunynet.Common.Repositories.IActivityRepository.CheckExistAndUpdateLastModified(System.Int64,System.Int32,System.String)">
            <summary>
            检测Owner是否已经存在某类（activityItemKey）动态，如果存在并更新最后更新时间
            </summary>
            <param name="ownerId"></param>
            <param name="ownerType"></param>
            <param name="activityItemKey"></param>
            <returns>如果存在返回true，否则返回false</returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.IActivityRepository.UpdateLastModified(System.String,System.Int64)">
            <summary>
            主体内容动态的最后更新时间设置为当前时间
            </summary>        
            <param name="tenantTypeId"></param>
            <param name="sourceId"></param>
        </member>
        <member name="M:Tunynet.Common.Repositories.IActivityRepository.CheckExistAndUpdateSource(Tunynet.Common.Activity)">
            <summary>
            判断用户是否对同一主体内容产生过从属内容动态，如果产生过则替换成本次操作
            </summary>
            <param name="activity"></param>
            <returns>存在返回true,否则返回false</returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.IActivityRepository.InsertUserInboxs(System.Int64,System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            将动态加入到用户动态收件箱
            </summary>
            <param name="activityId"></param>
            <param name="userIds"></param>
        </member>
        <member name="M:Tunynet.Common.Repositories.IActivityRepository.InsertSiteInbox(System.Int64)">
            <summary>
            将动态加入到站点动态收件箱
            </summary>
            <param name="activityId"></param>
        </member>
        <member name="M:Tunynet.Common.Repositories.IActivityRepository.UpdatePrivateStatus(System.Int64,System.Boolean)">
            <summary>
            更新动态的私有状态
            </summary>
            <param name="activityId"></param>
            <param name="isPrivate"></param>
        </member>
        <member name="M:Tunynet.Common.Repositories.IActivityRepository.DeleteActivity(System.Int64)">
            <summary>
            删除动态
            </summary>
            <param name="activityId"></param>
        </member>
        <member name="M:Tunynet.Common.Repositories.IActivityRepository.CleanByUser(System.Int64)">
            <summary>
            根据userid删除用户动态
            </summary>
            <param name="userId">用户的id</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.IActivityRepository.DeleteSource(System.String,System.Int64)">
            <summary>
            删除动态源时删除动态
            </summary>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="sourceId">动态源内容id</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.IActivityRepository.DeleteActivityFromUserInboxAndSiteInbox(System.Int64,System.Int64)">
            <summary>
            从用户收件箱和站点收件箱移除动态
            </summary>
            <remarks>
            保留动态操作者的收件箱
            </remarks>
            <param name="activityId"></param>
        </member>
        <member name="M:Tunynet.Common.Repositories.IActivityRepository.DeleteFromUserInbox(System.Int64,System.Int64)">
            <summary>
            从用户收件箱移除动态
            </summary>
            <param name="userId">用户Id</param>
            <param name="activityId">动态Id</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.IActivityRepository.DeleteFromSiteInbox(System.Int64)">
            <summary>
            从站点收件箱移除动态
            </summary>
            <param name="activityId">动态Id</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.IActivityRepository.RemoveInboxAboutOwner(System.Int64,System.Int64,System.Int32)">
            <summary>
            从用户动态收件箱移除OwnerId的所有动态
            </summary>
            <remarks>
            取消关注/退出群组、屏蔽用户/屏蔽群组时使用
            </remarks>
            <param name="userId">UserId</param>
            <param name="ownerType">动态拥有者类型</param>
            <param name="ownerId">动态拥有者Id</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.IActivityRepository.TraceBackInboxAboutOwner(System.Int64,System.Int64,System.Int32,System.Int32)">
            <summary>
            在用户动态收件箱追溯OwnerId的动态
            </summary>
            <remarks>
            关注用户/加入群组、取消屏蔽用户/取消屏蔽群组时使用
            </remarks>
            <param name="userId">UserId</param>
            <param name="ownerId">动态拥有者Id</param>
            <param name="ownerType">动态拥有者类型</param>
            <param name="traceBackNumber">追溯OwnerId的动态数</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.IActivityRepository.isExistInSiteBox(System.Int64)">
            <summary>
            动态是否存在在站点动态里
            </summary>
            <param name="activityId"></param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.IActivityRepository.GetMyTimeline(System.Int64,System.Nullable{System.Int64},System.Nullable{System.Int32},System.Nullable{Tunynet.Common.MediaType},System.Nullable{System.Boolean},System.Int32,System.Collections.Generic.List{System.String})">
             <summary>
             获取用户的时间线
             </summary>
             <param name="userId">用户Id</param>
             <param name="followGroupId"><para>关注用户分组Id</para><remarks>groupId为-1时获取相互关注的用户，为null时获取所有用户</remarks></param>
             <param name="applicationId">应用Id</param>
             <param name="mediaType"><see cref="T:Tunynet.Common.MediaType"/></param>
             <param name="isOriginalThread">是不是原创主题</param>
             <param name="pageIndex">页码</param>
             <param name="isMobileClient">是否是移动客户端（针对于移动客户端，用来过滤动态）</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.IActivityRepository.GetNewerCount(System.Int64,System.Int64,System.Nullable{System.Int32},System.Int64@,System.Nullable{System.Int32},System.Nullable{System.Int64})">
            <summary>
            查询自lastActivityId以后又有多少动态进入用户的时间线
            </summary>
            <param name="ownerId">拥有者Id</param>
            <param name="lastActivityId">上次最后呈现的ActivityId</param>
            <param name="applicationId">应用Id</param>
            <param name="userId">返回首个动态操作者Id</param>
            <param name="ownerType">动态拥有者类型</param>
            <param name="exceptUserId">需要排除的用户Id</param>
            <returns>自lastActivityId以后进入用户时间线的动态个数</returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.IActivityRepository.GetNewerActivities(System.Int64,System.Int64,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int64})">
            <summary>
            查询自lastActivityId以后进入用户时间线的动态
            </summary>
            <param name="ownerId">拥有者Id</param>
            <param name="lastActivityId">上次最后呈现的ActivityId</param>
            <param name="applicationId">应用Id</param>
            <param name="ownerType">动态拥有者类型</param>
            <param name="exceptUserId">需要排除的用户Id</param>
            <returns>lastActivityId</returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.IActivityRepository.GetOwnerActivities(System.Int32,System.Int64,System.Nullable{System.Int32},System.Nullable{Tunynet.Common.MediaType},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Int32,System.Nullable{System.Int64},System.Nullable{System.Boolean})">
             <summary>
             获取拥有者的动态
             </summary>
             <param name="ownerType">动态拥有者类型</param>
             <param name="ownerId">动态拥有者Id</param>        
             <param name="applicationId">应用Id</param>
             <param name="mediaType">媒体类型</param>
             <param name="isOriginalThread">是否原创</param>
             <param name="pageIndex">页码</param>
             <param name="userId">用户Id</param>
             <param name="isMobileClient">是否是移动客户端（针对于移动客户端，用来过滤动态）</param> 
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.IActivityRepository.GetSiteActivities(System.Nullable{System.Int32},System.Int32,System.Int32)">
             <summary>
             获取站点动态
             </summary>
             <param name="applicationId">应用Id</param>
             <param name="pageIndex">页码</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.IActivityRepository.Get(System.String,System.Int64)">
            <summary>
            获取某条动态
            </summary>
            <param name="tenantTypeId"></param>
            <param name="sourceId"></param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.ActivityRepository.Insert(Tunynet.Common.Activity)">
            <summary>
            创建拥有者动态
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.ActivityRepository.InsertUserInboxs(System.Int64,System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            将动态加入到用户动态收件箱
            </summary>
            <param name="activityId"></param>
            <param name="userIds"></param>
        </member>
        <member name="M:Tunynet.Common.Repositories.ActivityRepository.InsertSiteInbox(System.Int64)">
            <summary>
            将动态加入到站点动态收件箱
            </summary>
            <param name="activityId"></param>
        </member>
        <member name="M:Tunynet.Common.Repositories.ActivityRepository.UpdateLastModified(System.Int64)">
            <summary>
            把动态最后更新时间设置为当前时间
            </summary>
            <param name="activityId"></param>
        </member>
        <member name="M:Tunynet.Common.Repositories.ActivityRepository.CheckExistAndUpdateLastModified(System.Int64,System.Int32,System.String)">
            <summary>
            把动态最后更新时间设置为当前时间
            </summary>
            <param name="ownerId"></param>
            <param name="ownerType"></param>
            <param name="activityItemKey"></param>
        </member>
        <member name="M:Tunynet.Common.Repositories.ActivityRepository.UpdateLastModified(System.String,System.Int64)">
            <summary>
            主体内容动态的最后更新时间设置为当前时间
            </summary>        
            <param name="tenantTypeId"></param>
            <param name="sourceId"></param>
        </member>
        <member name="M:Tunynet.Common.Repositories.ActivityRepository.CheckExistAndUpdateSource(Tunynet.Common.Activity)">
            <summary>
            判断用户是否对同一主体内容产生过从属内容动态，如果产生过则替换成本次操作
            </summary>
            <param name="activity"></param>
            <returns>true-更新成功，false-不存在OwnerType+TenantTypeId+ReferenceId的动态记录</returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.ActivityRepository.UpdatePrivateStatus(System.Int64,System.Boolean)">
            <summary>
            更新动态的私有状态
            </summary>
            <param name="activityId"></param>
            <param name="isPrivate"></param>
        </member>
        <member name="M:Tunynet.Common.Repositories.ActivityRepository.CleanByUser(System.Int64)">
            <summary>
            根据userid删除用户动态
            </summary>
            <param name="userId">用户的id</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.ActivityRepository.DeleteActivity(System.Int64)">
            <summary>
            删除拥有者动态
            </summary>
            <param name="activityId"></param>
        </member>
        <member name="M:Tunynet.Common.Repositories.ActivityRepository.DeleteSource(System.String,System.Int64)">
            <summary>
            删除动态源时删除动态
            </summary>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="sourceId">动态源内容id</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.ActivityRepository.DeleteActivityFromUserInboxAndSiteInbox(System.Int64,System.Int64)">
            <summary>
            从用户收件箱和站点收件箱移除动态
            </summary>
            <remarks>保留动态操作者的收件箱</remarks>
            <param name="activityId"></param>
        </member>
        <member name="M:Tunynet.Common.Repositories.ActivityRepository.DeleteFromUserInbox(System.Int64,System.Int64)">
            <summary>
            从用户收件箱移除动态
            </summary>
            <param name="userId">用户Id</param>
            <param name="activityId">动态Id</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.ActivityRepository.DeleteFromSiteInbox(System.Int64)">
            <summary>
            从站点收件箱移除动态
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:Tunynet.Common.Repositories.ActivityRepository.RemoveInboxAboutOwner(System.Int64,System.Int64,System.Int32)">
            <summary>
            从用户动态收件箱移除OwnerId的所有动态
            </summary>
            <remarks>
            取消关注/退出群组、屏蔽用户/屏蔽群组时使用
            </remarks>
            <param name="userId">UserId</param>
            <param name="ownerType">动态拥有者类型</param>
            <param name="ownerId">动态拥有者Id</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.ActivityRepository.TraceBackInboxAboutOwner(System.Int64,System.Int64,System.Int32,System.Int32)">
            <summary>
            在用户动态收件箱追溯OwnerId的动态
            </summary>
            <remarks>
            关注用户/加入群组、取消屏蔽用户/取消屏蔽群组时使用
            </remarks>
            <param name="userId">UserId</param>
            <param name="ownerId">动态拥有者Id</param>
            <param name="ownerType">动态拥有者类型</param>
            <param name="traceBackNumber">追溯OwnerId的动态数</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.ActivityRepository.Get(System.String,System.Int64)">
            <summary>
            获取某条动态
            </summary>
            <param name="tenantTypeId"></param>
            <param name="sourceId"></param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.ActivityRepository.GetMyTimeline(System.Int64,System.Nullable{System.Int64},System.Nullable{System.Int32},System.Nullable{Tunynet.Common.MediaType},System.Nullable{System.Boolean},System.Int32,System.Collections.Generic.List{System.String})">
             <summary>
             获取用户的时间线
             </summary>
             <param name="userId">用户Id</param>
             <param name="followGroupId"><para>关注用户分组Id</para><remarks>groupId为-1时获取相互关注的用户，为null时获取所有用户</remarks></param>
             <param name="applicationId">应用Id</param>
             <param name="mediaType"><see cref="T:Tunynet.Common.MediaType"/></param>
             <param name="isOriginalThread">是不是原创主题</param>
             <param name="pageIndex">页码</param>
             <param name="applicationIds">是否是移动客户端（针对于移动客户端，用来过滤动态）</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.ActivityRepository.GetNewerCount(System.Int64,System.Int64,System.Nullable{System.Int32},System.Int64@,System.Nullable{System.Int32},System.Nullable{System.Int64})">
            <summary>
            查询自lastActivityId以后又有多少动态进入用户的时间线
            </summary>
            <param name="ownerId">拥有者Id</param>
            <param name="lastActivityId">上次最后呈现的ActivityId</param>
            <param name="applicationId">应用Id</param>
            <param name="userId">返回首个动态操作者Id</param>
            <param name="ownerType">动态拥有者类型</param>
            <param name="exceptUserId">需要排除的用户Id</param>
            <returns>自lastActivityId以后进入用户时间线的动态个数</returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.ActivityRepository.GetNewerActivities(System.Int64,System.Int64,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int64})">
            <summary>
            查询自lastActivityId以后进入用户时间线的动态
            </summary>
            <param name="ownerId">拥有者Id</param>
            <param name="lastActivityId">上次最后呈现的ActivityId</param>
            <param name="applicationId">应用Id</param>
            <param name="ownerType">动态拥有者类型</param>
            <param name="exceptUserId">需要排除的用户Id</param>
            <returns>lastActivityId</returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.ActivityRepository.GetOwnerActivities(System.Int32,System.Int64,System.Nullable{System.Int32},System.Nullable{Tunynet.Common.MediaType},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Int32,System.Nullable{System.Int64},System.Nullable{System.Boolean})">
             <summary>
             获取拥有者的动态
             </summary>
             <param name="ownerType">动态拥有者类型</param>
             <param name="ownerId">动态拥有者Id</param>        
             <param name="applicationId">应用Id</param>
             <param name="mediaType">媒体类型</param>
             <param name="isOriginalThread">是否原创</param>
             <param name="pageIndex">页码</param>
             <param name="userId">用户Id</param>
             <param name="isMobileClient">是否是移动客户端（针对于移动客户端，用来过滤动态）</param> 
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.ActivityRepository.GetSiteActivities(System.Nullable{System.Int32},System.Int32,System.Int32)">
             <summary>
             获取站点动态
             </summary>
             <param name="applicationId">应用Id</param>
             <param name="pageIndex">页码</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.ActivityRepository.isExistInSiteBox(System.Int64)">
            <summary>
            动态是否存在在站点中
            </summary>
            <param name="activityId"></param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.ActivityRepository.PopulateEntitiesByEntityIds``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            加载动态的同时，加载用户实体列表
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entityIds"></param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.ActivityRepository.GetCacheKey_NewerCount(System.Int64,System.Int64,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int64})">
            <summary>
            获取新动态数量缓存Key
            </summary>
            <param name="ownerId"></param>
            <param name="lastActivityId"></param>
            <param name="applicationId"></param>
            <returns></returns>
        </member>
        <member name="P:Tunynet.Common.Repositories.ActivityRepository.PrimaryMaxRecords">
            <summary>
            最大返回记录数
            </summary>
        </member>
        <member name="T:Tunynet.Common.UserActivityReceiverGetter">
            <summary>
            用户动态接收人获取器
            </summary>
        </member>
        <member name="M:Tunynet.Common.UserActivityReceiverGetter.Tunynet#Common#IActivityReceiverGetter#GetReceiverUserIds(Tunynet.Common.ActivityService,Tunynet.Common.Activity)">
            <summary>
            获取接收人UserId集合
            </summary>
            <param name="activityService">动态业务逻辑类</param>
            <param name="activity">动态</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.UserActivityReceiverGetter.IsReceiveActivity(Tunynet.Common.ActivityService,System.Int64,Tunynet.Common.Activity)">
            <summary>
            检查用户是否接收动态
            </summary>
            <param name="userId">UserId</param>
            <param name="activityItemKey">动态项目标识</param>
            <param name="fromOwnerId">动态拥有者</param>
            <returns>接收动态返回true，否则返回false</returns>
        </member>
        <member name="T:Tunynet.Common.InvitationSettings">
            <summary>
            站点请求设置
            </summary>
        </member>
        <member name="P:Tunynet.Common.InvitationSettings.InvitationTypeSettingses">
            <summary>
            站点请求设置集合
            </summary>
        </member>
        <member name="T:Tunynet.Common.InvitationTypeSettings">
            <summary>
            请求类型设置实体类
            </summary>
        </member>
        <member name="P:Tunynet.Common.InvitationTypeSettings.TypeKey">
            <summary>
            类型Key
            </summary>
        </member>
        <member name="P:Tunynet.Common.InvitationTypeSettings.IsAllow">
            <summary>
            是否允许
            </summary>
        </member>
        <member name="T:Tunynet.Common.Invitation">
            <summary>
            实体的实体类
            </summary>
        </member>
        <member name="M:Tunynet.Common.Invitation.New">
            <summary>
            新建实体时使用
            </summary>
        </member>
        <member name="M:Tunynet.Common.Invitation.GetResolvedBody">
            <summary>
            获取解析过的请求内容
            </summary>
            <param name="status">请求处理状态</param>
            <returns>解析过的请求内容</returns>
        </member>
        <member name="P:Tunynet.Common.Invitation.Id">
             <summary>
            id
             </summary>
        </member>
        <member name="P:Tunynet.Common.Invitation.ApplicationId">
             <summary>
            应用id
             </summary>
        </member>
        <member name="P:Tunynet.Common.Invitation.InvitationTypeKey">
             <summary>
            请求类型key
             </summary>
        </member>
        <member name="P:Tunynet.Common.Invitation.UserId">
             <summary>
            请求接收人用户id
             </summary>
        </member>
        <member name="P:Tunynet.Common.Invitation.SenderUserId">
             <summary>
            请求发送人用户id
             </summary>
        </member>
        <member name="P:Tunynet.Common.Invitation.Sender">
             <summary>
            请求发送人
             </summary>
        </member>
        <member name="P:Tunynet.Common.Invitation.RelativeObjectName">
             <summary>
            相关项对象名称
             </summary>
        </member>
        <member name="P:Tunynet.Common.Invitation.RelativeObjectId">
             <summary>
            相关项对象id
             </summary>
        </member>
        <member name="P:Tunynet.Common.Invitation.RelativeObjectUrl">
             <summary>
            相关项对象链接地址
             </summary>
        </member>
        <member name="P:Tunynet.Common.Invitation.Status">
             <summary>
            请求状态  0= Unhandled:未处理；1= Accept接受；2=Refuse 拒绝；
             </summary>
        </member>
        <member name="P:Tunynet.Common.Invitation.DateCreated">
             <summary>
            创建时间
             </summary>
        </member>
        <member name="P:Tunynet.Common.Invitation.Remark">
            <summary>
            附注
            </summary>
        </member>
        <member name="P:Tunynet.Common.Invitation.SenderUrl">
            <summary>
            请求发送人的空间主页地址
            </summary>
        </member>
        <member name="T:Tunynet.Common.InvitationBuilder">
            <summary>
            请求构建器
            </summary>
        </member>
        <member name="M:Tunynet.Common.InvitationBuilder.Instance">
            <summary>
            获取InvitationBuilder实例
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.InvitationBuilder.Resolve(System.Object,Tunynet.Common.InvitationStatus)">
            <summary>
            生成请求内容
            </summary>
            <param name="Invitation">请求实体</param>
            <param name="status">请求状态</param>
            <returns>返回生成的请求内容</returns>
        </member>
        <member name="M:Tunynet.Common.InvitationBuilder.LoadInvitationTemplates">
            <summary>
            加载Invitation模板
            </summary>
        </member>
        <member name="T:Tunynet.Common.InvitationService">
            <summary>
            请求业务逻辑类
            </summary>
        </member>
        <member name="M:Tunynet.Common.InvitationService.#ctor">
            <summary>
            构造器
            </summary>
        </member>
        <member name="M:Tunynet.Common.InvitationService.#ctor(Tunynet.Common.Repositories.IInvitationRepository,Tunynet.Common.Repositories.IUserInvitationSettingsRepository)">
            <summary>
            构造器
            </summary>
        </member>
        <member name="M:Tunynet.Common.InvitationService.Create(Tunynet.Common.Invitation)">
            <summary>
            创建请求
            </summary>
            <param name="invitation">请求实体</param>
            <remarks>已检查请求设置</remarks>
        </member>
        <member name="M:Tunynet.Common.InvitationService.Delete(System.Int64)">
            <summary>
            删除单条请求
            </summary>
            <param name="id">请求Id</param>
        </member>
        <member name="M:Tunynet.Common.InvitationService.ClearAll(System.Int64)">
            <summary>
            清空接收人的请求记录
            </summary>
            <param name="userId">接收人Id</param>
        </member>
        <member name="M:Tunynet.Common.InvitationService.CleanByUser(System.Int64)">
            <summary>
            删除用户的所有记录（删除用户的时候使用）
            </summary>
            <param name="userId">用户id</param>
        </member>
        <member name="M:Tunynet.Common.InvitationService.SetStatus(System.Int64,Tunynet.Common.InvitationStatus)">
            <summary>
            设置邀请状态
            </summary>
            <param name="id">请求id</param>
            <param name="status">需设置的请求状态</param>
        </member>
        <member name="M:Tunynet.Common.InvitationService.BatchSetStatus(System.Int64,Tunynet.Common.InvitationStatus)">
            <summary>
            批量设置邀请状态
            </summary>
            <param name="userId">请求接收人Id</param>
            <param name="status">需设置的请求状态</param>
        </member>
        <member name="M:Tunynet.Common.InvitationService.Get(System.Int64)">
            <summary>
            获取单个请求实体
            </summary>
            <param name="id">请求实体Id</param>
            <returns>请求实体</returns>
        </member>
        <member name="M:Tunynet.Common.InvitationService.GetMyInvitationUserId(System.Int64,System.String,System.Int32)">
            <summary>
            获取我请求过的用户id
            </summary>
            <param name="senderUserId">发送者id</param>
            <param name="invitationTypeKey">请求类型</param>
            <param name="applicationId">类型id</param>
            <returns>我请求过的用户id</returns>
        </member>
        <member name="M:Tunynet.Common.InvitationService.IsSendedInvitation(System.Int64,System.Int64,System.String,System.Int32)">
            <summary>
            是否发送过邀请
            </summary>
            <param name="senderUserId">发送者id</param>
            <param name="invitationTypeKey">请求类型</param>
            <param name="toUserId">被验证的用户Id</param>
            <param name="applicationId">类型id</param>
            <returns>是否发送过</returns>
        </member>
        <member name="M:Tunynet.Common.InvitationService.GetUnhandledCount(System.Int64)">
            <summary>
            获取某人的未处理请求数
            </summary>
        </member>
        <member name="M:Tunynet.Common.InvitationService.GetTops(System.Int64,System.Int32)">
            <summary>
            获取用户最近几条未处理的请求
            </summary>
            <param name="topNumber"></param>
            <param name="userId">请求接收人Id</param>
        </member>
        <member name="M:Tunynet.Common.InvitationService.Gets(System.Int64,System.Nullable{Tunynet.Common.InvitationStatus},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            获取用户请求的分页集合
            </summary>
            <param name="userId">用户Id</param>
            <param name="status">请求状态</param>
            <param name="invitationTypeKey">请求类型Key</param>
            <param name="applicationId">应用Id</param>
            <param name="pageIndex">页码</param>
            <returns>请求分页集合</returns>
        </member>
        <member name="M:Tunynet.Common.InvitationService.IsAllowedSend(System.Int64,System.String)">
            <summary>
            用户对某类型是否允许发送请求
            </summary>
            <param name="userId">用户Id</param>
            <param name="invitationTypeKey">请求类型Key</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.InvitationService.GetUserInvitationSettingses(System.Int64)">
            <summary>
            用户获取请求设置
            </summary>
            <param name="userId">用户Id</param>
            <returns>请求类型-是否接收设置集合</returns>
            <returns><para>如果用户无设置返回空集合</para><remarks>key=itemKey,value=IsReceived</remarks></returns>
        </member>
        <member name="M:Tunynet.Common.InvitationService.UpdateUserInvitationSettings(System.Int64,System.Collections.Generic.Dictionary{System.String,System.Boolean})">
            <summary>
            用户更新请求设置
            </summary>
            <param name="userId">用户Id</param>
            <param name="typeKey2IsAllowDictionary">请求类型-是否接收设置集合</param>
        </member>
        <member name="M:Tunynet.Common.InvitationService.GetUserReminderInfos">
            <summary>
            获取所有未处理的请求
            </summary>
            <returns></returns>
        </member>
        <member name="T:Tunynet.Common.InvitationStatus">
            <summary>
            请求处理状态
            </summary>
        </member>
        <member name="F:Tunynet.Common.InvitationStatus.Unhandled">
            <summary>
            未处理
            </summary>
        </member>
        <member name="F:Tunynet.Common.InvitationStatus.Accept">
            <summary>
            接受
            </summary>
        </member>
        <member name="F:Tunynet.Common.InvitationStatus.Refuse">
            <summary>
            拒绝
            </summary>
        </member>
        <member name="T:Tunynet.Common.InvitationTemplate">
            <summary>
            请求模板
            </summary>
        </member>
        <member name="M:Tunynet.Common.InvitationTemplate.#ctor(System.Xml.XmlNode)">
            <summary>
            InvitationTemplate构造器
            </summary>
            <param name="rootNode">InvitationTemplate所属xml文档节点</param>
        </member>
        <member name="P:Tunynet.Common.InvitationTemplate.InvitationTypeKey">
            <summary>
            模板名称（在Invitation模板中必须保证唯一）
            </summary>
        </member>
        <member name="P:Tunynet.Common.InvitationTemplate.UnhandledBody">
            <summary>
            未处理状态时的请求内容模板
            </summary>
        </member>
        <member name="P:Tunynet.Common.InvitationTemplate.AcceptBody">
            <summary>
            接受状态时的请求内容模板
            </summary>
        </member>
        <member name="P:Tunynet.Common.InvitationTemplate.RefuseBody">
            <summary>
            拒绝状态时的请求内容模板
            </summary>
        </member>
        <member name="T:Tunynet.Common.InvitationType">
            <summary>
            请求类型实体类
            </summary>
        </member>
        <member name="M:Tunynet.Common.InvitationType.#ctor">
            <summary>
            构造器
            </summary>
        </member>
        <member name="M:Tunynet.Common.InvitationType.GetAll">
            <summary>
            获取所有请求类型
            </summary>
            <returns>请求类型集合</returns>
        </member>
        <member name="M:Tunynet.Common.InvitationType.Get(System.String)">
            <summary>
            获取请求类型
            </summary>
            <param name="typeKey">类型Key</param>
            <returns>请求类型</returns>
        </member>
        <member name="M:Tunynet.Common.InvitationType.Register(Tunynet.Common.InvitationType)">
            <summary>
            注册请求类型
            </summary>
            <param name="InvitationType">请求类型</param>
        </member>
        <member name="P:Tunynet.Common.InvitationType.Key">
            <summary>
            类型Key
            </summary>
        </member>
        <member name="P:Tunynet.Common.InvitationType.Name">
            <summary>
            类型名称
            </summary>
        </member>
        <member name="P:Tunynet.Common.InvitationType.Description">
            <summary>
            类型描述
            </summary>
        </member>
        <member name="T:Tunynet.Common.InvitationTypeKeys">
            <summary>
            请求类型Key类
            </summary>
        </member>
        <member name="M:Tunynet.Common.InvitationTypeKeys.Instance">
            <summary>
            获取单例
            </summary>
            <returns></returns>
        </member>
        <member name="T:Tunynet.Common.Repositories.IInvitationRepository">
            <summary>
            请求数据访问接口
            </summary>
        </member>
        <member name="M:Tunynet.Common.Repositories.IInvitationRepository.ClearAll(System.Int64)">
            <summary>
            清空接收人的请求记录
            </summary>
            <param name="userId">接收人Id</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.IInvitationRepository.CleanByUser(System.Int64)">
            <summary>
            删除用户的请求数据（删除用户时使用）
            </summary>
            <param name="userId"></param>
        </member>
        <member name="M:Tunynet.Common.Repositories.IInvitationRepository.BatchSetStatus(System.Int64,Tunynet.Common.InvitationStatus)">
            <summary>
            批量更改处理状态
            </summary>
            <param name="userId">用户的id</param>
            <param name="status">要更改的状态</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.IInvitationRepository.GetTops(System.Int64,System.Int32)">
            <summary>
            获取用户最近几条未处理的通知
            </summary>
            <param name="userId">用户id</param>
            <param name="topNumber">获取最前面的条数</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.IInvitationRepository.SetStatus(Tunynet.Common.Invitation,Tunynet.Common.InvitationStatus)">
            <summary>
            更新请求状态
            </summary>
            <param name="invitation">状态的id</param>
            <param name="status">要更新的状态</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.IInvitationRepository.GetUnhandledCount(System.Int64)">
            <summary>
            获取用户未处理的请求数目
            </summary>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.IInvitationRepository.Gets(System.Int64,System.Nullable{Tunynet.Common.InvitationStatus},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            获取用户请求的分页集合
            </summary>
            <param name="userId">用户的id</param>
            <param name="status">通知状态</param>
            <param name="invitationTypeKey">通知类型</param>
            <param name="applicationId">应用id</param>
            <param name="pageIndex">页码</param>
            <returns>通知分页集合</returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.IInvitationRepository.GetUserReminderInfos">
            <summary>
            获取请求需提醒信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.IInvitationRepository.GetMyInvitationUserId(System.Int64,System.String,System.Int32)">
            <summary>
            获取我请求的用户id
            </summary>
            <param name="senderUserId">发送请求id</param>
            <param name="invitationTypeKey">请求类型</param>
            <param name="applicationId">applicationId</param>
            <returns>我请求过的用户id</returns>
        </member>
        <member name="T:Tunynet.Common.Repositories.InvitationRepository">
            <summary>
            请求数据访问
            </summary>
        </member>
        <member name="M:Tunynet.Common.Repositories.InvitationRepository.Insert(Tunynet.Common.Invitation)">
            <summary>
            创建请求的方法
            </summary>
            <param name="entity">请求实体</param>
            <returns>刚插入数据的id</returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.InvitationRepository.DeleteByEntityId(System.Object)">
            <summary>
            根据实体的id删除请求
            </summary>
            <param name="entityId">实体的id</param>
            <returns>被删除的条数</returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.InvitationRepository.SetStatus(Tunynet.Common.Invitation,Tunynet.Common.InvitationStatus)">
            <summary>
            更新请求状态
            </summary>
            <param name="invitation">状态的id</param>
            <param name="status">要更新的状态</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.InvitationRepository.BatchSetStatus(System.Int64,Tunynet.Common.InvitationStatus)">
            <summary>
            批量更改处理状态
            </summary>
            <param name="userId">用户的id</param>
            <param name="status">要更改的状态</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.InvitationRepository.ClearAll(System.Int64)">
            <summary>
            清空接受人的通知记录
            </summary>
            <param name="userId">用户的id</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.InvitationRepository.CleanByUser(System.Int64)">
            <summary>
            根据用户删除用户的所有记录（删除用户时使用）
            </summary>
            <param name="userId">用户id</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.InvitationRepository.GetUnhandledCount(System.Int64)">
            <summary>
            获取用户未处理的请求数目
            </summary>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.InvitationRepository.GetTops(System.Int64,System.Int32)">
            <summary>
            获取用户最近几条未处理的通知
            </summary>
            <param name="userId">用户id</param>
            <param name="topNumber">获取最前面的条数</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.InvitationRepository.Gets(System.Int64,System.Nullable{Tunynet.Common.InvitationStatus},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            获取用户请求的分页集合
            </summary>
            <param name="userId">用户的id</param>
            <param name="status">通知状态</param>
            <param name="invitationTypeKey">通知类型</param>
            <param name="applicationId">应用id</param>
            <param name="pageIndex">页码</param>
            <returns>通知分页集合</returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.InvitationRepository.GetUserReminderInfos">
            <summary>
            获取请求需提醒信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.InvitationRepository.GetMyInvitationUserId(System.Int64,System.String,System.Int32)">
            <summary>
            获取我请求过的用户id
            </summary>
            <param name="senderUserId">发送者Id</param>
            <param name="invitationTypeKey">发送种类id</param>
            <param name="applicationId">applicationId</param>
            <returns>接受我发送请求的用户id</returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.InvitationRepository.GetCacheKey_GetInvitationAcceptUserIds(System.Int64,System.String,System.Int32)">
            <summary>
            根据发送者获取接受者的idCacheKey
            </summary>
            <param name="senderUserId">发送人id</param>
            <param name="invitationTypeKey">请求种类</param>
            <param name="applicationId">applicationId</param>
            <returns>发送者获取接受者的idCacheKey</returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.InvitationRepository.GetCacheKey_UnhandledInvitationCount(System.Int64)">
            <summary>
            获取请求条数的缓存名称
            </summary>
            <param name="userId">用户的id</param>
            <returns>缓存名称</returns>
        </member>
        <member name="T:Tunynet.Common.Repositories.IUserInvitationSettingsRepository">
            <summary>
            用户请求设置数据访问接口
            </summary>
        </member>
        <member name="M:Tunynet.Common.Repositories.IUserInvitationSettingsRepository.GetUserInvitationSettingses(System.Int64)">
            <summary>
            用户获取请求设置
            </summary>
            <param name="userId">用户Id</param>
            <returns>请求类型-是否接收设置集合</returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.IUserInvitationSettingsRepository.UpdateUserInvitationSettings(System.Int64,System.Collections.Generic.Dictionary{System.String,System.Boolean})">
            <summary>
            用户更新请求设置
            </summary>
            <param name="userId">用户Id</param>
            <param name="typeKey2IsAllowDictionary">请求类型-是否接收设置集合</param>
        </member>
        <member name="T:Tunynet.Common.Repositories.UserInvitationSettingsRepository">
            <summary>
            通知数据访问
            </summary>
        </member>
        <member name="M:Tunynet.Common.Repositories.UserInvitationSettingsRepository.GetUserInvitationSettingses(System.Int64)">
            <summary>
            用户获取请求设置
            </summary>
            <param name="userId">用户Id</param>
            <returns>请求类型-是否接收设置集合</returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.UserInvitationSettingsRepository.UpdateUserInvitationSettings(System.Int64,System.Collections.Generic.Dictionary{System.String,System.Boolean})">
            <summary>
            用户更新请求设置
            </summary>
            <param name="userId">用户Id</param>
            <param name="typeKey2IsAllowDictionary">请求类型-是否接收设置集合</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.UserInvitationSettingsRepository.GetCacheKey_UserInvitationSettingses(System.Int64)">
            <summary>
            获取请求通知设置的CacheKey
            </summary>
            <param name="userId">用户Id</param>
        </member>
        <member name="T:Tunynet.Common.UserInvitationSettings">
            <summary>
            用户请求设置实体类
            </summary>
        </member>
        <member name="M:Tunynet.Common.UserInvitationSettings.New">
            <summary>
            新建实体时使用
            </summary>
        </member>
        <member name="P:Tunynet.Common.UserInvitationSettings.Id">
             <summary>
            Id
             </summary>
        </member>
        <member name="P:Tunynet.Common.UserInvitationSettings.UserId">
             <summary>
            用户id
             </summary>
        </member>
        <member name="P:Tunynet.Common.UserInvitationSettings.InvitationTypeKey">
             <summary>
            请求类型KEY
             </summary>
        </member>
        <member name="P:Tunynet.Common.UserInvitationSettings.IsAllowable">
             <summary>
            是否允许接受
             </summary>
        </member>
        <member name="T:Tunynet.Common.InviteFriendSettings">
            <summary>
            邀请好友设置
            </summary>
        </member>
        <member name="F:Tunynet.Common.InviteFriendSettings.allowInvitationCodeUseOnce">
            <summary>
            邀请码是否仅允许使用一次
            </summary>
        </member>
        <member name="F:Tunynet.Common.InviteFriendSettings.invitationCodeTimeLiness">
            <summary>
            邀请码有效期（单位：天）
            </summary>
        </member>
        <member name="F:Tunynet.Common.InviteFriendSettings.invitationCodeUnitPrice">
            <summary>
            设置购买邀请码所需的交易积分
            </summary>
        </member>
        <member name="F:Tunynet.Common.InviteFriendSettings.defaultUserInvitationCodeCount">
            <summary>
            默认用户邀请码配额
            </summary>
        </member>
        <member name="P:Tunynet.Common.InviteFriendSettings.AllowInvitationCodeUseOnce">
            <summary>
            邀请码是否仅允许使用一次(仅在注册选项为邀请注册的时候才允许管理员修改，其他时候。都修改false)
            </summary>
        </member>
        <member name="P:Tunynet.Common.InviteFriendSettings.InvitationCodeTimeLiness">
            <summary>
            邀请码有效期（单位：天）
            </summary>
        </member>
        <member name="P:Tunynet.Common.InviteFriendSettings.InvitationCodeUnitPrice">
            <summary>
            设置购买邀请码所需的交易积分
            </summary>
        </member>
        <member name="P:Tunynet.Common.InviteFriendSettings.DefaultUserInvitationCodeCount">
            <summary>
            默认用户邀请码配额
            </summary>
        </member>
        <member name="T:Tunynet.Common.CSVParser">
            <summary>
            CSV文件解析帮助类
            </summary>
        </member>
        <member name="M:Tunynet.Common.CSVParser.GetContactAccessor(System.IO.Stream)">
            <summary>
            从CSV文件总获取联系人的方法
            </summary>
            <param name="fileStream">CSV文件流</param>
            <returns>联系人字典</returns>
        </member>
        <member name="T:Tunynet.Common.IEmailContactAccessor">
            <summary>
            邮箱联系人
            </summary>
        </member>
        <member name="M:Tunynet.Common.IEmailContactAccessor.GetContacts(System.String,System.String,System.Boolean@)">
            <summary>
            获取邮箱联系人
            </summary>
            <param name="userName">账号</param>
            <param name="password">密码</param>
            <param name="isSuccessLogin">是否成功登录</param>
            <returns>Key:联系人Email地址，Value：联系人名称</returns>
        </member>
        <member name="P:Tunynet.Common.IEmailContactAccessor.EmailDomainName">
            <summary>
            Email后缀名称（不包含@）
            </summary>
        </member>
        <member name="T:Tunynet.Common.IMsnContactAccessor">
            <summary>
            获取Msn联系人
            </summary>
        </member>
        <member name="M:Tunynet.Common.IMsnContactAccessor.GetContacts(System.String,System.String,System.Boolean@)">
            <summary>
            获取Msn联系人
            </summary>
            <param name="userName">账号</param>
            <param name="password">密码</param>
            <param name="isSuccessLogin">是否成功登录</param>
            <returns>Key:联系人Email地址，Value：联系人名称</returns>
        </member>
        <member name="M:Tunynet.Common.InvitationCode.New">
            <summary>
            新建实体时使用
            </summary>
        </member>
        <member name="P:Tunynet.Common.InvitationCode.Code">
             <summary>
            (使用MD5_16生成)
             </summary>
        </member>
        <member name="P:Tunynet.Common.InvitationCode.UserId">
             <summary>
            用户Id
             </summary>
        </member>
        <member name="P:Tunynet.Common.InvitationCode.IsMultiple">
             <summary>
            是否可以多次使用
             </summary>
        </member>
        <member name="P:Tunynet.Common.InvitationCode.ExpiredDate">
             <summary>
            过期日期
             </summary>
        </member>
        <member name="P:Tunynet.Common.InvitationCode.DateCreated">
             <summary>
            创建日期
             </summary>
        </member>
        <member name="T:Tunynet.Common.InvitationCodeStatistic">
            <summary>
            用户配额实体
            </summary>
        </member>
        <member name="M:Tunynet.Common.InvitationCodeStatistic.New">
            <summary>
            新建实体时使用
            </summary>
        </member>
        <member name="P:Tunynet.Common.InvitationCodeStatistic.UserId">
             <summary>
            UserId
             </summary>
        </member>
        <member name="P:Tunynet.Common.InvitationCodeStatistic.CodeUnUsedCount">
            <summary>
            未使用的配额
            </summary>
        </member>
        <member name="P:Tunynet.Common.InvitationCodeStatistic.CodeUsedCount">
            <summary>
            已经使用的配额
            </summary>
        </member>
        <member name="P:Tunynet.Common.InvitationCodeStatistic.CodeBuyedCount">
            <summary>
            购买过的数目
            </summary>
        </member>
        <member name="T:Tunynet.Common.InviteFriendRecord">
            <summary>
            邀请好友的记录实体
            </summary>
        </member>
        <member name="M:Tunynet.Common.InviteFriendRecord.New">
            <summary>
            新建实体时使用
            </summary>
        </member>
        <member name="P:Tunynet.Common.InviteFriendRecord.Id">
             <summary>
            Id
             </summary>
        </member>
        <member name="P:Tunynet.Common.InviteFriendRecord.UserId">
             <summary>
            邀请人
             </summary>
        </member>
        <member name="P:Tunynet.Common.InviteFriendRecord.InvitedUserId">
             <summary>
            受邀人
             </summary>
        </member>
        <member name="P:Tunynet.Common.InviteFriendRecord.Code">
             <summary>
            邀请码
             </summary>
        </member>
        <member name="P:Tunynet.Common.InviteFriendRecord.InvitingUserHasBeingRewarded">
            <summary>
            邀请用户是否得到了奖励
            </summary>
        </member>
        <member name="P:Tunynet.Common.InviteFriendRecord.DateCreated">
             <summary>
            创建日期
             </summary>
        </member>
        <member name="T:Tunynet.Common.InviteFriendService">
            <summary>
            邀请好友业务逻辑类
            </summary>
        </member>
        <member name="M:Tunynet.Common.InviteFriendService.#ctor">
            <summary>
            不带参数的构造方法
            </summary>
        </member>
        <member name="M:Tunynet.Common.InviteFriendService.#ctor(Tunynet.Common.Repositories.IInvitationCodesRepository,Tunynet.Common.Repositories.IInvitationCodeStatisticsRepository,Tunynet.Common.Repositories.IInviteFriendRecordsRepository)">
            <summary>
             带参数的初始化方法(主要应用于测试用例)
            </summary>
            <param name="invitationCodesRepository"></param>
            <param name="invitationCodeStatisticsRepository"></param>
            <param name="inviteFriendRecordsRepository"></param>
        </member>
        <member name="M:Tunynet.Common.InviteFriendService.GetInvitationCode(System.Int64)">
            <summary>
            获取邀请码
            </summary>
            <param name="userId">申请人</param>
        </member>
        <member name="M:Tunynet.Common.InviteFriendService.GetInvitationCodeEntity(System.String)">
            <summary>
            获取邀请码实体
            </summary>
            <param name="invitationCode">邀请码</param>
        </member>
        <member name="M:Tunynet.Common.InviteFriendService.BuyInvitationCodes(System.Int64,System.Int32)">
            <summary>
            用户购买邀请码
            </summary>
            <param name="userId">用户Id</param>
            <param name="invitationCodeCount">购买的邀请码数量</param>
        </member>
        <member name="M:Tunynet.Common.InviteFriendService.DeleteInvitationCode(System.Int64,System.String)">
            <summary>
            删除邀请码（当邀请码被使用时进行调用）
            </summary>
            <param name="userId">用户Id</param>
            <param name="invitationCode">邀请码</param>
        </member>
        <member name="M:Tunynet.Common.InviteFriendService.DeleteTrashInvitationCodes">
            <summary>
            批量删除过期的邀请码
            </summary>
        </member>
        <member name="M:Tunynet.Common.InviteFriendService.GetMyInvitationCodes(System.Int64,System.Int32)">
            <summary>
            获取我的未使用邀请码列表
            </summary>
            <param name="userId">用户Id</param>
            <returns>未使用邀请码列表</returns>
        </member>
        <member name="M:Tunynet.Common.InviteFriendService.ChangeUserInvitationCodeCount(System.Int64,System.Int32,System.Int32,System.Int32)">
            <summary>
            变更用户邀请码配额
            </summary>
            <param name="userId">用户Id</param>
            <param name="userInvitationCodeUnUsedCount">用户未使用邀请码配额增量（若减少请使用负数）</param>
            <param name="userInvitationCodeUsedCount">用户使用的邀请码配额增量（若减少请使用负数）</param>
            <param name="userInvitationCodeBuyedCount">用户购买的邀请码配额增量（若减少请使用负数）</param>
            <returns>是否更新成功</returns>
        </member>
        <member name="M:Tunynet.Common.InviteFriendService.GetUserInvitationCodeStatistic(System.Int64)">
            <summary>
            获取用户邀请码统计实体
            </summary>
            <param name="userId">用户Id</param>
            <returns>用户邀请码统计实体</returns>
        </member>
        <member name="M:Tunynet.Common.InviteFriendService.CreateInviteFriendRecord(Tunynet.Common.InviteFriendRecord)">
            <summary>
            创建邀请好友记录
            </summary>
            <param name="inviteFriendRecord">被创建的记录实体</param>
        </member>
        <member name="M:Tunynet.Common.InviteFriendService.GetInvitingUserId(System.Int64)">
            <summary>
            通过被邀请人ID获取邀请人
            </summary>
            <param name="userId">被邀请人ID</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.InviteFriendService.GetMyInviteFriendRecords(System.Int64,System.Int32)">
            <summary>
            获取我的邀请好友记录
            </summary>
            <param name="userId">用户Id</param>
            <returns>被邀请的好友Id列表</returns>
        </member>
        <member name="M:Tunynet.Common.InviteFriendService.CleanByUser(System.Int64)">
            <summary>
            删除用户的所有邀请好友记录（删除用户的时候使用）
            </summary>
            <param name="userId">用户id</param>
        </member>
        <member name="M:Tunynet.Common.InviteFriendService.RewardingUser(System.Int64)">
            <summary>
            记录邀请用户奖励
            </summary>
            <param name="userId">用户Id</param>
        </member>
        <member name="T:Tunynet.Common.Repositories.IInvitationCodesRepository">
            <summary>
            邀请码数据访问接口
            </summary>
        </member>
        <member name="M:Tunynet.Common.Repositories.IInvitationCodesRepository.DeleteInvitationCode(System.Int64,System.String)">
            <summary>
            删除邀请码（当邀请码被使用时进行调用）
            </summary>
            <param name="userId">用户Id</param>
            <param name="invitationCode">邀请码</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.IInvitationCodesRepository.GetMyInvitationCodes(System.Int64,System.Int32)">
            <summary>
            获取我的未使用邀请码列表
            </summary>
            <param name="userId">用户Id</param>
            <param name="pageIndex">页码</param>
            <returns>未使用邀请码列表</returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.IInvitationCodesRepository.CleanByUser(System.Int64)">
            <summary>
            删除用户的所有邀请好友记录（删除用户的时候使用）
            </summary>
            <param name="userId">用户id</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.IInvitationCodesRepository.DeleteTrashInvitationCodes">
            <summary>
            批量删除过期的邀请码
            </summary>
        </member>
        <member name="M:Tunynet.Common.Repositories.IInvitationCodesRepository.GetTodayCode(System.Int64)">
            <summary>
            获取今天的邀请码
            </summary>
            <param name="userId">用户id</param>
            <returns>今天的邀请码</returns>
        </member>
        <member name="T:Tunynet.Common.Repositories.IInvitationCodeStatisticsRepository">
            <summary>
            邀请码配额数据访问类
            </summary>
        </member>
        <member name="M:Tunynet.Common.Repositories.IInvitationCodeStatisticsRepository.ChangeUserInvitationCodeCount(System.Int64,System.Int32,System.Int32,System.Int32)">
            <summary>
            变更用户邀请码配额
            </summary>
            <param name="userId">用户Id</param>
            <param name="userInvitationCodeUnUsedCount">用户未使用邀请码配额增量（若减少请使用负数）</param>
            <param name="userInvitationCodeUsedCount">用户使用的邀请码配额增量（若减少请使用负数）</param>
            <param name="userInvitationCodeBuyedCount">用户购买的邀请码配额增量（若减少请使用负数）</param>
            <returns>是否更新成功</returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.IInvitationCodeStatisticsRepository.CleanByUser(System.Int64)">
            <summary>
            删除用户的所有邀请好友记录（删除用户的时候使用）
            </summary>
            <param name="userId">用户id</param>
        </member>
        <member name="T:Tunynet.Common.Repositories.IInviteFriendRecordsRepository">
            <summary>
            邀请好友记录表
            </summary>
        </member>
        <member name="M:Tunynet.Common.Repositories.IInviteFriendRecordsRepository.GetMyInviteFriendRecords(System.Int64,System.Int32)">
            <summary>
            获取我的邀请好友记录
            </summary>
            <param name="userId">用户Id</param>
            <param name="pageIndex">页码</param>
            <returns>被邀请的好友Id列表</returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.IInviteFriendRecordsRepository.GetInvitingUserId(System.Int64)">
            <summary>
            通过被邀请人ID获取邀请人
            </summary>
            <param name="userId">被邀请人ID</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.IInviteFriendRecordsRepository.CleanByUser(System.Int64)">
            <summary>
            删除用户的所有邀请好友记录（删除用户的时候使用）
            </summary>
            <param name="userId">用户id</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.IInviteFriendRecordsRepository.RewardingUser(System.Int64)">
            <summary>
            记录邀请用户奖励
            </summary>
            <param name="userId">用户Id</param>
        </member>
        <member name="T:Tunynet.Common.Repositories.InvitationCodesRepository">
            <summary>
            邀请码数据访问
            </summary>
        </member>
        <member name="M:Tunynet.Common.Repositories.InvitationCodesRepository.DeleteInvitationCode(System.Int64,System.String)">
            <summary>
            删除邀请码
            </summary>
            <param name="userId">用户id</param>
            <param name="invitationCode">邀请码</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.InvitationCodesRepository.GetMyInvitationCodes(System.Int64,System.Int32)">
            <summary>
            获取我未使用的邀请码
            </summary>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.InvitationCodesRepository.CleanByUser(System.Int64)">
            <summary>
            清除用户数据
            </summary>
            <param name="userId">用户id</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.InvitationCodesRepository.DeleteTrashInvitationCodes">
            <summary>
            清除过期的邀请码
            </summary>
        </member>
        <member name="M:Tunynet.Common.Repositories.InvitationCodesRepository.GetTodayCode(System.Int64)">
            <summary>
            获取今天的邀请码
            </summary>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.InvitationCodesRepository.GetCacheKey_MyInvitationCodes(System.Int64)">
            <summary>
            获取我的邀请码列表的cachekey
            </summary>
            <param name="userId">用户id</param>
            <returns>cachekey</returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.InvitationCodesRepository.GetCacheKey_TodayCode(System.Int64)">
            <summary>
            获取今天邀请码cacheke
            </summary>
            <param name="userId">用户id</param>
            <returns>今天邀请码cacheke</returns>
        </member>
        <member name="T:Tunynet.Common.Repositories.InvitationCodeStatisticsRepository">
            <summary>
            邀请码配额的数据访问类
            </summary>
        </member>
        <member name="M:Tunynet.Common.Repositories.InvitationCodeStatisticsRepository.ChangeUserInvitationCodeCount(System.Int64,System.Int32,System.Int32,System.Int32)">
            <summary>
            变更用户邀请码配额
            </summary>
            <param name="userId">用户Id</param>
            <param name="userInvitationCodeUnUsedCount">用户未使用邀请码配额增量（若减少请使用负数）</param>
            <param name="userInvitationCodeUsedCount">用户使用的邀请码配额增量（若减少请使用负数）</param>
            <param name="userInvitationCodeBuyedCount">用户购买的邀请码配额增量（若减少请使用负数）</param>
            <returns>是否更新成功</returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.InvitationCodeStatisticsRepository.CleanByUser(System.Int64)">
            <summary>
            删除用户的所有邀请好友记录（删除用户的时候使用）
            </summary>
            <param name="userId">用户id</param>
        </member>
        <member name="T:Tunynet.Common.Repositories.InviteFriendRecordsRepository">
            <summary>
            邀请好友的记录
            </summary>
        </member>
        <member name="M:Tunynet.Common.Repositories.InviteFriendRecordsRepository.GetMyInviteFriendRecords(System.Int64,System.Int32)">
            <summary>
            获取我的邀请好友记录
            </summary>
            <param name="userId">用户Id</param>
            <param name="pageIndex">页码</param>
            <returns>被邀请的好友Id列表</returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.InviteFriendRecordsRepository.GetInvitingUserId(System.Int64)">
            <summary>
            通过被邀请人ID获取邀请人
            </summary>
            <param name="userId">被邀请人ID</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.InviteFriendRecordsRepository.GetCacheKey_InviteUserIds(System.Int64)">
            <summary>
            获取被邀请的好友Id集合的CacheKey
            </summary>
            <param name="userId">用户Id</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.InviteFriendRecordsRepository.CleanByUser(System.Int64)">
            <summary>
            清除用户资料（删除用户时使用）
            </summary>
            <param name="userId">用户id</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.InviteFriendRecordsRepository.RewardingUser(System.Int64)">
            <summary>
            记录邀请用户奖励
            </summary>
            <param name="userId">用户Id</param>
        </member>
        <member name="T:Tunynet.Common.DeleteTrashInvitationCodesTask">
            <summary>
            每天执行批量删除过期的邀请码任务
            </summary>
        </member>
        <member name="M:Tunynet.Common.DeleteTrashInvitationCodesTask.Execute(Tunynet.Tasks.TaskDetail)">
            <summary>
            任务执行的内容
            </summary>
            <param name="taskDetail">任务配置状态信息</param>
        </member>
        <member name="T:Tunynet.Common.Message">
            <summary>
            私信实体
            </summary>
        </member>
        <member name="M:Tunynet.Common.Message.New">
            <summary>
            新建实体时使用
            </summary>
        </member>
        <member name="P:Tunynet.Common.Message.MessageId">
             <summary>
            MessageId
             </summary>
        </member>
        <member name="P:Tunynet.Common.Message.SenderUserId">
             <summary>
            发件人UserId
             </summary>
        </member>
        <member name="P:Tunynet.Common.Message.Sender">
             <summary>
            发件人的DisplayName
             </summary>
        </member>
        <member name="P:Tunynet.Common.Message.ReceiverUserId">
             <summary>
            收件人UserId
             </summary>
        </member>
        <member name="P:Tunynet.Common.Message.Receiver">
             <summary>
            收件人DisplayName
             </summary>
        </member>
        <member name="P:Tunynet.Common.Message.Subject">
             <summary>
            私信标题
             </summary>
        </member>
        <member name="P:Tunynet.Common.Message.Body">
             <summary>
            私信内容
             </summary>
        </member>
        <member name="P:Tunynet.Common.Message.IsRead">
             <summary>
            是否已读
             </summary>
        </member>
        <member name="P:Tunynet.Common.Message.IP">
             <summary>
            私信来源IP
             </summary>
        </member>
        <member name="P:Tunynet.Common.Message.DateCreated">
             <summary>
            发布日期
             </summary>
        </member>
        <member name="P:Tunynet.Common.Message.MessageType">
            <summary>
            私信类型
            </summary>
        </member>
        <member name="P:Tunynet.Common.Message.ResolveBody">
            <summary>
            将私信中的图片和音频转换成实际的信息
            </summary>
        </member>
        <member name="P:Tunynet.Common.Message.FormatResolveBody">
            <summary>
            将私信中的图片和音频转换[音频]、[图片]等内容
            </summary>
        </member>
        <member name="T:Tunynet.Common.MessageType">
            <summary>
            私信类别
            </summary>
        </member>
        <member name="F:Tunynet.Common.MessageType.Common">
            <summary>
            普通消息 用于会员之间的通信
            </summary>
        </member>
        <member name="F:Tunynet.Common.MessageType.System">
            <summary>
            系统消息
            </summary>
        </member>
        <member name="F:Tunynet.Common.MessageType.CustomerService">
            <summary>
            客服消息
            </summary>
        </member>
        <member name="F:Tunynet.Common.MessageType.Recourse">
            <summary>
            咨询求助
            </summary>
        </member>
        <member name="F:Tunynet.Common.MessageType.Complain">
            <summary>
            投诉消息
            </summary>
        </member>
        <member name="F:Tunynet.Common.MessageType.Advice">
            <summary>
            意见建议
            </summary>
        </member>
        <member name="T:Tunynet.Common.BuildinMessageUserId">
            <summary>
            系统内置的私信发送UserId
            </summary>
        </member>
        <member name="F:Tunynet.Common.BuildinMessageUserId.System">
            <summary>
            作为系统消息的 发送人UserId
            </summary>
        </member>
        <member name="F:Tunynet.Common.BuildinMessageUserId.CustomerService">
            <summary>
            作为客服消息的 发送人UserId 及 咨询求助、投诉消息、意见建议、Bug报告的 接收人UserId 
            </summary>
        </member>
        <member name="T:Tunynet.Common.SortBy_Message">
            <summary>
            私信排序字段
            </summary>
        </member>
        <member name="F:Tunynet.Common.SortBy_Message.IsRead">
            <summary>
            是否已读
            </summary>
        </member>
        <member name="F:Tunynet.Common.SortBy_Message.DateCreated_Desc">
            <summary>
            最新私信
            </summary>
        </member>
        <member name="T:Tunynet.Common.MessageInSession">
            <summary>
            私信和会话的关系
            </summary>
        </member>
        <member name="M:Tunynet.Common.MessageInSession.New">
            <summary>
            新建实体时使用
            </summary>
        </member>
        <member name="P:Tunynet.Common.MessageInSession.Id">
             <summary>
            Id
             </summary>
        </member>
        <member name="P:Tunynet.Common.MessageInSession.SessionId">
             <summary>
            会话Id
             </summary>
        </member>
        <member name="P:Tunynet.Common.MessageInSession.MessageId">
             <summary>
            私信Id
             </summary>
        </member>
        <member name="T:Tunynet.Common.MessageService">
            <summary>
            私信逻辑类
            </summary>
        </member>
        <member name="M:Tunynet.Common.MessageService.#ctor">
            <summary>
            构造器
            </summary>
        </member>
        <member name="M:Tunynet.Common.MessageService.#ctor(Tunynet.Common.IMessageRepository,Tunynet.Common.IMessageSessionRepository,Tunynet.Common.IMessageInSessionRepository)">
            <summary>
            构造器
            </summary>
        </member>
        <member name="M:Tunynet.Common.MessageService.Create(Tunynet.Common.Message)">
            <summary>
            创建私信
            </summary>
            <param name="message">待创建的私信实体</param>
            <returns>是否删除成功：true-成功，false-不成功</returns>
        </member>
        <member name="M:Tunynet.Common.MessageService.Delete(System.Int64,System.Int64)">
            <summary>
            删除私信
            </summary>
            <param name="messageId">私信Id</param>
            <param name="sessionId">私信会话Id</param>
            <returns>是否删除成功：true-成功，false-不成功</returns>
        </member>
        <member name="M:Tunynet.Common.MessageService.Get(System.Int64)">
            <summary>
            获取私信实体
            </summary>
            <param name="messageId">私信Id</param>
        </member>
        <member name="M:Tunynet.Common.MessageService.SetIsRead(System.Int64,System.Int64)">
            <summary>
            设置私信为已读
            </summary>
            <param name="sessionId">私信会话Id</param>
            <param name="userId">会话拥有者Id</param>
            <returns>是否更新成功</returns>
        </member>
        <member name="M:Tunynet.Common.MessageService.GetTops(System.Int64,System.Nullable{Tunynet.Common.SortBy_Message},System.Int32)">
             <summary>
             获取用户前N个私信
             </summary>
            <param name="userId">UserId</param>
            <param name="sortBy">私信排序字段</param>
            <param name="topNumber">要获取的记录数</param>
        </member>
        <member name="M:Tunynet.Common.MessageService.GetTops(System.Int64,System.Int32)">
             <summary>
            获取会话中前N条私信
             </summary>
             <param name="sessionId">会话Id</param>
             <param name="topNumber">要获取的记录数</param>
        </member>
        <member name="M:Tunynet.Common.MessageService.GetMessagesOfSession(System.Int64,System.Int32)">
             <summary>
            获取会话中所有私信
             </summary>
             <param name="sessionId">会话Id</param>
             <param name="topNumber">获取记录条数</param>
        </member>
        <member name="M:Tunynet.Common.MessageService.GetMessagesOfSession(System.Int64,System.Int64)">
            <summary>
            获取会话下的某条私信之前的20条私信Id(移动端使用)
            </summary>
            <param name="sessionId">会话Id</param>
            <param name="topNumber">某条私信的Id</param>
        </member>
        <member name="M:Tunynet.Common.MessageService.GetUnreadCount(System.Int64)">
            <summary>
            获取未读私信数
            </summary>
            <param name="userId">私信拥有者UserId</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.MessageService.GetMessageSession(System.Int64,System.Int64)">
            <summary>
            
            </summary>
            <param name="userId"></param>
            <param name="otherUserId"></param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.MessageService.GetSession(System.Int64)">
            <summary>
            获取私信实体
            </summary>
            <param name="messageId">私信Id</param>
        </member>
        <member name="M:Tunynet.Common.MessageService.DeleteSession(System.Int64)">
            <summary>
            删除私信会话
            </summary>
            <param name="sessionId">私信会话Id</param>
        </member>
        <member name="M:Tunynet.Common.MessageService.GetSessionsOfUser(System.Int64,System.Int32)">
             <summary>
             获取用户私信会话
             </summary>
            <param name="userId">用户Id</param>
            <param name="pageIndex">页码</param>
        </member>
        <member name="M:Tunynet.Common.MessageService.GetSessions(System.Nullable{Tunynet.Common.MessageType},System.Nullable{System.Int64},System.Int32)">
            <summary>
            获取私信会话分页数据（后台用）
            </summary>
            <param name="type">私信类型</param>
            <param name="userId">用户Id（用来搜索用户Id相关的私信会话）</param>
            <param name="pageIndex">页码</param>
            <returns>私信会话分页数据</returns>
        </member>
        <member name="M:Tunynet.Common.MessageService.ClearSessionsFromUser(System.Int64)">
            <summary>
            清除用户的私信会话
            </summary>
            <param name="userId">用户Id</param>
        </member>
        <member name="M:Tunynet.Common.MessageService.GetTopSessions(System.Int64,System.Int32,System.Boolean)">
            <summary>
            获取前N个私信会话
            </summary>
            <param name="userId">用户Id</param>
            <param name="topNumber">获取记录条数</param>
            <param name="hasUnread">是否仅获取未读会话</param>
        </member>
        <member name="M:Tunynet.Common.MessageService.GetCustomerMessages(System.Int32,System.Int32,System.String,System.String,System.Int64,System.Int64)">
            <summary>
            客服消息
            </summary>
            <param name="pageIndex">页码</param>
            <param name="pageSize">每页记录数</param>
            <param name="userName">发件人</param>
            <param name="roleName">角色</param>
            <param name="minRank">最小等级</param>
            <param name="maxRank">最大等级</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.MessageService.GetUserReminderInfos">
            <summary>
            获取所有未读的私信
            </summary>
            <returns></returns>
        </member>
        <member name="T:Tunynet.Common.MessageSession">
            <summary>
            私信的会话
            </summary>
        </member>
        <member name="M:Tunynet.Common.MessageSession.New">
            <summary>
            新建实体时使用
            </summary>
        </member>
        <member name="P:Tunynet.Common.MessageSession.SessionId">
             <summary>
            SessionId
             </summary>
        </member>
        <member name="P:Tunynet.Common.MessageSession.UserId">
             <summary>
            会话拥有者UserId
             </summary>
        </member>
        <member name="P:Tunynet.Common.MessageSession.OtherUserId">
             <summary>
            会话参与人UserId
             </summary>
        </member>
        <member name="P:Tunynet.Common.MessageSession.LastMessageId">
             <summary>
            会话中最新的私信MessageId
             </summary>
        </member>
        <member name="P:Tunynet.Common.MessageSession.MessageCount">
             <summary>
            信息数统计
             </summary>
        </member>
        <member name="P:Tunynet.Common.MessageSession.UnreadMessageCount">
             <summary>
            未读信息数统计（用来显示未读私信统计数和和标示会话的阅读状态）
             </summary>
        </member>
        <member name="P:Tunynet.Common.MessageSession.MessageType">
             <summary>
            消息类型
             </summary>
        </member>
        <member name="P:Tunynet.Common.MessageSession.LastModified">
             <summary>
            最后回复日期
             </summary>
        </member>
        <member name="P:Tunynet.Common.MessageSession.LastMessage">
            <summary>
            私信会话的最后一条Message
            </summary>
        </member>
        <member name="T:Tunynet.Common.IMessageInSessionRepository">
            <summary>
            私信与会话关联数据访问接口
            </summary>
        </member>
        <member name="M:Tunynet.Common.IMessageInSessionRepository.GetMessageIds(System.Int64,System.Int32)">
            <summary>
            获取会话下的所有私信Id
            </summary>
            <param name="sessionId">会话Id</param>
            <param name="topNumber">获取记录数</param>
        </member>
        <member name="M:Tunynet.Common.IMessageInSessionRepository.GetMessageIds(System.Int64,System.Int64)">
            <summary>
            获取会话下的某条私信之前的20条私信Id(移动端使用)
            </summary>
            <param name="sessionId">会话Id</param>
            <param name="topNumber">某条私信的Id</param>
        </member>
        <member name="T:Tunynet.Common.IMessageRepository">
            <summary>
            私信数据访问接口
            </summary>
        </member>
        <member name="M:Tunynet.Common.IMessageRepository.Delete(Tunynet.Common.Message,System.Int64)">
            <summary>
            从数据库中删除实体
            </summary>
            <param name="entity">待删除私信实体</param>
            <param name="userId">私信会话拥有者</param>
            <param name="sessionId">私信会话Id</param>
            <returns>操作后影响行数</returns>
        </member>
        <member name="M:Tunynet.Common.IMessageRepository.SetIsRead(System.Int64,System.Int64)">
            <summary>
            更新私信的阅读状态
            </summary>
            <param name="sessionId">私信会话Id</param>
            <param name="userId">会话拥有者UserId</param>
        </member>
        <member name="M:Tunynet.Common.IMessageRepository.GetTopMessagesOfUser(System.Int64,System.Nullable{Tunynet.Common.SortBy_Message},System.Int32)">
            <summary>
            获取用户的前N条私信
            </summary>
            <param name="userId">私信拥有者Id</param>
            <param name="sortBy">私信排序字段</param>
            <param name="topNumber">获取的前N条数据</param>
        </member>
        <member name="M:Tunynet.Common.IMessageRepository.GetUnReadCount(System.Int64)">
            <summary>
            获取未读私信数
            </summary>
        </member>
        <member name="M:Tunynet.Common.IMessageRepository.GetUserReminderInfos">
            <summary>
            获取所有未读的私信
            </summary>
            <returns></returns>
        </member>
        <member name="T:Tunynet.Common.IMessageSessionRepository">
            <summary>
            私信会话数据访问接口
            </summary>
        </member>
        <member name="M:Tunynet.Common.IMessageSessionRepository.Get(System.Int64,System.Int64)">
            <summary>
            根据我跟其他人的id获取我们之间的会话（如果不存在，创建一个空会话）
            </summary>
            <param name="userId">用户id</param>
            <param name="otherUserId">其他用户的id</param>
            <returns>会话</returns>
        </member>
        <member name="M:Tunynet.Common.IMessageSessionRepository.GetSessionsOfUser(System.Int64,System.Int32)">
             <summary>
             获取用户私信会话
             </summary>
            <param name="userId">用户Id</param>
            <param name="pageIndex">当前页码</param>
        </member>
        <member name="M:Tunynet.Common.IMessageSessionRepository.GetSessions(System.Nullable{Tunynet.Common.MessageType},System.Nullable{System.Int64},System.Int32)">
            <summary>
            获取私信会话分页数据（后台用）
            </summary>
            <param name="type">私信类型</param>
            <param name="userId">用户Id（用来搜索用户Id相关的私信会话）</param>
            <param name="pageIndex">页码</param>
            <returns>私信会话分页数据</returns>
        </member>
        <member name="M:Tunynet.Common.IMessageSessionRepository.GetTopSessions(System.Int64,System.Int32,System.Boolean)">
            <summary>
            获取前N个私信会话
            </summary>
            <param name="userId">用户Id</param>
            <param name="topNumber">获取记录条数</param>
            <param name="hasUnread">是否仅获取未读会话</param>
        </member>
        <member name="M:Tunynet.Common.IMessageSessionRepository.ClearSessionsFromUser(System.Int64)">
            <summary>
            清除用户所有私信会话
            </summary>
            <param name="userId">用户Id</param>
        </member>
        <member name="M:Tunynet.Common.IMessageSessionRepository.GetCustomerMessages(System.Int32,System.Int32,System.String,System.String,System.Int64,System.Int64)">
            <summary>
            获取客服消息
            </summary>
            <param name="userId">发件人</param>
            <param name="roleName">角色</param>
            <param name="content">内容</param>
            <param name="minRank">最小等级</param>
            <param name="maxRank">最大等级</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.IMessageSessionRepository.GetSessionsId(System.Int64,System.Int64)">
            <summary>
            获取私信会话ID
            </summary>
            <param name="userId">用户ID</param>
            <param name="otherUserId">其他人的ID</param>
        </member>
        <member name="T:Tunynet.Common.MessageInSessionRepository">
            <summary>
            私信与会话关联数据访问
            </summary>
        </member>
        <member name="M:Tunynet.Common.MessageInSessionRepository.GetMessageIds(System.Int64,System.Int32)">
            <summary>
            获取会话下的所有私信Id
            </summary>
            <param name="sessionId">会话Id</param>
            <param name="topNumber">获取记录数</param>
        </member>
        <member name="M:Tunynet.Common.MessageInSessionRepository.GetMessageIds(System.Int64,System.Int64)">
            <summary>
            获取会话下的某条私信之前的20条私信Id(移动端使用)
            </summary>
            <param name="sessionId">会话Id</param>
            <param name="topNumber">某条私信的Id</param>
        </member>
        <member name="T:Tunynet.Common.MessageRepository">
            <summary>
            私信数据访问
            </summary>
        </member>
        <member name="M:Tunynet.Common.MessageRepository.Insert(Tunynet.Common.Message)">
            <summary>
            把实体entity添加到数据库
            </summary>
            <param name="entity">待创建实体</param>
            <returns>实体主键</returns>
        </member>
        <member name="M:Tunynet.Common.MessageRepository.Delete(Tunynet.Common.Message,System.Int64)">
            <summary>
            从数据库中删除实体
            </summary>
            <param name="entity">待删除私信实体</param>
            <param name="sessionId">私信会话Id</param>
            <returns>操作后影响行数</returns>
        </member>
        <member name="M:Tunynet.Common.MessageRepository.SetIsRead(System.Int64,System.Int64)">
            <summary>
            更新私信的阅读状态
            </summary>
            <param name="sessionId">私信会话Id</param>
            <param name="userId">会话拥有者UserId</param>
        </member>
        <member name="M:Tunynet.Common.MessageRepository.GetUnReadCount(System.Int64)">
            <summary>
            获取未读私信数
            </summary>
        </member>
        <member name="M:Tunynet.Common.MessageRepository.GetTopMessagesOfUser(System.Int64,System.Nullable{Tunynet.Common.SortBy_Message},System.Int32)">
            <summary>
            获取用户的前N条私信
            </summary>
            <param name="userId">私信拥有者Id</param>
            <param name="sortBy">私信排序字段</param>
            <param name="topNumber">获取的前N条数据</param>
        </member>
        <member name="M:Tunynet.Common.MessageRepository.GetUserReminderInfos">
            <summary>
            获取私信需提醒信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.MessageRepository.GetCacheKey_UnreadCount(System.Int64)">
            <summary>
            组装未读通知数CacheKey
            </summary>
            <param name="userId">私信收件人UserId</param>
        </member>
        <member name="T:Tunynet.Common.MessageSessionRepository">
            <summary>
            私信会话数据访问
            </summary>
        </member>
        <member name="M:Tunynet.Common.MessageSessionRepository.Delete(Tunynet.Common.MessageSession)">
            <summary>
            删除私信会话
            </summary>
            <param name="entity">待删除实体</param>
            <returns>操作后影响行数</returns>
        </member>
        <member name="M:Tunynet.Common.MessageSessionRepository.Get(System.Int64,System.Int64)">
            <summary>
            获取私信会话
            </summary>
            <param name="userId">用户的id</param>
            <param name="otherUserId">其他人的id</param>
            <returns>私信会话</returns>
        </member>
        <member name="M:Tunynet.Common.MessageSessionRepository.GetSessionsOfUser(System.Int64,System.Int32)">
             <summary>
             获取用户私信会话
             </summary>
            <param name="userId">用户Id</param>
            <param name="pageIndex">当前页码</param>
        </member>
        <member name="M:Tunynet.Common.MessageSessionRepository.GetSessions(System.Nullable{Tunynet.Common.MessageType},System.Nullable{System.Int64},System.Int32)">
            <summary>
            获取私信会话分页数据（后台用）
            </summary>
            <param name="type">私信类型</param>
            <param name="userId">用户Id（用来搜索用户Id相关的私信会话）</param>
            <param name="pageIndex">页码</param>
            <returns>私信会话分页数据</returns>
        </member>
        <member name="M:Tunynet.Common.MessageSessionRepository.GetTopSessions(System.Int64,System.Int32,System.Boolean)">
            <summary>
            获取前N个私信会话
            </summary>
            <param name="userId">用户Id</param>
            <param name="topNumber">获取记录条数</param>
            <param name="hasUnread">是否仅获取未读会话</param>
        </member>
        <member name="M:Tunynet.Common.MessageSessionRepository.GetCustomerMessages(System.Int32,System.Int32,System.String,System.String,System.Int64,System.Int64)">
            <summary>
            获取客服消息
            </summary>
            <param name="userName">发件人</param>
            <param name="roleName">角色</param>
            <param name="minRank">最小等级</param>
            <param name="maxRank">最大等级</param>
            <param name="pageIndex">页码</param>
            <param name="pageSize">每页多少条</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.MessageSessionRepository.ClearSessionsFromUser(System.Int64)">
            <summary>
            清除用户所有私信会话
            </summary>
            <param name="userId">用户Id</param>
        </member>
        <member name="M:Tunynet.Common.MessageSessionRepository.GetCacheKeyForGetMessageSession(System.Int64,System.Int64)">
            <summary>
            获取CacheKey的信息头
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.MessageSessionRepository.GetSessionsId(System.Int64,System.Int64)">
            <summary>
            获取私信会话ID
            </summary>
            <param name="userId">用户ID</param>
            <param name="otherUserId">其他人的ID</param>
        </member>
        <member name="T:Tunynet.Common.MessageSettings">
            <summary>
            私信设置
            </summary>
        </member>
        <member name="P:Tunynet.Common.MessageSettings.MaxReceiver">
            <summary>
            最多同时选择收件人个数
            </summary>
        </member>
        <member name="T:Tunynet.Common.NoticeSettings">
            <summary>
            站点通知设置
            </summary>
        </member>
        <member name="P:Tunynet.Common.NoticeSettings.NoticeTypeSettingses">
            <summary>
            站点请求设置集合
            </summary>
        </member>
        <member name="T:Tunynet.Common.NoticeTypeSettings">
            <summary>
            通知类型设置实体类
            </summary>
        </member>
        <member name="P:Tunynet.Common.NoticeTypeSettings.TypeId">
            <summary>
            通知ID
            </summary>
        </member>
        <member name="P:Tunynet.Common.NoticeTypeSettings.IsAllow">
            <summary>
            是否允许
            </summary>
        </member>
        <member name="T:Tunynet.Common.Notice">
            <summary>
            通知实体
            </summary>
        </member>
        <member name="M:Tunynet.Common.Notice.New">
            <summary>
            新建实体时使用
            </summary>
        </member>
        <member name="P:Tunynet.Common.Notice.Id">
             <summary>
            Id
             </summary>
        </member>
        <member name="P:Tunynet.Common.Notice.ApplicationId">
             <summary>
            应用Id
             </summary>
        </member>
        <member name="P:Tunynet.Common.Notice.TypeId">
             <summary>
            通知类型Id
             </summary>
        </member>
        <member name="P:Tunynet.Common.Notice.UserId">
             <summary>
            通知接收人
             </summary>
        </member>
        <member name="P:Tunynet.Common.Notice.TemplateName">
             <summary>
            通知模板名称
             </summary>
        </member>
        <member name="P:Tunynet.Common.Notice.LeadingActorUserId">
             <summary>
            主角UserID
             </summary>
        </member>
        <member name="P:Tunynet.Common.Notice.LeadingActor">
             <summary>
            主角
             </summary>
        </member>
        <member name="P:Tunynet.Common.Notice.RelativeObjectName">
             <summary>
            相关项对象名称
             </summary>
        </member>
        <member name="P:Tunynet.Common.Notice.RelativeObjectUrl">
             <summary>
            相关项对象链接地址
             </summary>
        </member>
        <member name="P:Tunynet.Common.Notice.RelativeObjectId">
             <summary>
            相关项对象Id
             </summary>
        </member>
        <member name="P:Tunynet.Common.Notice.Body">
             <summary>
            内容
             </summary>
        </member>
        <member name="P:Tunynet.Common.Notice.Status">
             <summary>
            处理状态  0= Unhandled:未处理;1= Handled 已处理
             </summary>
        </member>
        <member name="P:Tunynet.Common.Notice.DateCreated">
             <summary>
            创建日期
             </summary>
        </member>
        <member name="P:Tunynet.Common.Notice.LeadingActorUrl">
            <summary>
            主角的空间主页地址
            </summary>
        </member>
        <member name="P:Tunynet.Common.Notice.Owner">
            <summary>
            所属对象名称（例如：日志）
            </summary>
        </member>
        <member name="P:Tunynet.Common.Notice.ResolvedBody">
            <summary>
            获取解析过的内容
            </summary>
        </member>
        <member name="T:Tunynet.Common.NoticeBuilder">
            <summary>
            通知构建器
            </summary>
        </member>
        <member name="M:Tunynet.Common.NoticeBuilder.Instance">
            <summary>
            获取NoticeBuilder实例
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.NoticeBuilder.Resolve(Tunynet.Common.Notice)">
            <summary>
            生成通知内容
            </summary>
            <param name="notice">通知实体</param>
            <returns>返回生成的通知内容</returns>
        </member>
        <member name="M:Tunynet.Common.NoticeBuilder.LoadNoticeTemplates">
            <summary>
            加载Notice模板
            </summary>
        </member>
        <member name="T:Tunynet.Common.NoticeService">
            <summary>
            通知业务逻辑类
            </summary>
        </member>
        <member name="M:Tunynet.Common.NoticeService.#ctor">
            <summary>
            构造器
            </summary>
        </member>
        <member name="M:Tunynet.Common.NoticeService.#ctor(Tunynet.Common.Repositories.INoticeRepository,Tunynet.Common.Repositories.IUserNoticeSettingsRepository)">
            <summary>
            构造器
            </summary>
        </member>
        <member name="M:Tunynet.Common.NoticeService.Create(Tunynet.Common.Notice)">
            <summary>
            创建通知
            </summary>
            <param name="entity">通知实体</param>
            <remarks>已检查通知设置</remarks>
        </member>
        <member name="M:Tunynet.Common.NoticeService.Delete(System.Int64)">
            <summary>
            删除单条通知
            </summary>
            <param name="id">通知Id</param>
        </member>
        <member name="M:Tunynet.Common.NoticeService.ClearAll(System.Int64,System.Nullable{Tunynet.Common.NoticeStatus})">
            <summary>
            清空接收人的通知记录
            </summary>
            <param name="userId">接收人Id</param>
            <param name="status">通知状态</param>
        </member>
        <member name="M:Tunynet.Common.NoticeService.CleanByUser(System.Int64)">
            <summary>
            删除用户记录（删除用户时使用）
            </summary>
            <param name="userId"></param>
        </member>
        <member name="M:Tunynet.Common.NoticeService.SetIsHandled(System.Int64)">
            <summary>
            将通知设置为已处理状态
            </summary>
            <param name="id">通知Id</param>
        </member>
        <member name="M:Tunynet.Common.NoticeService.BatchSetIsHandled(System.Int64)">
            <summary>
            批量将所有未处理通知修改为已处理状态
            </summary>
            <param name="userId">接收人Id</param>
        </member>
        <member name="M:Tunynet.Common.NoticeService.Get(System.Int64)">
            <summary>
            获取单个通知实体
            </summary>
            <param name="id">通知实体Id</param>
            <returns>通知实体</returns>
        </member>
        <member name="M:Tunynet.Common.NoticeService.GetUnhandledCount(System.Int64)">
            <summary>
            获取某人的未处理通知数
            </summary>
        </member>
        <member name="M:Tunynet.Common.NoticeService.GetTops(System.Int64,System.Int32)">
            <summary>
            获取用户最近几条未处理的通知
            </summary>
            <param name="topNumber"></param>
            <param name="userId">通知接收人Id</param>
        </member>
        <member name="M:Tunynet.Common.NoticeService.Gets(System.Int64,System.Nullable{Tunynet.Common.NoticeStatus},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            获取用户通知的分页集合
            </summary>
            <param name="userId">用户Id</param>
            <param name="status">通知状态</param>
            <param name="typeId">通知类型Id</param>
            <param name="applicationId">应用Id</param>
            <param name="pageIndex">页码</param>
            <returns>通知分页集合</returns>
        </member>
        <member name="M:Tunynet.Common.NoticeService.GetUserReminderInfos">
            <summary>
            获取所有未处理的通知
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.NoticeService.IsAllowedSend(System.Int64,System.Int32)">
            <summary>
            用户对某类型是否允许发送通知
            </summary>
            <param name="userId">用户Id</param>
            <param name="typeId">通知类型Id</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.NoticeService.UpdateUserNoticeSettings(System.Int64,System.Collections.Generic.Dictionary{System.Int32,System.Boolean})">
            <summary>
            用户更新通知设置
            </summary>
            <param name="userId">用户Id</param>
            <param name="typeIds">通知类型Id集合</param>
        </member>
        <member name="M:Tunynet.Common.NoticeService.GetUserNoticeSettingses(System.Int64)">
            <summary>
            获取用户的当前设置
            </summary>
            <param name="userId">用户id</param>
            <returns>用户的当前设置</returns>
        </member>
        <member name="T:Tunynet.Common.NoticeStatus">
            <summary>
            通知处理状态
            </summary>
        </member>
        <member name="F:Tunynet.Common.NoticeStatus.Unhandled">
            <summary>
            未处理
            </summary>
        </member>
        <member name="F:Tunynet.Common.NoticeStatus.Handled">
            <summary>
            已处理
            </summary>
        </member>
        <member name="T:Tunynet.Common.NoticeTemplateNames">
            <summary>
            通知处理状态
            </summary>
        </member>
        <member name="M:Tunynet.Common.NoticeTemplateNames.Instance">
            <summary>
            获取单例
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.NoticeTemplateNames.NewReply">
            <summary>
            新回复
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.NoticeTemplateNames.NewComment">
            <summary>
            新评论
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.NoticeTemplateNames.ManagerApproved">
            <summary>
            你的“XXX”已被管理员批准
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.NoticeTemplateNames.ManagerDisapproved">
            <summary>
            你的“XXX”未被管理员批准
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.NoticeTemplateNames.ManagerCancelEssential">
            <summary>
            你的“XXX”已被管理员取消精华
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.NoticeTemplateNames.ManagerCancelSticky">
            <summary>
            你的“XXX”已被管理员取消置顶
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.NoticeTemplateNames.ManagerSetEssential">
            <summary>
            你的“XXX”已被管理员设为精华
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.NoticeTemplateNames.ManagerSetSticky">
            <summary>
            你的“XXX”已被管理员设为置顶
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.NoticeTemplateNames.ManagerRecommended">
            <summary>
            你的“XXX”已被管理员推荐
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.NoticeTemplateNames.PhotoLabelNotice">
            <summary>
            你的照片被XXX圈了
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.NoticeTemplateNames.PhotoLabeledNotice">
            <summary>
            你被XXX圈了
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.NoticeTemplateNames.ManagerRecommendedUser">
            <summary>
            你被管理员推荐
            </summary>
            <returns></returns>
        </member>
        <member name="T:Tunynet.Common.NoticeType">
            <summary>
            通知类型实体类
            </summary>
        </member>
        <member name="M:Tunynet.Common.NoticeType.#cctor">
            <summary>
            静态构造器
            </summary>
        </member>
        <member name="M:Tunynet.Common.NoticeType.#ctor">
            <summary>
            构造器
            </summary>
        </member>
        <member name="M:Tunynet.Common.NoticeType.GetAll">
            <summary>
            获取所有通知类型
            </summary>
            <returns>通知类型</returns>
        </member>
        <member name="M:Tunynet.Common.NoticeType.Get(System.Int32)">
            <summary>
            获取通知类型
            </summary>
            <param name="typeId">类型Id</param>
            <returns>通知类型</returns>
        </member>
        <member name="M:Tunynet.Common.NoticeType.Add(Tunynet.Common.NoticeType)">
            <summary>
            添加通知类型
            </summary>
            <param name="noticeType">通知类型</param>
        </member>
        <member name="M:Tunynet.Common.NoticeType.Remove(System.Int32)">
            <summary>
            删除通知类型
            </summary>
            <param name="typeId">类型Id</param>
        </member>
        <member name="P:Tunynet.Common.NoticeType.TypeId">
            <summary>
            类型Id
            </summary>
        </member>
        <member name="P:Tunynet.Common.NoticeType.TypeName">
            <summary>
            类型名称
            </summary>
        </member>
        <member name="P:Tunynet.Common.NoticeType.Description">
            <summary>
            类型描述
            </summary>
        </member>
        <member name="T:Tunynet.Common.NoticeTypeIds">
            <summary>
            通知类型Id管理类
            </summary>
        </member>
        <member name="M:Tunynet.Common.NoticeTypeIds.Instance">
            <summary>
            获取单例
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.NoticeTypeIds.Reply">
            <summary>
            回复
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.NoticeTypeIds.Manage">
            <summary>
            管理
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.NoticeTypeIds.Hint">
            <summary>
            提示
            </summary>
            <returns></returns>
        </member>
        <member name="T:Tunynet.Common.Repositories.INoticeRepository">
            <summary>
            通知数据访问接口
            </summary>
        </member>
        <member name="M:Tunynet.Common.Repositories.INoticeRepository.ClearAll(System.Int64,System.Nullable{Tunynet.Common.NoticeStatus})">
            <summary>
            清空接收人的通知记录
            </summary>
            <param name="userId">接收人Id</param>
            <param name="status">通知状态</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.INoticeRepository.CleanByUser(System.Int64)">
            <summary>
            删除用户的记录（删除用户时调用）
            </summary>
            <param name="userId"></param>
        </member>
        <member name="M:Tunynet.Common.Repositories.INoticeRepository.SetIsHandled(System.Int64)">
            <summary>
            将通知设置为已处理状态
            </summary>
            <param name="id">通知Id</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.INoticeRepository.BatchSetIsHandled(System.Int64)">
            <summary>
            批量将所有未处理通知修改为已处理状态
            </summary>
            <param name="userId">接收人Id</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.INoticeRepository.GetUnhandledCount(System.Int64)">
            <summary>
            获取某人的未处理通知数
            </summary>
        </member>
        <member name="M:Tunynet.Common.Repositories.INoticeRepository.GetTops(System.Int64,System.Int32)">
            <summary>
            获取用户最近几条未处理的通知
            </summary>
            <param name="topNumber"></param>
            <param name="userId">通知接收人Id</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.INoticeRepository.Gets(System.Int64,System.Nullable{Tunynet.Common.NoticeStatus},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Int32)">
            <summary>
            获取用户通知的分页集合
            </summary>
            <param name="userId">用户Id</param>
            <param name="status">通知状态</param>
            <param name="typeId">通知类型Id</param>
            <param name="applicationId">应用Id</param>
            <param name="pageIndex">页码</param>
            <returns>通知分页集合</returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.INoticeRepository.GetUserReminderInfos">
            <summary>
            获取通知需提醒信息
            </summary>
            <returns></returns>
        </member>
        <member name="T:Tunynet.Common.Repositories.IUserNoticeSettingsRepository">
            <summary>
            用户通知设置数据访问接口
            </summary>
        </member>
        <member name="M:Tunynet.Common.Repositories.IUserNoticeSettingsRepository.GetUserNoticeSettingses(System.Int64)">
            <summary>
            获取用户通知设置
            </summary>
            <param name="userId">用户Id</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.IUserNoticeSettingsRepository.UpdateUserNoticeSettings(System.Int64,System.Collections.Generic.Dictionary{System.Int32,System.Boolean})">
            <summary>
            用户更新通知设置
            </summary>
            <param name="userId">用户Id</param>
            <param name="typeIds">通知类型Id集合</param>
        </member>
        <member name="T:Tunynet.Common.Repositories.NoticeRepository">
            <summary>
            通知数据访问
            </summary>
        </member>
        <member name="M:Tunynet.Common.Repositories.NoticeRepository.Insert(Tunynet.Common.Notice)">
            <summary>
            创建通知
            </summary>
            <param name="entity">通知实体</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.NoticeRepository.DeleteByEntityId(System.Object)">
            <summary>
            删除单条通知
            </summary>
            <param name="entityId">通知Id</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.NoticeRepository.ClearAll(System.Int64,System.Nullable{Tunynet.Common.NoticeStatus})">
            <summary>
            清空接收人的通知记录
            </summary>
            <param name="userId">接收人Id</param>
            <param name="status">通知状态</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.NoticeRepository.CleanByUser(System.Int64)">
            <summary>
            删除用户的记录（删除用户时使用）
            </summary>
            <param name="userId">用户id</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.NoticeRepository.SetIsHandled(System.Int64)">
            <summary>
            将通知设置为已处理状态
            </summary>
            <param name="id">通知Id</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.NoticeRepository.BatchSetIsHandled(System.Int64)">
            <summary>
            批量将所有未处理通知修改为已处理状态
            </summary>
            <param name="userId">接收人Id</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.NoticeRepository.GetUnhandledCount(System.Int64)">
            <summary>
            获取某人的未处理通知数
            </summary>
        </member>
        <member name="M:Tunynet.Common.Repositories.NoticeRepository.GetTops(System.Int64,System.Int32)">
            <summary>
            获取用户最近几条未处理的通知
            </summary>
            <param name="topNumber"></param>
            <param name="userId">通知接收人Id</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.NoticeRepository.Gets(System.Int64,System.Nullable{Tunynet.Common.NoticeStatus},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Int32)">
            <summary>
            获取用户通知的分页集合
            </summary>
            <param name="userId">用户Id</param>
            <param name="status">通知状态</param>
            <param name="typeId">通知类型Id</param>
            <param name="applicationId">应用Id</param>
            <param name="pageIndex">页码</param>
            <returns>通知分页集合</returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.NoticeRepository.GetUserReminderInfos">
            <summary>
            获取通知需提醒信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.NoticeRepository.GetCacheKey_UnhandledNoticeCount(System.Int64)">
            <summary>
            获取用户未处理通知数的CacheKey
            </summary>
            <param name="userId">用户Id</param>
        </member>
        <member name="T:Tunynet.Common.Repositories.UserNoticeSettingsRepository">
            <summary>
            通知数据访问
            </summary>
        </member>
        <member name="M:Tunynet.Common.Repositories.UserNoticeSettingsRepository.GetUserNoticeSettingses(System.Int64)">
            <summary>
            获取用户通知设置
            </summary>
            <param name="userId">用户id</param>
            <returns>用户设置</returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.UserNoticeSettingsRepository.UpdateUserNoticeSettings(System.Int64,System.Collections.Generic.Dictionary{System.Int32,System.Boolean})">
            <summary>
            更新用户请求设置
            </summary>
            <param name="userId">用户id</param>
            <param name="userNoticeSettings">用户的设置</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.UserNoticeSettingsRepository.GetCacheKey_UserNoticeSettingses(System.Int64)">
            <summary>
            获取用户通知设置的CacheKey
            </summary>
            <param name="userId">用户Id</param>
        </member>
        <member name="T:Tunynet.Common.UserNoticeSettings">
            <summary>
            用户通知设置类
            </summary>
        </member>
        <member name="M:Tunynet.Common.UserNoticeSettings.New">
            <summary>
            新建实体时使用
            </summary>
        </member>
        <member name="P:Tunynet.Common.UserNoticeSettings.Id">
             <summary>
            Id
             </summary>
        </member>
        <member name="P:Tunynet.Common.UserNoticeSettings.UserId">
             <summary>
            用户Id
             </summary>
        </member>
        <member name="P:Tunynet.Common.UserNoticeSettings.TypeId">
             <summary>
            类型Id
             </summary>
        </member>
        <member name="P:Tunynet.Common.UserNoticeSettings.IsAllowable">
            <summary>
            是否允许发送
            </summary>
        </member>
        <member name="T:Tunynet.Common.ReminderSettings">
            <summary>
            站点提醒设置
            </summary>
        </member>
        <member name="P:Tunynet.Common.ReminderSettings.ReminderModeSettingses">
            <summary>
            提醒方式集合
            </summary>
        </member>
        <member name="P:Tunynet.Common.ReminderSettings.ReminderRecordStorageDay">
            <summary>
            提醒记录保留的天数
            </summary>
        </member>
        <member name="T:Tunynet.Common.IReminderInfoAccessor">
            <summary>
            提醒信息查询接口
            </summary>
        </member>
        <member name="M:Tunynet.Common.IReminderInfoAccessor.GetProcessUrl(System.Int64)">
            <summary>
            获取处理地址
            </summary>
        </member>
        <member name="M:Tunynet.Common.IReminderInfoAccessor.GetUserReminderInfos">
            <summary>
            获取用户提醒信息集合
            </summary>
            <returns>用户提醒信息集合</returns>
        </member>
        <member name="P:Tunynet.Common.IReminderInfoAccessor.ReminderInfoTypeId">
            <summary>
            提醒信息类型Id
            </summary>
        </member>
        <member name="T:Tunynet.Common.IReminderSender">
            <summary>
            发送提醒接口
            </summary>
        </member>
        <member name="M:Tunynet.Common.IReminderSender.SendReminder(System.Collections.Generic.IList{Tunynet.Common.UserReminderInfo})">
            <summary>
            发送提醒
            </summary>
            <param name="userReminderInfos">用户提醒信息集合</param>
        </member>
        <member name="P:Tunynet.Common.IReminderSender.ReminderModeId">
            <summary>
            提醒方式Id
            </summary>
        </member>
        <member name="T:Tunynet.Common.ReminderInfo">
            <summary>
            提醒信息
            </summary>
        </member>
        <member name="P:Tunynet.Common.ReminderInfo.ObjectId">
            <summary>
            提醒对象Id
            </summary>
        </member>
        <member name="P:Tunynet.Common.ReminderInfo.Title">
            <summary>
            标题
            </summary>
        </member>
        <member name="P:Tunynet.Common.ReminderInfo.DateCreated">
            <summary>
            创建时间
            </summary>
        </member>
        <member name="T:Tunynet.Common.ReminderInfoType">
            <summary>
            提醒信息类型实体类
            </summary>
        </member>
        <member name="M:Tunynet.Common.ReminderInfoType.#cctor">
            <summary>
            静态构造器
            </summary>
        </member>
        <member name="M:Tunynet.Common.ReminderInfoType.#ctor">
            <summary>
            构造器
            </summary>
        </member>
        <member name="M:Tunynet.Common.ReminderInfoType.GetAll">
            <summary>
            获取提醒信息类型
            </summary>
            <returns>提醒信息类型</returns>
        </member>
        <member name="M:Tunynet.Common.ReminderInfoType.Get(System.Int32)">
            <summary>
            获取提醒信息类型
            </summary>
            <param name="typeId">类型Id</param>
            <returns>提醒信息类型</returns>
        </member>
        <member name="M:Tunynet.Common.ReminderInfoType.Add(Tunynet.Common.ReminderInfoType)">
            <summary>
            添加提醒信息类型
            </summary>
            <param name="ReminderInfoType">提醒信息类型</param>
        </member>
        <member name="M:Tunynet.Common.ReminderInfoType.Remove(System.Int32)">
            <summary>
            删除提醒信息类型
            </summary>
            <param name="typeId">类型Id</param>
        </member>
        <member name="P:Tunynet.Common.ReminderInfoType.TypeId">
            <summary>
            类型Id
            </summary>
        </member>
        <member name="P:Tunynet.Common.ReminderInfoType.TypeName">
            <summary>
            类型名称
            </summary>
        </member>
        <member name="P:Tunynet.Common.ReminderInfoType.Description">
            <summary>
            类型描述
            </summary>
        </member>
        <member name="T:Tunynet.Common.ReminderInfoTypeIds">
            <summary>
            提醒信息类型Id管理类
            </summary>
        </member>
        <member name="M:Tunynet.Common.ReminderInfoTypeIds.Instance">
            <summary>
            获取单例
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.ReminderInfoTypeIds.Message">
            <summary>
            私信
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.ReminderInfoTypeIds.Notice">
            <summary>
            通知
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.ReminderInfoTypeIds.Invitation">
            <summary>
            请求
            </summary>
            <returns></returns>
        </member>
        <member name="T:Tunynet.Common.ReminderInfoTypeSettings">
            <summary>
            提醒信息类型设置实体类
            </summary>
        </member>
        <member name="P:Tunynet.Common.ReminderInfoTypeSettings.ReminderInfoTypeId">
            <summary>
            提醒信息类型Id
            </summary>
        </member>
        <member name="P:Tunynet.Common.ReminderInfoTypeSettings.ReminderThreshold">
            <summary>
            发送提醒的时间阀值
            </summary>
        </member>
        <member name="P:Tunynet.Common.ReminderInfoTypeSettings.IsEnabled">
            <summary>
            是否启用提醒
            </summary>
        </member>
        <member name="P:Tunynet.Common.ReminderInfoTypeSettings.IsRepeated">
            <summary>
            是否重复提醒
            </summary>
        </member>
        <member name="P:Tunynet.Common.ReminderInfoTypeSettings.RepeatInterval">
            <summary>
            重复提醒间隔时间，多长时间（单位：分钟）发送一次提醒
            </summary>
        </member>
        <member name="T:Tunynet.Common.ReminderMode">
            <summary>
            提醒方式实体类
            </summary>
        </member>
        <member name="M:Tunynet.Common.ReminderMode.#cctor">
            <summary>
            静态构造器
            </summary>
        </member>
        <member name="M:Tunynet.Common.ReminderMode.#ctor">
            <summary>
            构造器
            </summary>
        </member>
        <member name="M:Tunynet.Common.ReminderMode.GetAll">
            <summary>
            获取提醒方式
            </summary>
            <returns>提醒方式</returns>
        </member>
        <member name="M:Tunynet.Common.ReminderMode.Get(System.Int32)">
            <summary>
            获取提醒方式
            </summary>
            <param name="typeId">类型Id</param>
            <returns>提醒方式</returns>
        </member>
        <member name="M:Tunynet.Common.ReminderMode.Add(Tunynet.Common.ReminderMode)">
            <summary>
            添加提醒方式
            </summary>
            <param name="ReminderMode">提醒方式</param>
        </member>
        <member name="M:Tunynet.Common.ReminderMode.Remove(System.Int32)">
            <summary>
            删除提醒方式
            </summary>
            <param name="typeId">类型Id</param>
        </member>
        <member name="P:Tunynet.Common.ReminderMode.ModeId">
            <summary>
            提醒方式Id
            </summary>
        </member>
        <member name="P:Tunynet.Common.ReminderMode.ModeName">
            <summary>
            提醒方式名称
            </summary>
        </member>
        <member name="P:Tunynet.Common.ReminderMode.IsLimitUsed">
            <summary>
            是否仅允许特定角色用户使用（若是，则会检查站点提醒设置中提醒方式的角色限制）
            </summary>
        </member>
        <member name="P:Tunynet.Common.ReminderMode.Description">
            <summary>
            提醒方式描述
            </summary>
        </member>
        <member name="T:Tunynet.Common.ReminderModeIds">
            <summary>
            提醒方式Id管理类
            </summary>
        </member>
        <member name="M:Tunynet.Common.ReminderModeIds.Instance">
            <summary>
            获取单例
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.ReminderModeIds.Email">
            <summary>
            电子邮件
            </summary>
            <returns></returns>
        </member>
        <member name="T:Tunynet.Common.ReminderRecord">
            <summary>
            提醒记录
            </summary>
        </member>
        <member name="M:Tunynet.Common.ReminderRecord.New">
            <summary>
            新建实体时使用
            </summary>
        </member>
        <member name="P:Tunynet.Common.ReminderRecord.Id">
             <summary>
            id
             </summary>
        </member>
        <member name="P:Tunynet.Common.ReminderRecord.UserId">
             <summary>
            用户id
             </summary>
        </member>
        <member name="P:Tunynet.Common.ReminderRecord.ReminderModeId">
             <summary>
            提醒方式(Email=1，手机=2)
             </summary>
        </member>
        <member name="P:Tunynet.Common.ReminderRecord.ReminderInfoTypeId">
             <summary>
            提醒信息类型（Message=1，Notice=2，Invitation=3）
             </summary>
        </member>
        <member name="P:Tunynet.Common.ReminderRecord.ObjectId">
             <summary>
            提醒对象Id
             </summary>
        </member>
        <member name="P:Tunynet.Common.ReminderRecord.DateCreated">
             <summary>
            创建日期
             </summary>
        </member>
        <member name="P:Tunynet.Common.ReminderRecord.LastReminderTime">
             <summary>
            最后提醒时间
             </summary>
        </member>
        <member name="T:Tunynet.Common.ReminderService">
            <summary>
            提醒业务逻辑类
            </summary>
        </member>
        <member name="M:Tunynet.Common.ReminderService.#ctor">
            <summary>
            构造器
            </summary>
        </member>
        <member name="M:Tunynet.Common.ReminderService.#ctor(Tunynet.Common.Repositories.IReminderRecordRepository,Tunynet.Common.Repositories.IUserReminderSettingsRepository)">
            <summary>
            构造器
            </summary>
        </member>
        <member name="M:Tunynet.Common.ReminderService.CreateRecords(System.Int64,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            创建提醒记录
            </summary>
            <param name="userId">被提醒用户Id</param>
            <param name="reminderModeId">提醒方式</param>
            <param name="reminderInfoTypeId">提醒信息类型</param>
            <param name="objectIds">提醒对象Id集合</param>
        </member>
        <member name="M:Tunynet.Common.ReminderService.UpdateRecoreds(System.Int64,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            更新提醒记录（只更新最后提醒时间）
            </summary>
            <param name="userId">被提醒用户Id</param>
            <param name="reminderModeId">提醒方式Id</param>
            <param name="reminderInfoTypeId">提醒信息类型Id</param>
            <param name="objectIds">提醒对象Id集合</param>
        </member>
        <member name="M:Tunynet.Common.ReminderService.CleanByUser(System.Int64)">
            <summary>
            删除用户数据（删除用户时使用）
            </summary>
            <param name="userId">用户id</param>
        </member>
        <member name="M:Tunynet.Common.ReminderService.DeleteTrashRecords">
            <summary>
            清除垃圾提醒记录
            </summary>
        </member>
        <member name="M:Tunynet.Common.ReminderService.GetRecords(System.Int64,System.Int32,System.Int32)">
            <summary>
            获取用户所有的提醒记录
            </summary>
            <param name="userId">被提醒用户Id</param>
            <param name="reminderModeId">提醒方式Id</param>
            <param name="reminderInfoTypeId">提醒信息类型Id</param>
        </member>
        <member name="M:Tunynet.Common.ReminderService.IsExits(System.Int64,System.Int32,System.Int32,System.Int64)">
            <summary>
            是否提醒过
            </summary>
            <param name="userId">被提醒用户Id</param>
            <param name="reminderModeId">提醒方式</param>
            <param name="reminderInfoTypeId">提醒信息类型</param>
            <param name="objectId">提醒对象Id</param>
        </member>
        <member name="M:Tunynet.Common.ReminderService.GetUserReminderSettings(System.Int64,System.Int32,System.Int32)">
            <summary>
            用户获取提醒设置
            </summary>
            <param name="userId">用户Id</param>
            <param name="reminderModeId">提醒方式Id</param>
            <param name="reminderInfoTypeId">提醒信息类型Id</param>
            <returns>用户提醒设置</returns>
        </member>
        <member name="M:Tunynet.Common.ReminderService.GetAllUserReminderSettings(System.Int64)">
            <summary>
            用户获取所有提醒设置
            </summary>
            <param name="userId">用户Id</param>
            <returns>Key:提醒方式Id,Value:用户提醒设置集合</returns>
        </member>
        <member name="M:Tunynet.Common.ReminderService.BatchUpdateUserReminderSettings(System.Int64,System.Collections.Generic.IEnumerable{Tunynet.Common.UserReminderSettings})">
            <summary>
            用户更新提醒设置
            </summary>
            <param name="userId">用户Id</param>
            <param name="userReminderSettings">用户提醒设置集合</param>
        </member>
        <member name="T:Tunynet.Common.Repositories.IReminderRecordRepository">
            <summary>
            提醒记录数据访问接口
            </summary>
        </member>
        <member name="M:Tunynet.Common.Repositories.IReminderRecordRepository.CreateRecords(System.Int64,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            创建提醒记录
            </summary>
            <param name="userId">被提醒用户Id</param>
            <param name="reminderMode">提醒方式</param>
            <param name="reminderInfoType">提醒信息类型</param>
            <param name="objectIds">提醒对象Id集合</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.IReminderRecordRepository.UpdateRecoreds(System.Int64,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            更新提醒记录（只更新最后提醒时间）
            </summary>
            <param name="userId">被提醒用户Id</param>
            <param name="reminderModeId">提醒方式Id</param>
            <param name="reminderInfoTypeId">提醒信息类型Id</param>
            <param name="objectIds">提醒对象Id集合</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.IReminderRecordRepository.CleanByUser(System.Int64)">
            <summary>
            删除用户的信息（删除用户时使用）
            </summary>
            <param name="userId">用户id</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.IReminderRecordRepository.DeleteTrashRecords(System.Int32)">
            <summary>
            清除垃圾提醒记录
            </summary>
            <param name="storageDay">保留天数</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.IReminderRecordRepository.GetRecords(System.Int64,System.Int32,System.Int32)">
            <summary>
            获取用户所有的提醒记录
            </summary>
            <param name="userId">被提醒用户Id</param>
            <param name="reminderModeId">提醒方式Id</param>
            <param name="reminderInfoTypeId">提醒信息类型Id</param>
        </member>
        <member name="T:Tunynet.Common.Repositories.IUserReminderSettingsRepository">
            <summary>
            用户提醒设置数据访问接口
            </summary>
        </member>
        <member name="M:Tunynet.Common.Repositories.IUserReminderSettingsRepository.GetAllUserReminderSettings(System.Int64)">
            <summary>
            用户获取所有提醒设置
            </summary>
            <param name="userId">用户Id</param>
            <returns>用户提醒设置集合</returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.IUserReminderSettingsRepository.BatchUpdateUserReminderSettings(System.Int64,System.Collections.Generic.IEnumerable{Tunynet.Common.UserReminderSettings})">
            <summary>
            用户更新提醒设置
            </summary>
            <param name="userId">用户Id</param>
            <param name="userReminderSettings">用户提醒设置集合</param>
        </member>
        <member name="T:Tunynet.Common.Repositories.ReminderRecordRepository">
            <summary>
            提醒记录数据访问
            </summary>
        </member>
        <member name="M:Tunynet.Common.Repositories.ReminderRecordRepository.CreateRecords(System.Int64,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            创建提醒记录
            </summary>
            <param name="userId">被提醒用户Id</param>
            <param name="reminderMode">提醒方式</param>
            <param name="reminderInfoType">提醒信息类型</param>
            <param name="objectIds">提醒对象Id集合</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.ReminderRecordRepository.UpdateRecoreds(System.Int64,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            更新提醒记录（只更新最后提醒时间）
            </summary>
            <param name="userId">被提醒用户Id</param>
            <param name="reminderModeId">提醒方式Id</param>
            <param name="reminderInfoTypeId">提醒信息类型Id</param>
            <param name="objectIds">提醒对象Id集合</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.ReminderRecordRepository.CleanByUser(System.Int64)">
            <summary>
            删除用户数据（删除用户的时候调用）
            </summary>
            <param name="userId">用户id</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.ReminderRecordRepository.DeleteTrashRecords(System.Int32)">
            <summary>
            清除垃圾提醒记录
            </summary>
            <param name="storageDay">保留天数</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.ReminderRecordRepository.GetRecords(System.Int64,System.Int32,System.Int32)">
            <summary>
            获取用户所有的提醒记录
            </summary>
            <param name="userId">被提醒用户Id</param>
            <param name="reminderModeId">提醒方式Id</param>
            <param name="reminderInfoTypeId">提醒信息类型Id</param>
        </member>
        <member name="T:Tunynet.Common.Repositories.UserReminderSettingsRepository">
            <summary>
            用户提醒设置数据访问类
            </summary>
        </member>
        <member name="M:Tunynet.Common.Repositories.UserReminderSettingsRepository.GetAllUserReminderSettings(System.Int64)">
            <summary>
            用户获取所有提醒设置
            </summary>
            <param name="userId">用户Id</param>
            <returns>用户提醒设置集合（Key：提醒方式Id，Value：提醒设置实体）</returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.UserReminderSettingsRepository.BatchUpdateUserReminderSettings(System.Int64,System.Collections.Generic.IEnumerable{Tunynet.Common.UserReminderSettings})">
            <summary>
            用户批量更新提醒设置
            </summary>
            <param name="userId">用户Id</param>
            <param name="userReminderSettings">用户提醒设置集合</param>
        </member>
        <member name="T:Tunynet.Common.DeleteTrashReminderRecordsTask">
            <summary>
            定期清理垃圾提醒记录
            </summary>
        </member>
        <member name="M:Tunynet.Common.DeleteTrashReminderRecordsTask.Execute(Tunynet.Tasks.TaskDetail)">
            <summary>
            任务执行的内容
            </summary>
            <param name="taskDetail">任务配置状态信息</param>
        </member>
        <member name="T:Tunynet.Common.SendReminderTask">
            <summary>
            定期发送提醒任务
            </summary>
        </member>
        <member name="M:Tunynet.Common.SendReminderTask.Execute(Tunynet.Tasks.TaskDetail)">
            <summary>
            任务执行的内容
            </summary>
            <param name="taskDetail">任务配置状态信息</param>
        </member>
        <member name="T:Tunynet.Common.UserReminderInfo">
            <summary>
            用户提醒信息
            </summary>
        </member>
        <member name="M:Tunynet.Common.UserReminderInfo.#ctor">
            <summary>
            默认构造器
            </summary>
        </member>
        <member name="M:Tunynet.Common.UserReminderInfo.#ctor(System.Int64,System.Collections.Generic.IList{Tunynet.Common.ReminderInfo})">
            <summary>
            有参构造器
            </summary>
            <param name="userId">用户Id</param>
            <param name="reminderInfos">提醒信息集合</param>
        </member>
        <member name="M:Tunynet.Common.UserReminderInfo.Append(Tunynet.Common.ReminderInfo)">
            <summary>
            添加提醒信息
            </summary>
            <param name="reminderInfo">提醒信息</param>
        </member>
        <member name="M:Tunynet.Common.UserReminderInfo.SetReminderInfos(System.Collections.Generic.IList{Tunynet.Common.ReminderInfo})">
            <summary>
            设置提醒信息
            </summary>
            <param name="reminderInfo">提醒信息</param>
        </member>
        <member name="P:Tunynet.Common.UserReminderInfo.UserId">
            <summary>
            用户Id
            </summary>
        </member>
        <member name="P:Tunynet.Common.UserReminderInfo.ProcessUrl">
            <summary>
            处理地址（任务自运行时赋值）
            </summary>
        </member>
        <member name="P:Tunynet.Common.UserReminderInfo.ReminderInfoType">
            <summary>
            提醒信息类型
            </summary>
        </member>
        <member name="P:Tunynet.Common.UserReminderInfo.ReminderInfos">
            <summary>
            提醒信息集合
            </summary>
        </member>
        <member name="T:Tunynet.Common.UserReminderSettings">
            <summary>
            用户提醒设置实体
            </summary>
        </member>
        <member name="M:Tunynet.Common.UserReminderSettings.New(Tunynet.Common.ReminderInfoTypeSettings)">
            <summary>
            新建实体时使用
            </summary>
        </member>
        <member name="P:Tunynet.Common.UserReminderSettings.Id">
             <summary>
            Id
             </summary>
        </member>
        <member name="P:Tunynet.Common.UserReminderSettings.UserId">
             <summary>
            用户Id
             </summary>
        </member>
        <member name="P:Tunynet.Common.UserReminderSettings.ReminderModeId">
             <summary>
            提醒方式(Email=1，手机=2)
             </summary>
        </member>
        <member name="P:Tunynet.Common.UserReminderSettings.ReminderInfoTypeId">
             <summary>
            提醒信息类型（私信=1，通知=2，请求=3）
             </summary>
        </member>
        <member name="P:Tunynet.Common.UserReminderSettings.ReminderThreshold">
             <summary>
            发送提醒的时间阀值（单位为分钟），超过此值，发现有未处理的信息将发送提醒
             </summary>
        </member>
        <member name="P:Tunynet.Common.UserReminderSettings.IsEnabled">
             <summary>
            是否启用提醒
             </summary>
        </member>
        <member name="P:Tunynet.Common.UserReminderSettings.IsRepeated">
             <summary>
            是否重复提醒
             </summary>
        </member>
        <member name="P:Tunynet.Common.UserReminderSettings.RepeatInterval">
             <summary>
            重复提醒间隔时间，多长时间（单位：分钟）发送一次提醒
             </summary>
        </member>
        <member name="T:Tunynet.Common.ReminderModeSettings">
            <summary>
            提醒方式实体类
            </summary>
        </member>
        <member name="P:Tunynet.Common.ReminderModeSettings.ModeId">
            <summary>
            提醒方式Id
            </summary>
        </member>
        <member name="P:Tunynet.Common.ReminderModeSettings.ReminderInfoTypeSettingses">
            <summary>
            提醒类型设置
            </summary>
        </member>
        <member name="P:Tunynet.Common.ReminderModeSettings.AllowedUserRoleNames">
            <summary>
            允许的用户角色
            </summary>
        </member>
        <member name="T:Tunynet.Common.Announcement">
            <summary>
            公告实体类
            </summary>
        </member>
        <member name="M:Tunynet.Common.Announcement.New">
            <summary>
            新建实体时使用
            </summary>
        </member>
        <member name="P:Tunynet.Common.Announcement.Id">
             <summary>
            Primary key
             </summary>
        </member>
        <member name="P:Tunynet.Common.Announcement.Subject">
             <summary>
            公告主题
             </summary>
        </member>
        <member name="P:Tunynet.Common.Announcement.SubjectStyle">
             <summary>
            主题字体风格
             </summary>
        </member>
        <member name="P:Tunynet.Common.Announcement.Body">
             <summary>
            公告内容
             </summary>
        </member>
        <member name="P:Tunynet.Common.Announcement.IsHyperLink">
             <summary>
            是否是连接
             </summary>
        </member>
        <member name="P:Tunynet.Common.Announcement.HyperLinkUrl">
             <summary>
            链接地址
             </summary>
        </member>
        <member name="P:Tunynet.Common.Announcement.EnabledDescription">
             <summary>
            是否启用
             </summary>
        </member>
        <member name="P:Tunynet.Common.Announcement.ReleaseDate">
             <summary>
            发布时间
             </summary>
        </member>
        <member name="P:Tunynet.Common.Announcement.ExpiredDate">
             <summary>
            过期时间
             </summary>
        </member>
        <member name="P:Tunynet.Common.Announcement.LastModified">
             <summary>
            更新时间
             </summary>
        </member>
        <member name="P:Tunynet.Common.Announcement.CreatDate">
             <summary>
            创建时间
             </summary>
        </member>
        <member name="P:Tunynet.Common.Announcement.UserId">
             <summary>
            创建人Id
             </summary>
        </member>
        <member name="P:Tunynet.Common.Announcement.DisplayOrder">
             <summary>
            显示顺序
             </summary>
        </member>
        <member name="P:Tunynet.Common.Announcement.DisplayArea">
             <summary>
            展示区域
             </summary>
        </member>
        <member name="P:Tunynet.Common.Announcement.HitTimes">
            <summary>
            浏览数
            </summary>
        </member>
        <member name="P:Tunynet.Common.Announcement.UserName">
            <summary>
            撰稿人
            </summary>
        </member>
        <member name="P:Tunynet.Common.Announcement.IsAdministrator">
            <summary>
            管理员标示
            </summary>
        </member>
        <member name="T:Tunynet.Common.Announcement_Status">
            <summary>
            公告状态
            </summary>
        </member>
        <member name="F:Tunynet.Common.Announcement_Status.UnPublish">
            <summary>
            未发布
            </summary>
        </member>
        <member name="F:Tunynet.Common.Announcement_Status.Published">
            <summary>
            已发布
            </summary>
        </member>
        <member name="F:Tunynet.Common.Announcement_Status.Expired">
            <summary>
            已过期
            </summary>
        </member>
        <member name="T:Tunynet.Common.Announcement_DisplayArea">
            <summary>
            公告呈现区域
            </summary>
        </member>
        <member name="F:Tunynet.Common.Announcement_DisplayArea.Home">
            <summary>
            频道首页
            </summary>
        </member>
        <member name="F:Tunynet.Common.Announcement_DisplayArea.UserSpace">
            <summary>
            用户空间首页
            </summary>
        </member>
        <member name="T:Tunynet.Common.AnnouncementService">
            <summary>
            公告业务逻辑
            </summary>
        </member>
        <member name="M:Tunynet.Common.AnnouncementService.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Tunynet.Common.AnnouncementService.#ctor(Tunynet.Common.Repositories.IAnnouncementRepository)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Tunynet.Common.AnnouncementService.Create(Tunynet.Common.Announcement)">
            <summary>
            创建公告
            </summary>
            <param name="announcement">公告实体</param>
        </member>
        <member name="M:Tunynet.Common.AnnouncementService.Update(Tunynet.Common.Announcement)">
            <summary>
            更新公告
            </summary>
            <param name="announcement">公告实体</param>
        </member>
        <member name="M:Tunynet.Common.AnnouncementService.Delete(System.Int64)">
            <summary>
            删除公告
            </summary>
            <param name="announcementId">公告Id</param>
        </member>
        <member name="M:Tunynet.Common.AnnouncementService.ChangeStatusToExpired(System.Int64)">
            <summary>
            更变为过期
            </summary>
            <param name="announcementId">公告Id</param>
        </member>
        <member name="M:Tunynet.Common.AnnouncementService.Get(System.Int64)">
            <summary>
            获取公告
            </summary>
            <param name="announcementId">公告Id</param>
        </member>
        <member name="M:Tunynet.Common.AnnouncementService.Gets(System.String)">
            <summary>
            根据展示区域过去公告
            </summary>
            <param name="displayArea">显示区域</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.AnnouncementService.GetForAdmin(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{Tunynet.Common.Announcement_Status},System.String,System.Int32,System.Int32)">
            <summary>
            获取公告(后台管理)
            </summary>
            <param name="keyword">关键字</param>
            <param name="startDate_Expired">过期时间前</param>
            <param name="endDate_Expired">过期时间后</param>
            <param name="startDate_Update">更新时间前</param>
            <param name="endDate_Update">更新时间后</param>
            <param name="status">状态</param>
            <param name="displayArea">显示区域</param>
            <param name="pageIndex">pageIndex</param>
            <param name="pageSize">pageSize</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.AnnouncementService.Gets(System.Int32,System.Int32)">
            <summary>
            获取公告(前台)
            </summary>
            <param name="pageSize">pageSize</param>
            <param name="pageIndex">pageIndex</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.AnnouncementService.ChangeDisplayOrder(System.Int64,System.Int64)">
            <summary>
            改变显示顺序
            </summary>
            <param name="id">id</param>
            <param name="referenceId">referenceId</param>
        </member>
        <member name="T:Tunynet.Common.Repositories.AnnouncementRepository">
            <summary>
            公告数据仓储类
            </summary>
        </member>
        <member name="T:Tunynet.Common.Repositories.IAnnouncementRepository">
            <summary>
            公告仓储类接口
            </summary>
        </member>
        <member name="M:Tunynet.Common.Repositories.IAnnouncementRepository.ChangeDisplayOrder(System.Int64,System.Int64)">
            <summary>
            改变顺序
            </summary>
            <param name="id"></param>
            <param name="referenceId"></param>
        </member>
        <member name="M:Tunynet.Common.Repositories.IAnnouncementRepository.GetForAdmin(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{Tunynet.Common.Announcement_Status},System.String,System.Int32,System.Int32)">
             <summary>
            为后台管理获取公告 
             </summary>
             <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.IAnnouncementRepository.Gets(System.Int32,System.Int32)">
            <summary>
            为前台显示列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.IAnnouncementRepository.Gets(System.String)">
            <summary>
            根据展示区域获取公告
            </summary>
            <param name="displayArea"></param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.AnnouncementRepository.Update(Tunynet.Common.Announcement)">
            <summary>
            更新公告
            </summary>
            <param name="entity">公告实体</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.AnnouncementRepository.Insert(Tunynet.Common.Announcement)">
            <summary>
            添加公告
            </summary>
            <param name="entity">公告实体</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.AnnouncementRepository.ChangeDisplayOrder(System.Int64,System.Int64)">
            <summary>
            更改显示顺序
            </summary>
            <param name="id">id</param>
            <param name="referenceId">referenceId</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.AnnouncementRepository.GetForAdmin(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{Tunynet.Common.Announcement_Status},System.String,System.Int32,System.Int32)">
            <summary>
            获取公告列表(后台管理)
            </summary>
            <param name="keyword">关键字</param>
            <param name="startDate_Expired">过期开始时间</param>
            <param name="endDate_Expired">过期结束时间</param>
            <param name="startDate_Update">更新开始时间</param>
            <param name="endDate_Update">更新结束时间</param>
            <param name="status">状态</param>        
            <param name="displayArea">呈现区域</param>
            <param name="pageSize">pageSize</param>
            <param name="pageIndex">pageIndex</param>
            <returns>分页集合</returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.AnnouncementRepository.Gets(System.Int32,System.Int32)">
            <summary>
            获取公告(前台)
            </summary>
            <param name="pageSize">pageSize</param>
            <param name="pageIndex">pageIndex</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.AnnouncementRepository.Gets(System.String)">
            <summary>
            根据展示区域获取公告
            </summary>
            <param name="displayArea">展示区域</param>
            <returns></returns>
        </member>
        <member name="T:Tunynet.Common.Category">
            <summary>
            分类实体类
            </summary>
        </member>
        <member name="M:Tunynet.Common.Category.New">
            <summary>
            新建实体时使用
            </summary>
        </member>
        <member name="P:Tunynet.Common.Category.CategoryId">
             <summary>
            类别Id 
             </summary>
        </member>
        <member name="P:Tunynet.Common.Category.ParentId">
             <summary>
            父评论Id（顶级ParentId=0）
             </summary>
        </member>
        <member name="P:Tunynet.Common.Category.OwnerId">
             <summary>
            拥有者Id
             </summary>
        </member>
        <member name="P:Tunynet.Common.Category.TenantTypeId">
             <summary>
            租户类型Id
             </summary>
        </member>
        <member name="P:Tunynet.Common.Category.CategoryName">
             <summary>
            类别名称
             </summary>
        </member>
        <member name="P:Tunynet.Common.Category.Description">
             <summary>
            类别描述
             </summary>
        </member>
        <member name="P:Tunynet.Common.Category.DisplayOrder">
             <summary>
            排序序号
             </summary>
        </member>
        <member name="P:Tunynet.Common.Category.Depth">
             <summary>
            类别深度 顶级类别 Depth=0
             </summary>
        </member>
        <member name="P:Tunynet.Common.Category.ChildCount">
             <summary>
            子类别数目
             </summary>
        </member>
        <member name="P:Tunynet.Common.Category.ItemCount">
             <summary>
            内容项数目
             </summary>
        </member>
        <member name="P:Tunynet.Common.Category.PrivacyStatus">
             <summary>
            隐私状态
             </summary>
        </member>
        <member name="P:Tunynet.Common.Category.AuditStatus">
             <summary>
            审核状态
             </summary>
        </member>
        <member name="P:Tunynet.Common.Category.FeaturedItemId">
             <summary>
            特征内容项目Id
             </summary>
        </member>
        <member name="P:Tunynet.Common.Category.LastModified">
             <summary>
            最后更新日期
             </summary>
        </member>
        <member name="P:Tunynet.Common.Category.DateCreated">
             <summary>
            创建日期
             </summary>
        </member>
        <member name="P:Tunynet.Common.Category.Parent">
            <summary>
            父类别 
            </summary>
        </member>
        <member name="P:Tunynet.Common.Category.Children">
            <summary>
            子类别列表
            </summary>
        </member>
        <member name="P:Tunynet.Common.Category.CumulateItemCount">
            <summary>
            累积内容项数量(包含所有后代ItemCount)
            </summary>
        </member>
        <member name="P:Tunynet.Common.Category.MaxDepth">
            <summary>
            移动个数
            </summary>
        </member>
        <member name="T:Tunynet.Common.CategoryEventArgs">
            <summary>
            分类自定义事件
            </summary>
        </member>
        <member name="M:Tunynet.Common.CategoryEventArgs.#ctor(System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="eventOperationType">时间操作类型</param>
            <param name="tenantTypeId">租户类型Id</param>
        </member>
        <member name="M:Tunynet.Common.CategoryEventArgs.#ctor(System.String,System.String,System.Int64)">
            <summary>
            构造函数
            </summary>
            <param name="eventOperationType">时间操作类型</param>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="itemId">分类成员Id</param>
        </member>
        <member name="M:Tunynet.Common.CategoryEventArgs.#ctor(System.String,System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="eventOperationType">时间操作类型</param>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="tagName">分类名</param>
        </member>
        <member name="P:Tunynet.Common.CategoryEventArgs.TenantTypeId">
            <summary>
            租户类型Id
            </summary>
        </member>
        <member name="P:Tunynet.Common.CategoryEventArgs.ItemId">
            <summary>
            分类成员Id
            </summary>
        </member>
        <member name="P:Tunynet.Common.CategoryEventArgs.CategoryName">
            <summary>
            分类名
            </summary>
        </member>
        <member name="T:Tunynet.Common.CategoryService">
            <summary>
            分类业务逻辑类
            </summary>
        </member>
        <member name="T:Tunynet.Common.CategoryService`1">
            <summary>
            分类业务逻辑类
            </summary>
        </member>
        <member name="M:Tunynet.Common.CategoryService`1.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Tunynet.Common.CategoryService`1.#ctor(Tunynet.Common.Repositories.ICategoryRepository{`0},Tunynet.Common.Repositories.IItemInCategoryRepository)">
            <summary>
            可设置repository的构造函数
            </summary>
        </member>
        <member name="M:Tunynet.Common.CategoryService`1.Create(`0)">
            <summary>
            创建类别
            </summary>
            <param name="category">待创建的类别</param>
            <returns>创建成功返回true，否则返回false</returns>
        </member>
        <member name="M:Tunynet.Common.CategoryService`1.Update(`0)">
            <summary>
            更新类别，注意：不能更新ParentId属性！
            </summary>
            <param name="category">待更新的类别</param>
        </member>
        <member name="M:Tunynet.Common.CategoryService`1.Delete(System.Int64)">
            <summary>
            删除类别
            </summary>
            <param name="categoryId">待删除类别Id</param>
            <returns>删除成功返回true，否则返回false</returns>
        </member>
        <member name="M:Tunynet.Common.CategoryService`1.CleanByUser(System.Int64)">
            <summary>
            根据用户删除用户类别（删除用户时使用）
            </summary>
        </member>
        <member name="M:Tunynet.Common.CategoryService`1.UpdateAuditStatus(System.Collections.Generic.IEnumerable{System.Int64},Tunynet.Common.AuditStatus)">
            <summary>
            批量更新审核状态
            </summary>
            <param name="ids">分类Id列表</param>
            <param name="auditingStatus">审核状态</param>
        </member>
        <member name="M:Tunynet.Common.CategoryService`1.Merge(System.Int64,System.Int64)">
            <summary>
            从fromCategoryId并入到toCategoryId
            </summary>
            <remarks>
            例如：将分类fromCategoryId合并到分类toCategoryId，那么fromCategoryId分类下的所有子分类和实体全部归到toCategoryId分类，同时删除fromCategoryId分类
            </remarks>
            <param name="fromCategoryId">合并分类源类别</param>
            <param name="toCategoryId">合并分类目标类别</param>
        </member>
        <member name="M:Tunynet.Common.CategoryService`1.Move(System.Int64,System.Int64)">
            <summary>
            把fromCategoryId移动到toCategoryId
            </summary>
            <remarks>
            将一个分类移动到另一个分类，并作为另一个分类的子分类
            </remarks>
            <param name="fromCategoryId">被移动类别</param>
            <param name="toCategoryId">目标类别</param>
        </member>
        <member name="M:Tunynet.Common.CategoryService`1.Get(System.Int64)">
            <summary>
            获取Category
            </summary>
            <param name="categoryId">CategoryId</param>
        </member>
        <member name="M:Tunynet.Common.CategoryService`1.GetOwnerCategories(System.Int64,System.String)">
            <summary>
            获取拥有者的类别列表
            </summary>
            <param name="ownerId">类别拥有者Id</param>
            <param name="tenantTypeId">租户类型Id</param>
            <returns>按树状排序的</returns>
        </member>
        <member name="M:Tunynet.Common.CategoryService`1.GetRootCategories(System.String,System.Int64)">
            <summary>
            获取Onwer的所有根类别
            </summary>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="ownerId">OwnerId</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.CategoryService`1.GetChildren(System.Int64)">
            <summary>
            获取子类别
            </summary>
            <param name="parentCategoryId">父类别Id</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.CategoryService`1.GetDescendants(System.Int64)">
            <summary>
            获取后代类别
            </summary>
            <param name="parentCategoryId">父类别Id</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.CategoryService`1.GetCategories(System.Nullable{Tunynet.Common.PubliclyAuditStatus},System.String,System.String,System.Int32)">
            <summary>
            分页检索类别
            </summary>
            <returns>
            按创建时间倒序排列的分页类别列表
            </returns>
        </member>
        <!-- 对于成员“M:Tunynet.Common.CategoryService`1.GetOwnerCategories(System.Nullable{Tunynet.Common.PubliclyAuditStatus},System.String,System.String,System.Int64,System.Int32,System.Int32)”忽略有格式错误的 XML 注释 -->
        <member name="M:Tunynet.Common.CategoryService`1.AddItemsToCategory(System.Collections.Generic.IEnumerable{System.Int64},System.Int64)">
            <summary>
            批量为内容项设置类别
            </summary>
            <param name="itemIds">内容项Id集合</param>
            <param name="categoryId">类别Id</param>
        </member>
        <member name="M:Tunynet.Common.CategoryService`1.AddCategoriesToItem(System.Collections.Generic.IEnumerable{System.Int64},System.Int64)">
            <summary>
            为内容项批量设置类别
            </summary>
            <param name="categoryIds">类别Id集合</param>
            <param name="itemId">内容项Id</param>
            <param name="ownerId">类别拥有者Id</param>
        </member>
        <member name="M:Tunynet.Common.CategoryService`1.ClearCategoriesFromItem(System.Int64,System.Nullable{System.Int64},System.String)">
            <summary>
            清除内容项的所有类别(某个租户和用户的)
            </summary>
            <param name="itemId">内容项Id</param>
            <param name="ownerId">分类所有者</param>
            <param name="tenantTypeId">租户Id</param>
        </member>
        <member name="M:Tunynet.Common.CategoryService`1.ClearItemsFromCategory(`0)">
            <summary>
            删除分类下的所有的关联项
            </summary>
            <param name="category">要处理的分类</param>
            <param name="ownerId">拥有者Id</param>
        </member>
        <member name="M:Tunynet.Common.CategoryService`1.ClearItemsFromCategory(System.Int64)">
            <summary>
            删除分类下的所有的关联项
            </summary>
            <param name="categoryId">分类Id</param>
        </member>
        <member name="M:Tunynet.Common.CategoryService`1.DeleteItemInCategory(System.Int64,System.Int64)">
            <summary>
            删除分类同内容的关联项
            </summary>
            <param name="categoryId">分类Id</param>
            <param name="itemId">内容项Id</param>
            <param name="ownerId">拥有者Id</param>
        </member>
        <member name="M:Tunynet.Common.CategoryService`1.MoveItemsToCategory(System.Collections.Generic.IEnumerable{System.Int64},System.Int64,System.Nullable{System.Int64},System.String)">
            <summary>
            将内容项从fromCategoryId转移到toCategoryId
            </summary>
            <param name="itemIds">要转移的内容项</param>
            <param name="toCategoryId">目标分类Id</param>
            <param name="ownerId">分类所有者</param>
            <param name="tenantTypeId">租户Id</param>
        </member>
        <member name="M:Tunynet.Common.CategoryService`1.GetItemIds(System.Int64,System.Boolean)">
            <summary>
            获取类别的内容项集合
            </summary>
            <param name="categoryId">分类的Id集合</param>
            <returns>内容项的ID集合</returns>
        </member>
        <!-- 对于成员“M:Tunynet.Common.CategoryService`1.GetItemIds(System.Int64,System.Boolean,System.Int32,System.Int32,System.Int64@)”忽略有格式错误的 XML 注释 -->
        <member name="M:Tunynet.Common.CategoryService`1.GetCategoriesOfItem(System.Int64,System.Nullable{System.Int64},System.String)">
            <summary>
            获取内容项的所有类别
            </summary>
            <param name="itemId">内容项Id</param>
            <returns>返回内容项的类别集合</returns>
            <param name="ownerId">分类所有者</param>
            <param name="tenantTypeId">租户Id</param>
        </member>
        <member name="T:Tunynet.Common.ItemInCategory">
            <summary>
            分类与内容的关联项实体
            </summary>
        </member>
        <member name="M:Tunynet.Common.ItemInCategory.New">
            <summary>
            新建实体时使用
            </summary>
        </member>
        <member name="P:Tunynet.Common.ItemInCategory.Id">
             <summary>
            Id
             </summary>
        </member>
        <member name="P:Tunynet.Common.ItemInCategory.CategoryId">
             <summary>
            类别Id
             </summary>
        </member>
        <member name="P:Tunynet.Common.ItemInCategory.ItemId">
             <summary>
            内容项Id
             </summary>
        </member>
        <member name="T:Tunynet.Common.Repositories.CategoryRepository`1">
            <summary>
            分类仓储的具体实现类
            </summary>
        </member>
        <member name="T:Tunynet.Common.Repositories.ICategoryRepository`1">
            <summary>
            分类仓储接口，实现特殊方法
            </summary>
        </member>
        <member name="M:Tunynet.Common.Repositories.ICategoryRepository`1.UpdateAuditStatus(System.Collections.Generic.IEnumerable{System.Int64},Tunynet.Common.AuditStatus)">
            <summary>
            批量更新审核状态
            </summary>
            <param name="ids">评论Id列表</param>
            <param name="auditingStatus">审核状态</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.ICategoryRepository`1.Merge(System.Int64,System.Int64)">
            <summary>
            从fromCategoryId并入到toCategoryId
            </summary>
            <remarks>
            例如：将分类fromCategoryId合并到分类toCategoryId，那么fromCategoryId分类下的所有子分类和实体全部归到toCategoryId分类，同时删除fromCategoryId分类
            </remarks>
            <param name="fromCategoryId">合并分类源类别</param>
            <param name="toCategoryId">合并分类目标类别</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.ICategoryRepository`1.Move(System.Int64,System.Int64)">
            <summary>
            把fromCategoryId移动到toCategoryId
            </summary>
            <remarks>
            将一个分类移动到另一个分类，并作为另一个分类的子分类
            </remarks>
            <param name="fromCategoryId">被移动类别</param>
            <param name="toCategoryId">目标类别</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.ICategoryRepository`1.GetOwnerRootCategories(System.Int64,System.String)">
            <summary>
            获取拥有者的类别列表
            </summary>
            <param name="ownerId">类别拥有者Id</param>
            <param name="tenantTypeId">租户类型Id</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.ICategoryRepository`1.GetOwnerCategories(System.Int64,System.String)">
            <summary>
            获取拥有者的类别列表
            </summary>
            <param name="ownerId">类别拥有者Id</param>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="isAdmin">是否后台使用</param>
            <returns>按树状排序的</returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.ICategoryRepository`1.GetChildren(System.Int64)">
            <summary>
            获取子类别
            </summary>
            <param name="parentCategoryId">父类别Id</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.ICategoryRepository`1.CleanByUser(System.Int64)">
            <summary>
            根据用户id删除用户类别
            </summary>
            <param name="userId">用户的id</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.ICategoryRepository`1.GetCategories(System.Nullable{Tunynet.Common.PubliclyAuditStatus},System.String,System.String,System.Int32)">
            <summary>
            分页检索类别
            </summary>
            <returns>
            按创建时间倒序排列的分页类别列表
            </returns>
        </member>
        <!-- 对于成员“M:Tunynet.Common.Repositories.ICategoryRepository`1.GetOwnerCategories(System.Nullable{Tunynet.Common.PubliclyAuditStatus},System.String,System.String,System.Int64,System.Int32,System.Int32)”忽略有格式错误的 XML 注释 -->
        <member name="M:Tunynet.Common.Repositories.ICategoryRepository`1.RecurseGetChildren(`0,System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`0})">
            <summary>
            获取所有子分类的递归方法
            </summary>
            <param name="category">当前分类</param>
            <param name="treeCategories">最终要组装的Tree分类</param>
            <param name="orgCategoriesList">原始分类列表</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.ICategoryRepository`1.UpdateItemCount(`0)">
            <summary>
            仅更新实体属性
            </summary>
            <param name="category">要更新的分类</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.CategoryRepository`1.Insert(`0)">
            <summary>
            创建分类
            </summary>
            <param name="category">待创建分类</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.CategoryRepository`1.UpdateAuditStatus(System.Collections.Generic.IEnumerable{System.Int64},Tunynet.Common.AuditStatus)">
            <summary>
            批量更新审核状态
            </summary>
            <param name="ids">分类Id列表</param>
            <param name="auditStatus">审核状态</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.CategoryRepository`1.CleanByUser(System.Int64)">
            <summary>
            根据userid删除访用户类别
            </summary>
            <param name="userId">用户的id</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.CategoryRepository`1.Merge(System.Int64,System.Int64)">
            <summary>
            从fromCategoryId并入到toCategoryId
            </summary>
            <remarks>
            例如：将分类fromCategoryId合并到分类toCategoryId，那么fromCategoryId分类下的所有子分类和实体全部归到toCategoryId分类，同时删除fromCategoryId分类
            </remarks>
            <param name="fromCategoryId">源类别</param>
            <param name="toCategoryId">目标类别</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.CategoryRepository`1.Move(System.Int64,System.Int64)">
            <summary>
            把fromCategoryId移动到toCategoryId
            </summary>
            <remarks>
            将一个分类移动到另一个分类，并作为另一个分类的子分类
            </remarks>
            <param name="fromCategoryId">被移动类别</param>
            <param name="toCategoryId">目标类别</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.CategoryRepository`1.GetOwnerRootCategories(System.Int64,System.String)">
            <summary>
            获取拥有者的类别列表
            </summary>
            <param name="ownerId">类别拥有者Id</param>
            <param name="tenantTypeId">租户类型Id</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.CategoryRepository`1.GetOwnerCategories(System.Int64,System.String)">
            <summary>
            获取拥有者的类别列表
            </summary>
            <param name="ownerId">类别拥有者Id</param>
            <param name="tenantTypeId">租户类型Id</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.CategoryRepository`1.GetChildren(System.Int64)">
            <summary>
            获取子类别
            </summary>
            <param name="parentCategoryId">父类别Id</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.CategoryRepository`1.GetCategories(System.Nullable{Tunynet.Common.PubliclyAuditStatus},System.String,System.String,System.Int32)">
            <summary>
            分页检索类别
            </summary>
            <returns>
            按创建时间倒序排列的分页类别列表
            </returns>
        </member>
        <!-- 对于成员“M:Tunynet.Common.Repositories.CategoryRepository`1.GetOwnerCategories(System.Nullable{Tunynet.Common.PubliclyAuditStatus},System.String,System.String,System.Int64,System.Int32,System.Int32)”忽略有格式错误的 XML 注释 -->
        <member name="M:Tunynet.Common.Repositories.CategoryRepository`1.UpdateItemCount(`0)">
            <summary>
            仅更新实体属性
            </summary>
            <param name="category">要更新的分类</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.CategoryRepository`1.RecurseGetChildren(`0,System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`0})">
            <summary>
            获取所有子分类的递归方法
            </summary>
            <param name="category">当前分类</param>
            <param name="treeCategories">最终要组装的Tree分类</param>
            <param name="orgCategoriesList">原始分类列表</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.CategoryRepository`1.RecurseGetParents(System.Int64,System.Collections.Generic.List{System.Int64})">
            <summary>
            递归获取所有父级分类
            </summary>
            <param name="categoryId">当前分类Id</param>
            <param name="parentCategoryIdList">父级分类Id列表</param>
        </member>
        <member name="T:Tunynet.Common.Repositories.IItemInCategoryRepository">
            <summary>
            分类和内容关联项，需要的数据服务接口
            </summary>
        </member>
        <member name="M:Tunynet.Common.Repositories.IItemInCategoryRepository.AddItemsToCategory(System.Collections.Generic.IEnumerable{System.Int64},System.Int64)">
            <summary>
            批量为内容项设置类别
            </summary>
            <param name="itemIds">内容项Id集合</param>
            <param name="categoryId">类别Id</param>
            <param name="ownerId">类别拥有者Id</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.IItemInCategoryRepository.AddCategoriesToItem(System.Collections.Generic.IEnumerable{System.Int64},System.Int64)">
            <summary>
            为内容项批量设置类别
            </summary>
            <param name="categoryIds">类别Id集合</param>
            <param name="itemId">内容项Id</param>
            <param name="ownerId">类别拥有者Id</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.IItemInCategoryRepository.ClearCategoriesFromItem(System.Int64,System.Nullable{System.Int64},System.String)">
            <summary>
            清除内容项的所有类别
            </summary>
            <param name="itemId">内容项Id</param>
            <param name="ownerId">分类所有者</param>
            <param name="tenantTypeId">租户Id</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.IItemInCategoryRepository.ClearItemsFromCategory(System.Int64)">
            <summary>
            删除分类下的所有的关联项
            </summary>
            <param name="categoryId">分类Id</param>
            <param name="ownerId">拥有者Id</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.IItemInCategoryRepository.GetItemIds(System.Int64,System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            获取类别的内容项集合
            </summary>
            <param name="categoryId">分类的Id集合</param>
            <returns>内容项的ID集合</returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.IItemInCategoryRepository.GetItemIds(System.Int64,System.Collections.Generic.IEnumerable{System.Int64},System.Int32,System.Int32,System.Int64@)">
            <summary>
            获取类别的内容项集合
            </summary>
            <param name="categoryId">当前分类的Id</param>
            <param name="ids">分类的Id集合</param>
            <param name="pageSize">页面大小</param>
            <param name="pageIndex">当前页码</param>
            <param name="totalRecords">输出参数：总记录数</param>
            <returns>当页内容项的ID集合</returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.IItemInCategoryRepository.GetCategoriesOfItem(System.Int64,System.Nullable{System.Int64},System.String)">
            <summary>
            获取内容项的所有类别Id集合
            </summary>
            <param name="itemId">内容项Id</param>
            <param name="ownerId">分类所有者</param>
            <param name="tenantTypeId">租户Id</param>
            <returns>返回内容项的类别Id集合</returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.IItemInCategoryRepository.DeleteItemInCategory(System.Int64,System.Int64)">
            <summary>
            删除分类同内容的关联项
            </summary>
            <param name="categoryId">分类Id</param>
            <param name="itemId">内容项Id</param>
            <param name="ownerId">拥有者Id</param>
        </member>
        <member name="T:Tunynet.Common.Repositories.ItemInCategoryRepository">
            <summary>
            分类同内容项关联的仓储实现
            </summary>
        </member>
        <member name="M:Tunynet.Common.Repositories.ItemInCategoryRepository.AddItemsToCategory(System.Collections.Generic.IEnumerable{System.Int64},System.Int64)">
            <summary>
            批量为内容项设置类别
            </summary>
            <param name="itemIds">内容项Id集合</param>
            <param name="categoryId">类别Id</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.ItemInCategoryRepository.AddCategoriesToItem(System.Collections.Generic.IEnumerable{System.Int64},System.Int64)">
            <summary>
            为内容项批量设置类别
            </summary>
            <param name="categoryIds">类别Id集合</param>
            <param name="itemId">内容项Id</param>
            <param name="ownerId">类别拥有者Id</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.ItemInCategoryRepository.ClearCategoriesFromItem(System.Int64,System.Nullable{System.Int64},System.String)">
            <summary>
            清除内容项设置的所有分类
            </summary>
            <param name="itemId">内容项Id</param>
            <param name="ownerId">拥有者Id</param>
            <param name="tenantTypeId">租户Id</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.ItemInCategoryRepository.ClearItemsFromCategory(System.Int64)">
            <summary>
            删除分类下的所有的关联项
            </summary>
            <param name="categoryId">分类Id</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.ItemInCategoryRepository.GetItemIds(System.Int64,System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            获取类别的内容项集合
            </summary>
            <param name="categoryId">分类的Id集合</param>
            <returns>内容项的ID集合</returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.ItemInCategoryRepository.GetItemIds(System.Int64,System.Collections.Generic.IEnumerable{System.Int64},System.Int32,System.Int32,System.Int64@)">
            <summary>
            获取类别的内容项集合
            </summary>
            <param name="categoryId">分类的Id集合</param>
            <param name="pageSize">页面大小</param>
            <param name="pageIndex">当前页码</param>
            <param name="totalRecords">输出参数：总记录数</param>
            <returns>当页内容项的ID集合</returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.ItemInCategoryRepository.GetCategoriesOfItem(System.Int64,System.Nullable{System.Int64},System.String)">
            <summary>
            获取内容项的所有分类Id集合
            </summary>
            <param name="itemId">内容项Id</param>
            <param name="ownerId">分类所有者</param>
            <param name="tenantTypeId">租户Id</param>
            <returns>返回内容项的类别Id集合</returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.ItemInCategoryRepository.DeleteItemInCategory(System.Int64,System.Int64)">
            <summary>
            删除分类同内容的关联项
            </summary>
            <param name="categoryId">分类Id</param>
            <param name="itemId">内容项Id</param>
            <param name="ownerId">拥有者Id</param>
        </member>
        <member name="T:Tunynet.Common.IRecommendUrlGetter">
            <summary>
            推荐中获取连接的接口
            </summary>
        </member>
        <member name="M:Tunynet.Common.IRecommendUrlGetter.RecommendItemDetail(System.Int64)">
            <summary>
            详细页面地址
            </summary>
            <param name="itemId"></param>
            <returns></returns>
        </member>
        <member name="P:Tunynet.Common.IRecommendUrlGetter.TenantTypeId">
            <summary>
            租户类型id
            </summary>
        </member>
        <member name="T:Tunynet.Common.RecommendUrlGetterFactory">
            <summary>
            推荐获取连接的工厂
            </summary>
        </member>
        <member name="M:Tunynet.Common.RecommendUrlGetterFactory.Get(System.String)">
            <summary>
            获取连接的方法
            </summary>
            <param name="tenantTypeId">租户类型id</param>
            <returns>获取连接的实例</returns>
        </member>
        <member name="T:Tunynet.Common.RecommendItem">
            <summary>
            推荐内容
            </summary>
        </member>
        <member name="M:Tunynet.Common.RecommendItem.New">
            <summary>
             推荐内容
            </summary>
        </member>
        <member name="P:Tunynet.Common.RecommendItem.IsLink">
            <summary>
            IsLink
            </summary>
        </member>
        <member name="P:Tunynet.Common.RecommendItem.Id">
             <summary>
            Id
             </summary>
        </member>
        <member name="P:Tunynet.Common.RecommendItem.TenantTypeId">
             <summary>
            租户类型Id
             </summary>
        </member>
        <member name="P:Tunynet.Common.RecommendItem.TypeId">
             <summary>
            推荐类型Id
             </summary>
        </member>
        <member name="P:Tunynet.Common.RecommendItem.ItemId">
             <summary>
            内容实体Id
             </summary>
        </member>
        <member name="P:Tunynet.Common.RecommendItem.ItemName">
             <summary>
            推荐标题（默认为内容名称或标题，允许推荐人修改）
             </summary>
        </member>
        <member name="P:Tunynet.Common.RecommendItem.FeaturedImage">
             <summary>
            推荐标题图(存储图片文件名或完整图片链接地址)
             </summary>
        </member>
        <member name="P:Tunynet.Common.RecommendItem.ReferrerName">
             <summary>
            推荐人DisplayName
             </summary>
        </member>
        <member name="P:Tunynet.Common.RecommendItem.ReferrerId">
             <summary>
            推荐人用户Id
             </summary>
        </member>
        <member name="P:Tunynet.Common.RecommendItem.DateCreated">
             <summary>
            推荐日期
             </summary>
        </member>
        <member name="P:Tunynet.Common.RecommendItem.ExpiredDate">
             <summary>
            推荐期限
             </summary>
        </member>
        <member name="P:Tunynet.Common.RecommendItem.DisplayOrder">
             <summary>
            排序顺序（默认和Id一致）
             </summary>
        </member>
        <member name="P:Tunynet.Common.RecommendItem.RecommendItemType">
            <summary>
            推荐类别
            </summary>
        </member>
        <member name="P:Tunynet.Common.RecommendItem.DetailUrl">
            <summary>
            详细页面地址
            </summary>
        </member>
        <member name="P:Tunynet.Common.RecommendItem.LinkAddress">
            <summary>
            外链地址
            </summary>
        </member>
        <member name="P:Tunynet.Common.RecommendItem.UserId">
            <summary>
            作者Id
            </summary>
        </member>
        <member name="T:Tunynet.Common.RecommendItemType">
            <summary>
            推荐类别
            </summary>
        </member>
        <member name="M:Tunynet.Common.RecommendItemType.New">
            <summary>
            推荐类别
            </summary>
        </member>
        <member name="P:Tunynet.Common.RecommendItemType.TypeId">
             <summary>
            创建后不允许修改，建议格式为：6位TenantTypeId +2位顺序号
             </summary>
        </member>
        <member name="P:Tunynet.Common.RecommendItemType.TenantTypeId">
             <summary>
            租户类型Id
             </summary>
        </member>
        <member name="P:Tunynet.Common.RecommendItemType.Name">
             <summary>
            推荐类型名称
             </summary>
        </member>
        <member name="P:Tunynet.Common.RecommendItemType.Description">
             <summary>
            推荐类型描述
             </summary>
        </member>
        <member name="P:Tunynet.Common.RecommendItemType.HasFeaturedImage">
             <summary>
            是否包含标题图
             </summary>
        </member>
        <member name="P:Tunynet.Common.RecommendItemType.DateCreated">
             <summary>
            创建日期
             </summary>
        </member>
        <member name="T:Tunynet.Common.RecommendService">
            <summary>
            推荐业务逻辑类
            </summary>
        </member>
        <member name="M:Tunynet.Common.RecommendService.#ctor">
            <summary>
            构造器
            </summary>
        </member>
        <member name="M:Tunynet.Common.RecommendService.#ctor(Tunynet.Common.Repositories.IRecommendItemRepository,Tunynet.Common.Repositories.IRecommendItemTypeRepository)">
            <summary>
            构造器
            </summary>
            <param name="recommendItemRepository">推荐内容仓储接口</param>
            <param name="recommendItemTypeRepository">推荐类别仓储接口</param>
        </member>
        <member name="M:Tunynet.Common.RecommendService.CreateRecommendType(Tunynet.Common.RecommendItemType)">
            <summary>
            创建推荐类别
            </summary>
            <param name="recommendType">推荐类别实体</param>
            <returns>创建成功返回true，失败返回false</returns>
        </member>
        <member name="M:Tunynet.Common.RecommendService.UpdateRecommendType(Tunynet.Common.RecommendItemType)">
            <summary>
            更新推荐类别
            </summary>
            <param name="recommendType">推荐类别实体</param>
            <returns>更新成功返回true，失败返回false</returns>
        </member>
        <member name="M:Tunynet.Common.RecommendService.DeleteRecommendType(System.String)">
            <summary>
            删除推荐类别
            </summary>
            <param name="recommendTypeId">推荐类别Id</param>
            <returns>删除成功返回true，失败返回false</returns>
        </member>
        <member name="M:Tunynet.Common.RecommendService.GetRecommendType(System.String)">
            <summary>
            获取推荐类别
            </summary>
            <param name="recommendTypeId">推荐类别Id</param>
        </member>
        <member name="M:Tunynet.Common.RecommendService.GetRecommendTypes(System.String)">
            <summary>
            获取推荐类别列表
            </summary>
            <param name="tenantTypeId">租户类型Id</param>
        </member>
        <member name="M:Tunynet.Common.RecommendService.Create(Tunynet.Common.RecommendItem)">
            <summary>
            创建推荐内容
            </summary>
            <param name="item">推荐内容实体</param>
            <returns>创建成功返回true，失败返回false</returns>
        </member>
        <member name="M:Tunynet.Common.RecommendService.Update(Tunynet.Common.RecommendItem)">
            <summary>
            更新推荐内容
            </summary>
            <param name="item">推荐内容实体</param>
            <returns>更新成功返回true，失败返回false</returns>
        </member>
        <member name="M:Tunynet.Common.RecommendService.ChangeDisplayOrder(System.Int64,System.Int64)">
            <summary>
            变更推荐内容的排列顺序
            </summary>
            <param name="id">待调整的推荐Id</param>
            <param name="referenceId">参照推荐Id</param>
        </member>
        <member name="M:Tunynet.Common.RecommendService.UploadLogo(System.Int64,System.IO.Stream)">
            <summary>
            上传Logo
            </summary>
            <param name="recommendId">推荐Id</param>
            <param name="stream">Logo文件流</param>
        </member>
        <member name="M:Tunynet.Common.RecommendService.DeleteLogo(System.Int64)">
            <summary>
            删除Logo
            </summary>
            <param name="recommendId">推荐Id</param>
        </member>
        <member name="M:Tunynet.Common.RecommendService.Delete(System.Int64)">
            <summary>
            删除推荐内容
            </summary>
            <param name="recommendId">推荐Id</param>
            <returns>删除成功返回true，失败返回false</returns>
        </member>
        <member name="M:Tunynet.Common.RecommendService.Delete(System.Int64,System.String)">
            <summary>
            删除推荐内容
            </summary>
            <param name="itemId">内容Id</param>
            <param name="tenantTypeId">租户类型Id</param>
            <returns>删除成功返回true，失败返回false</returns>
        </member>
        <member name="M:Tunynet.Common.RecommendService.DeleteExpiredRecommendItems">
            <summary>
            定期移除过期的推荐内容
            </summary>
        </member>
        <member name="M:Tunynet.Common.RecommendService.Get(System.Int64)">
            <summary>
            获取推荐内容
            </summary>
            <param name="recommendId">推荐内容Id</param>
        </member>
        <member name="M:Tunynet.Common.RecommendService.Get(System.Int64,System.String)">
            <summary>
            获取推荐内容
            </summary>
            <param name="itemId">推荐内容Id</param>
            <param name="recommendTypeId">推荐类型Id</param>
        </member>
        <member name="M:Tunynet.Common.RecommendService.GetTops(System.Int32,System.String)">
            <summary>
            获取某种推荐类别下的前N条推荐内容
            </summary>
            <param name="topNumber">前N条</param>
            <param name="recommendTypeId">推荐类别Id</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.RecommendService.Gets(System.String,System.Int32)">
            <summary>
            获取某种推荐类别下的推荐内容分页集合
            </summary>
            <param name="topNumber">前N条</param>
            <param name="recommendTypeId">推荐类别Id</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.RecommendService.Gets(System.Int64,System.String)">
            <summary>
            获取某条内容的所有推荐
            </summary>
            <param name="itemId">内容Id</param>
            <param name="tenantTypeId">租户类型Id</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.RecommendService.GetsForAdmin(System.String,System.String,System.Nullable{System.Boolean},System.Int32,System.Int32)">
            <summary>
            分页获取推荐内容后台管理列表
            </summary>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="recommendTypeId">推荐类型Id</param>
            <param name="isLink">是否是外链</param>
            <param name="pageSize">页容量</param>
            <param name="pageIndex">页码</param>
            <returns></returns>
        </member>
        <member name="T:Tunynet.Common.Repositories.IRecommendItemRepository">
             <summary>
            推荐内容数据访问接口
             </summary>
        </member>
        <member name="M:Tunynet.Common.Repositories.IRecommendItemRepository.Delete(System.Int64,System.String)">
            <summary>
            删除推荐内容
            </summary>
            <param name="itemId">内容Id</param>
            <param name="tenantTypeId">租户类型Id</param>
            <returns>删除成功返回true，失败返回false</returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.IRecommendItemRepository.DeleteExpiredRecommendItems">
            <summary>
            定期移除过期的推荐内容
            </summary>
        </member>
        <member name="M:Tunynet.Common.Repositories.IRecommendItemRepository.GetTops(System.Int32,System.String)">
            <summary>
            获取某种推荐类别下的前N条推荐内容
            </summary>
            <param name="topNumber">前N条</param>
            <param name="recommendTypeId">推荐类别Id</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.IRecommendItemRepository.Get(System.Int64,System.String)">
            <summary>
            获取推荐内容
            </summary>
            <param name="itemId">推荐内容Id</param>
            <param name="recommendTypeId">推荐类型Id</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.IRecommendItemRepository.Gets(System.String,System.Int32)">
            <summary>
            获取某种推荐类别下的推荐内容分页集合
            </summary>
            <param name="topNumber">前N条</param>
            <param name="recommendTypeId">推荐类别Id</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.IRecommendItemRepository.Gets(System.Int64,System.String)">
            <summary>
            获取某条内容的所有推荐
            </summary>
            <param name="itemId">内容Id</param>
            <param name="tenantTypeId">租户类型Id</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.IRecommendItemRepository.GetsForAdmin(System.String,System.String,System.Nullable{System.Boolean},System.Int32,System.Int32)">
            <summary>
            分页获取推荐内容后台管理列表
            </summary>
            <param name="tenantTypeId"></param>
            <param name="recommendTypeId"></param>
            <param name="pageSize"></param>
            <param name="pageIndex"></param>
            <returns></returns>
        </member>
        <member name="T:Tunynet.Common.Repositories.IRecommendItemTypeRepository">
             <summary>
            推荐类别数据访问接口
             </summary>
        </member>
        <member name="M:Tunynet.Common.Repositories.IRecommendItemTypeRepository.GetRecommendTypes(System.String)">
            <summary>
            获取推荐类别列表
            </summary>
            <param name="tenantTypeId">租户类型Id</param>
        </member>
        <member name="T:Tunynet.Common.Repositories.RecommendItemRepository">
             <summary>
            推荐内容数据访问仓储
             </summary>
        </member>
        <member name="M:Tunynet.Common.Repositories.RecommendItemRepository.Insert(Tunynet.Common.RecommendItem)">
            <summary>
            创建推荐内容实体
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.RecommendItemRepository.Delete(System.Int64,System.String)">
            <summary>
            删除推荐内容
            </summary>
            <param name="itemId">内容Id</param>
            <param name="tenantTypeId">租户类型Id</param>
            <returns>删除成功返回true，失败返回false</returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.RecommendItemRepository.DeleteExpiredRecommendItems">
            <summary>
            定期移除过期的推荐内容
            </summary>
        </member>
        <member name="M:Tunynet.Common.Repositories.RecommendItemRepository.DeleteTrashDatas">
            <summary>
            删除垃圾数据
            </summary>
        </member>
        <member name="M:Tunynet.Common.Repositories.RecommendItemRepository.Get(System.Int64,System.String)">
            <summary>
            获取推荐内容
            </summary>
            <param name="itemId">推荐内容Id</param>
            <param name="recommendTypeId">推荐类型Id</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.RecommendItemRepository.GetTops(System.Int32,System.String)">
            <summary>
            获取某种推荐类别下的前N条推荐内容
            </summary>
            <param name="topNumber">前N条</param>
            <param name="recommendTypeId">推荐类别Id</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.RecommendItemRepository.Gets(System.String,System.Int32)">
            <summary>
            获取某种推荐类别下的推荐内容分页集合
            </summary>
            <param name="pageIndex">页码</param>
            <param name="recommendTypeId">推荐类别Id</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.RecommendItemRepository.Gets(System.Int64,System.String)">
            <summary>
            获取某条内容的所有推荐
            </summary>
            <param name="itemId">内容Id</param>
            <param name="tenantTypeId">租户类型Id</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.RecommendItemRepository.GetsForAdmin(System.String,System.String,System.Nullable{System.Boolean},System.Int32,System.Int32)">
            <summary>
            分页获取推荐内容后台管理列表
            </summary>
            <param name="tenantTypeId"></param>
            <param name="recommendTypeId"></param>
            <param name="pageSize"></param>
            <param name="pageIndex"></param>
            <returns></returns>
        </member>
        <member name="T:Tunynet.Common.Repositories.RecommendItemTypeRepository">
             <summary>
            推荐内容数据访问仓储
             </summary>
        </member>
        <member name="M:Tunynet.Common.Repositories.RecommendItemTypeRepository.Insert(Tunynet.Common.RecommendItemType)">
            <summary>
            
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.RecommendItemTypeRepository.Delete(Tunynet.Common.RecommendItemType)">
            <summary>
            删除推荐类别
            </summary>
            <param name="entity">推荐类别实体</param>
            <returns>删除成功返回true，失败返回false</returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.RecommendItemTypeRepository.GetRecommendTypes(System.String)">
            <summary>
            获取推荐类别列表
            </summary>
            <param name="tenantTypeId">租户类型Id</param>
        </member>
        <member name="T:Tunynet.Common.DeleteExpiredRecommendItemsTask">
            <summary>
            定期移除过期的推荐内容的任务
            </summary>
        </member>
        <member name="M:Tunynet.Common.DeleteExpiredRecommendItemsTask.Execute(Tunynet.Tasks.TaskDetail)">
            <summary>
            任务执行的内容
            </summary>
            <param name="taskDetail">任务配置状态信息</param>
        </member>
        <member name="M:Tunynet.Common.CountTypesExtension.ItemCounts(Tunynet.Common.CountTypes)">
            <summary>
            讨论次数
            </summary>
        </member>
        <member name="T:Tunynet.Common.ItemInTag">
            <summary>
            标签与内容的关联项实体
            </summary>
        </member>
        <member name="M:Tunynet.Common.ItemInTag.New">
            <summary>
            新建实体时使用
            </summary>
        </member>
        <member name="P:Tunynet.Common.ItemInTag.Id">
             <summary>
            Id
             </summary>
        </member>
        <member name="P:Tunynet.Common.ItemInTag.TagName">
            <summary>
            标签名称
            </summary>
        </member>
        <member name="P:Tunynet.Common.ItemInTag.TagInOwnerId">
            <summary>
            标签与拥有者关联Id
            </summary>
        </member>
        <member name="P:Tunynet.Common.ItemInTag.ItemId">
             <summary>
            内容项Id
             </summary>
        </member>
        <member name="P:Tunynet.Common.ItemInTag.TenantTypeId">
            <summary>
            租户类型Id
            </summary>
        </member>
        <member name="T:Tunynet.Common.RelatedTag">
            <summary>
            相关标签实体
            </summary>
        </member>
        <member name="M:Tunynet.Common.RelatedTag.New">
            <summary>
            新建实体时使用
            </summary>
        </member>
        <member name="P:Tunynet.Common.RelatedTag.Id">
             <summary>
            Id
             </summary>
        </member>
        <member name="P:Tunynet.Common.RelatedTag.TagId">
             <summary>
            标签Id
             </summary>
        </member>
        <member name="P:Tunynet.Common.RelatedTag.RelatedTagId">
             <summary>
            相关标签Id
             </summary>
        </member>
        <member name="T:Tunynet.Common.Repositories.IItemInTagRepository">
            <summary>
            标签和内容关联项，需要的数据服务接口
            </summary>
        </member>
        <member name="M:Tunynet.Common.Repositories.IItemInTagRepository.AddItemsToTag(System.Collections.Generic.IEnumerable{System.Int64},System.String,System.Int64,System.String)">
            <summary>
            为多个内容项添加相同标签
            </summary>
            <param name="itemIds">内容项Id</param>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="ownerId">拥有者Id</param>
            <param name="tagName">标签名</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.IItemInTagRepository.AddTagsToItem(System.String[],System.String,System.Int64,System.Int64)">
            <summary>
            为内容项批量设置标签
            </summary>
            <param name="tagNames">标签名称集合</param>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="ownerId">拥有者Id</param>
            <param name="itemId">内容项Id</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.IItemInTagRepository.DeleteTagFromItem(System.Int64,System.Int64)">
            <summary>
            删除内容项的标签
            </summary>
            <param name="itemId">内容项Id</param>
            <param name="tagInOwnerId">标签与拥有者关联</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.IItemInTagRepository.ClearTagsFromItem(System.Int64,System.String,System.Int64)">
            <summary>
            清除内容项的所有标签
            </summary>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="ownerId">拥有者Id</param>
            <param name="itemId">内容项Id</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.IItemInTagRepository.GetItemIds(System.String,System.String,System.Nullable{System.Int64})">
            <summary>
            获取标签的内容项集合
            </summary>
            <param name="tagName">标签名称</param>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="ownerId">拥有者Id</param>
            <returns>返回指定的内容项Id集合</returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.IItemInTagRepository.GetItemIds(System.String,System.String,System.Nullable{System.Int64},System.Int32,System.Int32)">
            <summary>
            获取标签的内容项集合
            </summary>
            <param name="tagName">标签名称</param>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="ownerId">拥有者Id</param>
            <param name="pageSize">每页记录数</param>
            <param name="pageIndex">当前页码(从1开始)</param>
            <returns>返回指定页码的内容项Id集合</returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.IItemInTagRepository.GetItemIds(System.Collections.Generic.IEnumerable{System.String},System.String,System.Nullable{System.Int64},System.Int32,System.Int32)">
            <summary>
            获取多个标签的内容项集合
            </summary>
            <param name="tagNames">标签名称列表</param>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="ownerId">拥有者Id</param>
            <param name="pageSize">每页记录数</param>
            <param name="pageIndex">当前页码(从1开始)</param>
            <returns>返回指定页码的内容项Id集合</returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.IItemInTagRepository.GetTagIdsOfItem(System.Int64,System.String)">
            <summary>
            获取内容项的所有标签
            </summary>
            <param name="itemId">内容项Id</param>
            <returns>返回内容项的标签Id集合,无返回时返回空集合</returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.IItemInTagRepository.GetTagInOwnerIdsOfItem(System.Int64,System.Int64,System.String)">
            <summary>
            获取标签标签与拥有者关系Id集合
            </summary>
            <param name="itemId">内容项Id</param>
            <param name="ownerId">拥有者Id</param>
            <param name="tenantTypeId">租户类型Id</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.IItemInTagRepository.GetItemInTagIdsOfItem(System.Int64,System.String)">
            <summary>
            获取内容项与标签关联Id集合
            </summary>
            <param name="itemId">内容项Id</param>
            <param name="tenantTypeId">租户类型</param>
            <returns>返回内容项的标签Id集合,无返回时返回空集合</returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.IItemInTagRepository.GetTagNamesOfUsers(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            根据用户ID列表获取用户tag，本方法现用于用户搜索功能的索引生成
            </summary>
            <param name="userIds">用户ID列表</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.IItemInTagRepository.GetEntityIdsByUserIds(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary> 
            根据用户ID列表获取ItemInTag的ID列表，本方法现用于用户搜索功能的索引生成
            </summary>
            <param name="userIds">用户ID列表</param>
            <returns>ItemInTag的ID列表</returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.IItemInTagRepository.GetTagNamesWithIdsOfItem(System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            根据成员获取标签名及标签Id
            </summary>
            <param name="itemId">成员Id</param>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="tagInOwnerId">标签与拥有者关联Id</param>
            <returns></returns>
        </member>
        <member name="T:Tunynet.Common.Repositories.IRelatedTagRepository">
            <summary>
            相关标签仓储接口，实现特殊方法
            </summary>
        </member>
        <member name="M:Tunynet.Common.Repositories.IRelatedTagRepository.AddRelatedTagsToTag(System.String[],System.String,System.Int64,System.Int64)">
            <summary>
            添加相关标签
            </summary>
            <remarks>
            会为标签添加双向的关联关系,例如:
            TagA关联到TagB
            TagB关联到TagA
            </remarks>
            <param name="tagNames">相关标签名称集合</param>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="ownerId">拥有者Id</param>
            <param name="tagId">标签Id</param>
            <returns> 影响行数</returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.IRelatedTagRepository.DeleteRelatedTagFromTag(System.Int64,System.Int64)">
            <summary>
            清除关联的标签
            </summary>
            <remarks>会删除双向的关联关系</remarks>
            <param name="relatedTagId">关联的标签Id</param>
            <param name="tagId">被关联的标签Id</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.IRelatedTagRepository.ClearRelatedTagsFromTag(System.Int64)">
            <summary>
            清除拥有者的所有标签
            </summary>
            <param name="tagId">被关联的标签Id</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.IRelatedTagRepository.GetRelatedTagIds(System.Int64)">
            <summary>
            获取相关标签
            </summary>
            <param name="tagId">被关联的标签Id</param>
            <returns>获取相关联的Id集合</returns>
        </member>
        <member name="T:Tunynet.Common.Repositories.ITagGroupRepository">
            <summary>
            标签分组仓储接口，实现特殊方法
            </summary>
        </member>
        <member name="M:Tunynet.Common.Repositories.ITagGroupRepository.GetGroups(System.String)">
            <summary>
            获取全部标签分组
            </summary>
            <param name="tenantTypeId">租户类型Id</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.ITagGroupRepository.GetGroupsOfTag(System.String,System.String)">
            <summary>
            根据标签获取标签分组
            </summary>
            <param name="tagName">标签名</param>
            <param name="tenantTypeId">租户类型Id</param>
            <returns></returns>
        </member>
        <member name="T:Tunynet.Common.Repositories.ITagInGroupRepository">
            <summary>
            标签与分组关联仓储接口，实现特殊方法
            </summary>
        </member>
        <member name="M:Tunynet.Common.Repositories.ITagInGroupRepository.AddTagInGroup(System.String,System.Int64,System.String)">
            <summary>
            添加标签与分组关联
            </summary>
            <param name="tagName">标签名</param>
            <param name="groupId">拥有者Id</param>
            <param name="TenantTypeId">租户类型Id</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.ITagInGroupRepository.BatchAddTagsInGroup(System.Collections.Generic.IEnumerable{System.String},System.Int64,System.String)">
            <summary>
            批量添加标签与分组关联
            </summary>
            <param name="tagName">标签名</param>
            <param name="groupId">拥有者Id</param>
            <param name="TenantTypeId">租户类型Id</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.ITagInGroupRepository.ClearTagsFromGroup(System.Int64)">
            <summary>
            清除分组的所有标签
            </summary>
            <param name="groupId">分组Id</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.ITagInGroupRepository.GetTagsOfGroup(System.Int64)">
            <summary>
            获取分组下的标签
            </summary>
            <param name="groupId">分组Id</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.ITagInGroupRepository.BatchAddGroupsToTag(System.Collections.Generic.IEnumerable{System.Int64},System.String,System.String)">
            <summary>
            批量添加分组给标签
            </summary>
            <param name="groupIds">分组Id集合</param>
            <param name="tagName">标签名</param>
            <param name="tenantTypeId">租户类型Id</param>
        </member>
        <member name="T:Tunynet.Common.Repositories.ITagInOwnerRepository">
            <summary>
            标签和拥有者关联项，需要的数据服务接口
            </summary>
        </member>
        <member name="M:Tunynet.Common.Repositories.ITagInOwnerRepository.AddTagInOwner(System.String,System.String,System.Int64)">
            <summary>
            添加标签与拥有者关联
            </summary>
            <param name="tagName">标签名</param>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="ownerId">拥有者Id</param>
            <returns>返回影响行数</returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.ITagInOwnerRepository.AddTagInOwner(Tunynet.Common.TagInOwner)">
             <summary>
             添加标签与拥有者关联
             </summary>
            <param name="tagInOwner">待创建实体</param>
             <returns>返回实体主键</returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.ITagInOwnerRepository.ClearTagsFromOwner(System.Int64,System.String)">
            <summary>
            清除拥有者的所有标签
            </summary>
            <param name="ownerId">拥有者Id</param>
            <param name="tenantTypeId">租户类型Id</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.ITagInOwnerRepository.GetTagInOwners(System.Int64,System.String)">
            <summary>
            获取标签标签与拥有者关系
            </summary>
            <param name="ownerId">拥有者</param>
            <param name="tenantTypeId">租户类型Id</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.ITagInOwnerRepository.GetTagInOwners(System.Int32,System.Int32)">
            <summary>
            分页获取tn_TagsInOwners表的数据(用于建索引)
            </summary>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.ITagInOwnerRepository.GetTopTagInOwners(System.Int64,System.String,System.String,System.Int32)">
            <summary>
            获取拥有者的标签列表
            </summary>
            <param name="ownerId">拥有者Id</param>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="keyword">标签关键字</param>
            <param name="topNumber">前N个标签</param>
        </member>
        <member name="T:Tunynet.Common.Repositories.ITagRepository`1">
            <summary>
            标签仓储接口，实现特殊方法
            </summary>
        </member>
        <member name="M:Tunynet.Common.Repositories.ITagRepository`1.UpdateAuditStatus(System.Collections.Generic.IEnumerable{System.Int64},System.Boolean)">
            <summary>
            批量更新审核状态
            </summary>
            <param name="ids">标签Id列表</param>
            <param name="auditingStatus">审核状态</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.ITagRepository`1.Get(System.String,System.String)">
            <summary>
            获取标签实体
            </summary>
            <param name="tagName">标签名</param>
            <param name="tenantTypeId">租户类型Id</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.ITagRepository`1.GetTopTags(System.String,System.Int32,System.Nullable{System.Boolean},System.Nullable{Tunynet.Common.SortBy_Tag},System.Boolean)">
             <summary>
             获取前N个标签
             </summary>
             <remarks>智能提示时也使用该方法获取数据</remarks>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="topNumber">前N条数据</param>
            <param name="isFeatured">是否为特色标签</param>
            <param name="sortBy">标签排序字段</param>
            <param name="isTagCloud">为true时则不启用缓存</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.ITagRepository`1.GetTopTagNames(System.String,System.Int64,System.String,System.Int32)">
             <summary>
             获取前N个标签
             </summary>
             <remarks>用于智能提示</remarks>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="ownerId">拥有者Id</param>
            <param name="keyword">标签名称关键字</param>
            <param name="topNumber">前N条数据</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.ITagRepository`1.GetTags(Tunynet.Common.TagQuery,System.Int32,System.Int32)">
             <summary>
            分页检索标签
             </summary>
            <param name="query">查询条件</param>
             <param name="pageIndex">当前页码</param>
             <param name="pageSize">每页记录数</param>
             <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.ITagRepository`1.GetTagsOfGroup(System.Int64,System.String,System.Int32)">
             <summary>
            分页检索标签
             </summary>
            <param name="groupId">标签分组Id</param>
            <param name="tenantTypeId">租户类型Id</param>
             <param name="pageIndex">当前页码</param>
             <param name="pageSize">每页记录数</param>
             <returns></returns>
        </member>
        <member name="T:Tunynet.Common.Repositories.ItemInTagRepository">
             <summary>
            标签与内容项关联的仓储实现
             </summary>
        </member>
        <member name="M:Tunynet.Common.Repositories.ItemInTagRepository.AddItemsToTag(System.Collections.Generic.IEnumerable{System.Int64},System.String,System.Int64,System.String)">
            <summary>
            为多个内容项添加相同标签
            </summary>
            <param name="itemIds">内容项Id</param>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="ownerId">拥有者Id</param>
            <param name="tagName">标签名</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.ItemInTagRepository.AddTagsToItem(System.String[],System.String,System.Int64,System.Int64)">
            <summary>
            为内容项批量设置标签
            </summary>
            <param name="tagNames">标签名称集合</param>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="ownerId">拥有者Id</param>
            <param name="itemId">内容项Id</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.ItemInTagRepository.Delete(Tunynet.Common.ItemInTag)">
            <summary>
            删除标签与成员的关系实体
            </summary>
            <param name="entity">待处理的实体</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.ItemInTagRepository.DeleteTagFromItem(System.Int64,System.Int64)">
            <summary>
            删除内容项的标签
            </summary>
            <param name="itemId">内容项Id</param>
            <param name="tagInOwnerId">标签与拥有者关联</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.ItemInTagRepository.ClearTagsFromItem(System.Int64,System.String,System.Int64)">
            <summary>
            清除内容项的所有标签
            </summary>
            <param name="itemId">内容项Id</param>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="ownerId">拥有者Id</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.ItemInTagRepository.GetItemIds(System.String,System.String,System.Nullable{System.Int64})">
            <summary>
            获取标签的所有内容项集合
            </summary>
            <param name="tagName">标签名称</param>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="ownerId">拥有者Id</param>
            <returns>返回指定的内容项Id集合</returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.ItemInTagRepository.GetItemIds(System.String,System.String,System.Nullable{System.Int64},System.Int32,System.Int32)">
            <summary>
            获取标签的内容项集合
            </summary>
            <param name="tagName">标签名称</param>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="ownerId">拥有者Id</param>
            <param name="pageSize">每页记录数</param>
            <param name="pageIndex">当前页码(从1开始)</param>
            <returns>返回指定页码的内容项Id集合</returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.ItemInTagRepository.GetItemIds(System.Collections.Generic.IEnumerable{System.String},System.String,System.Nullable{System.Int64},System.Int32,System.Int32)">
            <summary>
            获取多个标签的内容项集合
            </summary>
            <param name="tagNames">标签名称列表</param>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="ownerId">拥有者Id</param>
            <param name="pageSize">每页记录数</param>
            <param name="pageIndex">当前页码(从1开始)</param>
            <returns>返回指定页码的内容项Id集合</returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.ItemInTagRepository.GetTagIdsOfItem(System.Int64,System.String)">
            <summary>
            获取内容项的所有标签
            </summary>
            <param name="itemId">内容项Id</param>
            <returns>返回内容项的标签Id集合,无返回时返回空集合</returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.ItemInTagRepository.GetItemInTagIdsOfItem(System.Int64,System.String)">
            <summary>
            获取内容项与标签关联Id集合
            </summary>
            <param name="itemId">内容项Id</param>
            <param name="tenantTypeId">租户类型</param>
            <returns>返回内容项的标签Id集合,无返回时返回空集合</returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.ItemInTagRepository.GetTagInOwnerIdsOfItem(System.Int64,System.Int64,System.String)">
            <summary>
            获取标签标签与拥有者关系Id集合
            </summary>
            <param name="itemId">内容项Id</param>
            <param name="ownerId">拥有者Id</param>
            <param name="tenantTypeId">租户类型Id</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.ItemInTagRepository.GetTagNamesOfUsers(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            根据用户ID列表获取用户tag，本方法现用于用户搜索功能的索引生成
            </summary>
            <param name="userIds">用户ID列表</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.ItemInTagRepository.GetEntityIdsByUserIds(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            根据用户ID列表获取ItemInTag的ID列表，本方法现用于用户搜索功能的索引生成
            </summary>
            <param name="userIds">用户ID列表</param>
            <returns>ItemInTag的ID列表</returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.ItemInTagRepository.GetTagNamesWithIdsOfItem(System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            根据Id获取
            </summary>
            <param name="itemId">成员Id</param>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="tagInOwnerId">标签与拥有者关联Id</param>
            <returns></returns>
        </member>
        <member name="T:Tunynet.Common.Repositories.RelatedTagRepository">
             <summary>
            相关标签的仓储实现
             </summary>
        </member>
        <member name="M:Tunynet.Common.Repositories.RelatedTagRepository.AddRelatedTagsToTag(System.String[],System.String,System.Int64,System.Int64)">
            <summary>
            添加相关标签
            </summary>
            <remarks>
            会为标签添加双向的关联关系,例如:
            TagA关联到TagB
            TagB关联到TagA
            </remarks>
            <param name="tagNames">相关标签名称集合</param>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="ownerId">拥有者Id</param>
            <param name="tagId">标签Id</param>
            <returns> 影响行数</returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.RelatedTagRepository.DeleteRelatedTagFromTag(System.Int64,System.Int64)">
            <summary>
            清除关联的标签
            </summary>
            <remarks>会删除双向的关联关系</remarks>
            <param name="relatedTagId">关联的标签Id</param>
            <param name="tagId">被关联的标签Id</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.RelatedTagRepository.ClearRelatedTagsFromTag(System.Int64)">
            <summary>
            清除所有相关标签
            </summary>
            <param name="tagId">被关联的标签Id</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.RelatedTagRepository.GetRelatedTagIds(System.Int64)">
            <summary>
            获取相关标签
            </summary>
            <param name="tagId">被关联的标签Id</param>
            <returns>获取相关联的Id集合</returns>
        </member>
        <member name="T:Tunynet.Common.Repositories.TagGroupRepository">
            <summary>
            标签分组仓储的具体实现类
            </summary>
        </member>
        <member name="M:Tunynet.Common.Repositories.TagGroupRepository.GetGroupsOfTag(System.String,System.String)">
            <summary>
            根据标签获取标签分组
            </summary>
            <param name="tagName">标签名</param>
            <param name="tenantTypeId">租户类型Id</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.TagGroupRepository.GetGroups(System.String)">
            <summary>
            获取全部标签分组
            </summary>
            <param name="tenantTypeId">租户类型Id</param>
        </member>
        <member name="T:Tunynet.Common.Repositories.TagInGroupRepository">
            <summary>
            标签与分组关系仓储的具体实现类
            </summary>
        </member>
        <member name="M:Tunynet.Common.Repositories.TagInGroupRepository.AddTagInGroup(System.String,System.Int64,System.String)">
            <summary>
            添加标签与分组关联
            </summary>
            <param name="tagName">标签名</param>
            <param name="groupId">拥有者Id</param>
            <param name="tenantTypeId">租户类型Id</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.TagInGroupRepository.BatchAddGroupsToTag(System.Collections.Generic.IEnumerable{System.Int64},System.String,System.String)">
            <summary>
            批量添加分组给标签
            </summary>
            <param name="groupIds">分组Id集合</param>
            <param name="tagName">标签名</param>
            <param name="tenantTypeId">租户类型Id</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.TagInGroupRepository.BatchAddTagsInGroup(System.Collections.Generic.IEnumerable{System.String},System.Int64,System.String)">
            <summary>
            批量添加标签与分组关联
            </summary>
            <param name="tagNames">标签名</param>
            <param name="groupId">分组Id</param>
            <param name="tenantTypeId">租户类型Id</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.TagInGroupRepository.ClearTagsFromGroup(System.Int64)">
            <summary>
            清除分组的所有标签
            </summary>
            <param name="groupId">分组Id</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.TagInGroupRepository.GetTagsOfGroup(System.Int64)">
            <summary>
            获取标签与分组关系
            </summary>
            <param name="groupId">分组Id</param>
        </member>
        <member name="T:Tunynet.Common.Repositories.TagInOwnerRepository">
             <summary>
            标签与拥有者关联的仓储实现
             </summary>
        </member>
        <member name="M:Tunynet.Common.Repositories.TagInOwnerRepository.Delete(Tunynet.Common.TagInOwner)">
            <summary>
            删除标签与拥有者关系
            </summary>
            <param name="entity">标签与拥有者关系实体</param>
            <returns>影响行数</returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.TagInOwnerRepository.AddTagInOwner(System.String,System.String,System.Int64)">
            <summary>
            添加标签与拥有者关联
            </summary>
            <param name="tagName">标签名</param>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="ownerId">拥有者Id</param>
            <returns>返回影响行数</returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.TagInOwnerRepository.AddTagInOwner(Tunynet.Common.TagInOwner)">
            <summary>
            添加标签与拥有者关联
            </summary>
            <param name="tagInOwner">待创建实体</param>
            <returns>返回实体主键</returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.TagInOwnerRepository.ClearTagsFromOwner(System.Int64,System.String)">
            <summary>
            清除拥有者的所有标签
            </summary>
            <param name="ownerId">拥有者Id</param>
            <param name="tenantTypeId">租户类型Id</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.TagInOwnerRepository.GetTagInOwners(System.Int64,System.String)">
            <summary>
            获取拥有者的标签列表
            </summary>
            <param name="ownerId">拥有者Id</param>
            <param name="tenantTypeId">租户类型Id</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.TagInOwnerRepository.GetTagInOwners(System.Int64,System.String,System.Int32,System.Int32)">
            <summary>
            获取拥有者的分页标签列表
            </summary>
            <param name="ownerId">拥有者Id</param>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="pageSize">每页显示数</param>
            <param name="pageIndex">页码</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.TagInOwnerRepository.GetTagInOwners(System.Int32,System.Int32)">
            <summary>
            分页获取tn_TagsInOwners表的数据(用于建索引)
            </summary>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.TagInOwnerRepository.GetTopTagInOwners(System.Int64,System.String,System.String,System.Int32)">
            <summary>
            获取拥有者的标签列表
            </summary>
            <param name="ownerId">拥有者Id</param>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="keyword">标签关键字</param>
            <param name="topNumber">前N个标签</param>
        </member>
        <member name="T:Tunynet.Common.Repositories.TagRepository`1">
            <summary>
            标签仓储的具体实现类
            </summary>
        </member>
        <member name="M:Tunynet.Common.Repositories.TagRepository`1.Insert(`0)">
            <summary>
            创建实体
            </summary>
            <param name="entity">待创建实体</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.TagRepository`1.UpdateAuditStatus(System.Collections.Generic.IEnumerable{System.Int64},System.Boolean)">
            <summary>
            批量更新审核状态
            </summary>
            <param name="ids">标签Id列表</param>
            <param name="isApproved">是否通过审核</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.TagRepository`1.Delete(`0)">
            <summary>
            从数据库删除实体
            </summary>
            <param name="entity">标签实体</param>
            <returns>影响行数</returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.TagRepository`1.Get(System.String,System.String)">
            <summary>
            获取标签实体
            </summary>
            <param name="tagName">标签名</param>
            <param name="tenantTypeId">租户类型Id</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.TagRepository`1.GetTopTags(System.String,System.Int32,System.Nullable{System.Boolean},System.Nullable{Tunynet.Common.SortBy_Tag},System.Boolean)">
             <summary>
             获取前N个标签
             </summary>
             <remarks>智能提示时也使用该方法获取数据</remarks>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="topNumber">前N条数据</param>
            <param name="isFeatured">是否为特色标签</param>
            <param name="sortBy">标签排序字段</param>
            <param name="isTagCloud">为true时则不启用缓存</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.TagRepository`1.GetTopTagNames(System.String,System.Int64,System.String,System.Int32)">
             <summary>
             获取前N个标签名
             </summary>
             <remarks>用于智能提示</remarks>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="ownerId">拥有者Id</param>
            <param name="keyword">标签名称关键字</param>
            <param name="topNumber">前N条数据</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.TagRepository`1.GetTags(Tunynet.Common.TagQuery,System.Int32,System.Int32)">
             <summary>
            分页检索标签
             </summary>
            <param name="query">查询条件</param>
             <param name="pageIndex">当前页码</param>
             <param name="pageSize">每页记录数</param>
             <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.TagRepository`1.GetTagsOfGroup(System.Int64,System.String,System.Int32)">
             <summary>
            分页检索标签
             </summary>
            <param name="groupId">标签分组Id</param>
            <param name="tenantTypeId">租户类型Id</param>
             <param name="pageIndex">当前页码</param>
             <param name="pageSize">每页记录数</param>
             <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.TagRepository`1.DeleteTrashDatas">
            <summary>
            删除垃圾数据
            </summary>
            <param name="serviceKey">服务标识</param>
        </member>
        <member name="T:Tunynet.Common.Tag">
            <summary>
            标签实体类
            </summary>
        </member>
        <member name="M:Tunynet.Common.Tag.New">
            <summary>
            新建实体时使用
            </summary>
        </member>
        <member name="P:Tunynet.Common.Tag.TagId">
             <summary>
            标签Id
             </summary>
        </member>
        <member name="P:Tunynet.Common.Tag.TenantTypeId">
             <summary>
            租户类型Id
             </summary>
        </member>
        <member name="P:Tunynet.Common.Tag.TagName">
             <summary>
            标签名称
             </summary>
        </member>
        <member name="P:Tunynet.Common.Tag.DisplayName">
            <summary>
            标签显示名
            </summary>
        </member>
        <member name="P:Tunynet.Common.Tag.Description">
             <summary>
            描述
             </summary>
        </member>
        <member name="P:Tunynet.Common.Tag.FeaturedImage">
             <summary>
            标签标题图
             </summary>
        </member>
        <member name="P:Tunynet.Common.Tag.IsFeatured">
             <summary>
            是否为特色标签
             </summary>
        </member>
        <member name="P:Tunynet.Common.Tag.ItemCount">
            <summary>
            内容项数目
            </summary>
        </member>
        <member name="P:Tunynet.Common.Tag.OwnerCount">
            <summary>
            标签使用数
            </summary>
        </member>
        <member name="P:Tunynet.Common.Tag.AuditStatus">
             <summary>
            审核状态
             </summary>
        </member>
        <member name="P:Tunynet.Common.Tag.DateCreated">
             <summary>
            创建日期
             </summary>
        </member>
        <member name="P:Tunynet.Common.Tag.RelatedObjectIds">
            <summary>
            相关对象Id
            </summary>
        </member>
        <member name="P:Tunynet.Common.Tag.OwnerId">
            <summary>
            拥有者Id
            </summary>
        </member>
        <member name="P:Tunynet.Common.Tag.PreDayItemCount">
            <summary>
            24小时内的讨论次数
            </summary>
        </member>
        <member name="P:Tunynet.Common.Tag.PreWeekItemCount">
            <summary>
            最近7天的讨论次数
            </summary>
        </member>
        <member name="P:Tunynet.Common.Tag.GroupName">
            <summary>
            分组名
            </summary>
        </member>
        <member name="T:Tunynet.Common.SortBy_Tag">
            <summary>
            标签排序字段
            </summary>
        </member>
        <member name="F:Tunynet.Common.SortBy_Tag.OwnerCountDesc">
            <summary>
            使用数
            </summary>
        </member>
        <member name="F:Tunynet.Common.SortBy_Tag.ItemCountDesc">
            <summary>
            内容数
            </summary>
        </member>
        <member name="F:Tunynet.Common.SortBy_Tag.PreDayItemCountDesc">
            <summary>
            每日内容数
            </summary>
        </member>
        <member name="F:Tunynet.Common.SortBy_Tag.PreWeekItemCountDesc">
            <summary>
            每周内容数
            </summary>
        </member>
        <member name="F:Tunynet.Common.SortBy_Tag.DateCreated">
            <summary>
            发布日期
            </summary>
        </member>
        <member name="F:Tunynet.Common.SortBy_Tag.DateCreatedDesc">
            <summary>
            发布日期倒序
            </summary>
        </member>
        <member name="T:Tunynet.Common.TagEventArgs">
            <summary>
            标签自定义事件
            </summary>
        </member>
        <member name="M:Tunynet.Common.TagEventArgs.#ctor(System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="eventOperationType">时间操作类型</param>
            <param name="tenantTypeId">租户类型Id</param>
        </member>
        <member name="M:Tunynet.Common.TagEventArgs.#ctor(System.String,System.String,System.Int64)">
            <summary>
            构造函数
            </summary>
            <param name="eventOperationType">时间操作类型</param>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="itemId">标签成员Id</param>
        </member>
        <member name="M:Tunynet.Common.TagEventArgs.#ctor(System.String,System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="eventOperationType">时间操作类型</param>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="tagName">标签名</param>
        </member>
        <member name="P:Tunynet.Common.TagEventArgs.TenantTypeId">
            <summary>
            租户类型Id
            </summary>
        </member>
        <member name="P:Tunynet.Common.TagEventArgs.ItemId">
            <summary>
            标签成员Id
            </summary>
        </member>
        <member name="P:Tunynet.Common.TagEventArgs.TagName">
            <summary>
            标签名
            </summary>
        </member>
        <member name="T:Tunynet.Common.TagGroup">
            <summary>
            标签实体类
            </summary>
        </member>
        <member name="M:Tunynet.Common.TagGroup.New">
            <summary>
            新建实体时使用
            </summary>
        </member>
        <member name="P:Tunynet.Common.TagGroup.GroupId">
            <summary>
            分组Id
            </summary>
        </member>
        <member name="P:Tunynet.Common.TagGroup.TenantTypeId">
            <summary>
            租户类型Id
            </summary>
        </member>
        <member name="P:Tunynet.Common.TagGroup.GroupName">
            <summary>
            标签分组名
            </summary>
        </member>
        <member name="T:Tunynet.Common.TagInGroup">
            <summary>
            标签实体类
            </summary>
        </member>
        <member name="M:Tunynet.Common.TagInGroup.New">
            <summary>
            新建实体时使用
            </summary>
        </member>
        <member name="P:Tunynet.Common.TagInGroup.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:Tunynet.Common.TagInGroup.GroupId">
            <summary>
            分组Id
            </summary>
        </member>
        <member name="P:Tunynet.Common.TagInGroup.TagName">
            <summary>
            标签名称
            </summary>
        </member>
        <member name="T:Tunynet.Common.TagInOwner">
            <summary>
            标签与内容的关联项实体
            </summary>
        </member>
        <member name="M:Tunynet.Common.TagInOwner.New">
            <summary>
            新建实体时使用
            </summary>
        </member>
        <member name="P:Tunynet.Common.TagInOwner.Id">
             <summary>
            Id
             </summary>
        </member>
        <member name="P:Tunynet.Common.TagInOwner.TagName">
            <summary>
            标签名称
            </summary>
        </member>
        <member name="P:Tunynet.Common.TagInOwner.TenantTypeId">
             <summary>
            租户类型Id
             </summary>
        </member>
        <member name="P:Tunynet.Common.TagInOwner.OwnerId">
             <summary>
            拥有者Id
             </summary>
        </member>
        <member name="P:Tunynet.Common.TagInOwner.ItemCount">
             <summary>
            内容项数目
             </summary>
        </member>
        <member name="T:Tunynet.Common.TagService">
            <summary>
            标签业务逻辑类
            </summary>
        </member>
        <member name="T:Tunynet.Common.TagService`1">
            <summary>
            标签业务逻辑类
            </summary>
        </member>
        <member name="M:Tunynet.Common.TagService`1.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="tenantTypeId">租户类型Id</param>
        </member>
        <member name="M:Tunynet.Common.TagService`1.#ctor(System.String,Tunynet.Common.Repositories.ITagRepository{`0},Tunynet.Common.Repositories.IItemInTagRepository,Tunynet.Common.Repositories.ITagInOwnerRepository,Tunynet.Common.Repositories.IRelatedTagRepository,Tunynet.Common.Repositories.ITagInGroupRepository,Tunynet.Common.Repositories.ITagGroupRepository)">
            <summary>
            可设置repository的构造函数
            </summary>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="tagRepository">标签Repository</param>
            <param name="itemInTagRepository">内容与标签关系Repository</param>
            <param name="tagInOwnerReposiory">标签与拥有者关系Repository</param>
            <param name="tagGroupRepository">标签分组Repository</param>
            <param name="tagInGroupRepository">标签与分组关系Repository</param>
            <param name="relatedTagRepository"></param>
        </member>
        <member name="F:Tunynet.Common.TagService`1.SplitCharacters">
            <summary>
            用于标签分割的字符数组
            </summary>
            <remarks>
            可以在添加标签时用户SplitCharacters中的字符做分割一次录入多个标签
            </remarks>
        </member>
        <member name="F:Tunynet.Common.TagService`1.URLSpecialCharacters">
            <summary>
            Url特殊字符
            </summary>
        </member>
        <member name="F:Tunynet.Common.TagService`1.siteTagLevelPartitions">
            <summary>
            标签云系数
            </summary>
        </member>
        <member name="M:Tunynet.Common.TagService`1.Create(`0,System.IO.Stream)">
            <summary>
            创建标签
            </summary>
            <param name="tag">待创建的标签</param>
            <param name="logoStream">标题图文件流</param>
            <returns>创建成功返回true，否则返回false</returns>
        </member>
        <member name="M:Tunynet.Common.TagService`1.Update(`0,System.IO.Stream)">
            <summary>
            更新标签
            </summary>
            <param name="tag">待创建的标签</param>
            <param name="logoStream">标题图文件流</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.TagService`1.Delete(System.Int64)">
            <summary>
            删除标签
            </summary>
            <param name="tagId">标签Id</param>
            <returns>删除成功返回true，否则返回false</returns>
        </member>
        <member name="M:Tunynet.Common.TagService`1.UpdateAuditStatus(System.Collections.Generic.IEnumerable{System.Int64},System.Boolean)">
            <summary>
            批量更新审核状态
            </summary>
            <param name="ids">评论Id列表</param>
            <param name="isApproved">审核状态</param>
        </member>
        <member name="M:Tunynet.Common.TagService`1.Get(System.Int64)">
            <summary>
            获取Tag
            </summary>
            <param name="tagId">标签Id</param>
        </member>
        <member name="M:Tunynet.Common.TagService`1.Get(System.String)">
            <summary>
            获取标签实体
            </summary>
            <param name="tagName">标签名</param>
            <param name="tenantTypeId">租户类型Id</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.TagService`1.GetTopTags(System.Int32,System.Nullable{Tunynet.Common.SortBy_Tag})">
             <summary>
             获取前N个标签
             </summary>
            <param name="topNumber">前N条数据</param>
            <param name="sortBy">标签排序字段</param>
             <returns>{Key:标签实体,Value:标签级别}</returns>
        </member>
        <member name="M:Tunynet.Common.TagService`1.GetTopTags(System.Int32,System.Nullable{System.Boolean},System.Nullable{Tunynet.Common.SortBy_Tag})">
             <summary>
             获取前N个标签
             </summary>
            <param name="topNumber">获取数据的条数</param>
            <param name="isFeatured">是否为特色标签</param>
            <param name="sortBy">标签排序字段</param>
        </member>
        <member name="M:Tunynet.Common.TagService`1.GetOwnerTopTags(System.Int32,System.Int64)">
             <summary>
             获取用户的前N个标签
             </summary>
            <param name="topNumber">前N条数据</param>
            <param name="ownerId">拥有者Id</param>
             <returns>{Key:标签实体,Value:标签级别}</returns>
        </member>
        <member name="M:Tunynet.Common.TagService`1.GetTopTagNames(System.String,System.Int32)">
             <summary>
             获取前N个标签名
             </summary>
             <remarks>用于智能提示</remarks>
            <param name="keyword">标签名称关键字</param>
            <param name="topNumber">前N条数据</param>
        </member>
        <member name="M:Tunynet.Common.TagService`1.GetTopTagNames(System.Int32,System.String,System.Int32)">
             <summary>
             获取前N个标签名
             </summary>
             <remarks>用于智能提示</remarks>
            <param name="ownerId">拥有者Id</param>
            <param name="keyword">标签名称关键字</param>
            <param name="topNumber">前N条数据</param>
        </member>
        <member name="M:Tunynet.Common.TagService`1.GetTags(Tunynet.Common.TagQuery,System.Int32,System.Int32)">
             <summary>
            分页检索标签
             </summary>
            <param name="query">查询条件</param>
             <param name="pageIndex">当前页码</param>
             <param name="pageSize">每页记录数</param>
             <returns></returns>
        </member>
        <member name="M:Tunynet.Common.TagService`1.GetTags(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            根据标签Id列表组装标签实体
            </summary>
            <param name="tagIds">标签Id集合</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.TagService`1.GetTagsByTagInOwnerIds(System.Collections.Generic.IEnumerable{System.Int64})">
             <summary>
             根据Id集合获取标签
             </summary>
            <param name="tagInOwnerIds">前N条数据</param>
             <returns>{Key:标签实体,Value:标签级别}</returns>
        </member>
        <member name="M:Tunynet.Common.TagService`1.GetTagInOwners(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            根据标签Id列表组装标签实体
            </summary>
            <param name="tagIds">标签Id集合</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.TagService`1.GetTagsOfGroup(System.Int64,System.String,System.Int32)">
             <summary>
            分页检索标签
             </summary>
            <param name="groupId">标签分组Id</param>
            <param name="tenantTypeId">租户类型Id</param>
             <param name="pageIndex">当前页码</param>
             <param name="pageSize">每页记录数</param>
             <returns></returns>
        </member>
        <member name="M:Tunynet.Common.TagService`1.AddTagInOwner(System.String,System.String,System.Int64)">
            <summary>
            添加标签与拥有者关联
            </summary>
            <param name="tagName">标签名</param>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="ownerId">拥有者Id</param>
            <returns>返回主键</returns>
        </member>
        <member name="M:Tunynet.Common.TagService`1.DeleteOwnerTag(System.Int64)">
            <summary>
            删除拥有者标签
            </summary>
            <param name="tagInOwnerId">标签与拥有者关系Id</param>
        </member>
        <member name="M:Tunynet.Common.TagService`1.ClearTagsFromOwner(System.Int64)">
            <summary>
            清除拥有者的所有标签
            </summary>
            <param name="ownerId">拥有者Id</param>
        </member>
        <member name="M:Tunynet.Common.TagService`1.GetOwnerTags(System.Int64)">
            <summary>
            获取拥有者的标签列表
            </summary>
            <param name="ownerId">拥有者Id</param>
        </member>
        <member name="M:Tunynet.Common.TagService`1.GetOwnerTags(System.Int32,System.Int32)">
            <summary>
            分页获取tn_TagsInOwners表的数据(用于建索引)
            </summary>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.TagService`1.GetTopOwnerTags(System.Int64,System.String,System.Int32)">
            <summary>
            获取拥有者的前N个标签
            </summary>
            <param name="ownerId">拥有者Id</param>
            <param name="keyword">标签关键字</param>
            <param name="topNumber">前N个标签</param>
        </member>
        <member name="M:Tunynet.Common.TagService`1.GetTopOwnerTags(System.Int64,System.Int32,System.String)">
            <summary>
            获取拥有者的前N个标签（用户构件标签云）
            </summary>
            <param name="ownerId">标签拥有者Id</param>
            <param name="topNumber">获取标签数</param>
            <param name="tenantTypeId">租户类型Id</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.TagService`1.AddItemsToTag(System.Collections.Generic.IEnumerable{System.Int64},System.Int64,System.String)">
            <summary>
            为多个内容项添加相同标签
            </summary>
            <param name="itemIds">内容项Id</param>
            <param name="ownerId">拥有者Id</param>
            <param name="tagName">标签名</param>
        </member>
        <member name="M:Tunynet.Common.TagService`1.AddTagToItem(System.String,System.Int64,System.Int64)">
            <summary>
            为内容项批量设置标签
            </summary>
            <param name="tagName">标签名称</param>
            <param name="ownerId">拥有者Id</param>
            <param name="itemId">内容项Id</param>
        </member>
        <member name="M:Tunynet.Common.TagService`1.AddTagsToItem(System.String,System.Int64,System.Int64)">
            <summary>
            为内容项批量设置标签
            </summary>
            <remarks>标签中如果要包含空格需要用""引起来</remarks>
            <param name="tagString">待处理的标签字符串</param>
            <param name="ownerId">拥有者Id</param>
            <param name="itemId">内容项Id</param>
        </member>
        <member name="M:Tunynet.Common.TagService`1.AddTagsToItem(System.String[],System.Int64,System.Int64)">
            <summary>
            为内容项批量设置标签
            </summary>
            <remarks>标签中如果要包含空格需要用""引起来</remarks>
            <param name="tagNames">待添加的标签集合</param>
            <param name="ownerId">拥有者Id</param>
            <param name="itemId">内容项Id</param>
        </member>
        <member name="M:Tunynet.Common.TagService`1.DeleteTagFromItem(System.Int64)">
            <summary>
            删除标签与内容项的关联
            </summary>
            <param name="itemInTagId">内容项与标签关联Id</param>
        </member>
        <member name="M:Tunynet.Common.TagService`1.ClearTagsFromItem(System.Int64,System.Int64)">
            <summary>
            清除内容项的所有标签
            </summary>
            <param name="itemId">内容项Id</param>
            <param name="ownerId">拥有者Id</param>
        </member>
        <member name="M:Tunynet.Common.TagService`1.GetItemIds(System.String,System.Nullable{System.Int64})">
            <summary>
            获取标签的所有内容项集合
            </summary>
            <param name="tagName">标签名称</param>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="ownerId">拥有者Id</param>
            <returns>返回指定的内容项Id集合</returns>
        </member>
        <member name="M:Tunynet.Common.TagService`1.GetItemIds(System.String,System.Nullable{System.Int64},System.Int32,System.Int32)">
            <summary>
            获取标签的内容项集合
            </summary>
            <param name="tagName">标签名称</param>
            <param name="ownerId">拥有者Id</param>
            <param name="pageSize">每页记录数</param>
            <param name="pageIndex">当前页码(从1开始)</param>
            <returns>返回指定页码的内容项Id集合</returns>
        </member>
        <member name="M:Tunynet.Common.TagService`1.GetItemIds(System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Int64},System.Int32,System.Int32)">
            <summary>
            获取多个标签的内容项集合
            </summary>
            <param name="tagNames">标签名称列表</param>
            <param name="ownerId">拥有者Id</param>
            <param name="pageSize">每页记录数</param>
            <param name="pageIndex">当前页码(从1开始)</param>
            <returns>返回指定页码的内容项Id集合</returns>
        </member>
        <member name="M:Tunynet.Common.TagService`1.GetItemInTagsOfItem(System.Int64)">
            <summary>
            获取内容项的所有标签
            </summary>
            <param name="itemId">内容项Id</param>
            <returns>返回内容项的标签集合</returns>
        </member>
        <member name="M:Tunynet.Common.TagService`1.GetTopTagsOfItem(System.Int64,System.Int32)">
            <summary>
            获取内容项的前N个标签标签
            </summary>
            <param name="itemId">内容项Id</param>
            <param name="topNumber">前N条记录</param>
            <returns>返回内容项的标签集合</returns>
        </member>
        <member name="M:Tunynet.Common.TagService`1.GetOwnerTagsOfItem(System.Int64,System.Int64)">
            <summary>
            根据内容项获取拥有者设置的标签
            </summary>
            <param name="itemId">内容项Id</param>
            <param name="ownerId">拥有者Id</param>
        </member>
        <member name="M:Tunynet.Common.TagService`1.GetItemInTagIdsByItemIds(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            根据用户ID列表获取ItemInTag的ID列表，本方法现用于用户搜索功能的索引生成
            </summary>
            <param name="userIds">用户ID列表</param>
            <returns>ItemInTag的ID列表</returns>
        </member>
        <member name="M:Tunynet.Common.TagService`1.GetItemInTags(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            根据Id列表获取ItemInTag的实体列表
            </summary>
            <param name="entityIds">ItemInTag的Id列表</param>
            <returns>ItemInTag的实体列表</returns>
        </member>
        <member name="M:Tunynet.Common.TagService`1.GetTagNamesWithIdsOfItem(System.Int64,System.Nullable{System.Int64})">
            <summary>
            根据Id获取
            </summary>
            <param name="itemId">成员Id</param>
            <param name="tagInOwnerId">标签与拥有者关联Id</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.TagService`1.AddRelatedTagsToTag(System.String,System.Int32,System.Int64)">
            <summary>
            添加相关标签
            </summary>
            <param name="tagString">待处理的标签字符串</param>
            <param name="ownerId">拥有者Id</param>
            <param name="tagId">标签Id</param>
        </member>
        <member name="M:Tunynet.Common.TagService`1.ClearRelatedTagsFromTag(System.Int64)">
            <summary>
            清除拥有者的所有标签
            </summary>
            <param name="tagId">被关联的标签Id</param>
        </member>
        <member name="M:Tunynet.Common.TagService`1.DeleteRelatedTagFromTag(System.Int64,System.Int64)">
            <summary>
            清除关联的标签
            </summary>
            <remarks>会删除双向的关联关系</remarks>
            <param name="relatedTagId">关联的标签Id</param>
            <param name="tagId">被关联的标签Id</param>
        </member>
        <member name="M:Tunynet.Common.TagService`1.GetRelatedTags(System.Int64)">
            <summary>
            获取相关标签
            </summary>
            <param name="tagId">被关联的标签Id</param>
        </member>
        <member name="M:Tunynet.Common.TagService`1.CreateGroup(Tunynet.Common.TagGroup)">
            <summary>
            创建标签分组
            </summary>
            <param name="group">待创建分组实体</param>
        </member>
        <member name="M:Tunynet.Common.TagService`1.UpdateGroup(Tunynet.Common.TagGroup)">
            <summary>
            更新标签分组
            </summary>
            <param name="group">待更新分组实体</param>
        </member>
        <member name="M:Tunynet.Common.TagService`1.DeleteGroup(Tunynet.Common.TagGroup)">
            <summary>
            更新标签分组
            </summary>
            <param name="group">待更新分组实体</param>
        </member>
        <member name="M:Tunynet.Common.TagService`1.GetGroups(System.String)">
            <summary>
            获取所有标签分组管理员后台用
            </summary>
            <param name="tenantTypeId">租户类型Id</param>
        </member>
        <member name="M:Tunynet.Common.TagService`1.GetGroup(System.Int64)">
            <summary>
            获取标签分组实体
            </summary>
            <param name="groupId">分组Id</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.TagService`1.AddTagInGroup(System.String,System.Int64)">
            <summary>
            添加标签与分组关联
            </summary>
            <param name="tagName">标签名</param>
            <param name="groupId">拥有者Id</param>
        </member>
        <member name="M:Tunynet.Common.TagService`1.BatchAddTagsInGroup(System.Collections.Generic.IEnumerable{System.String},System.Int64)">
            <summary>
            批量添加标签与分组关联
            </summary>
            <param name="tagNames">标签名</param>
            <param name="groupId">拥有者Id</param>
        </member>
        <member name="M:Tunynet.Common.TagService`1.BatchAddGroupsToTag(System.Collections.Generic.IEnumerable{System.Int64},System.String)">
            <summary>
            批量添加分组给标签
            </summary>
            <param name="groupIds">分组Id集合</param>
            <param name="tagName">标签名</param>
        </member>
        <member name="M:Tunynet.Common.TagService`1.ClearTagsFromGroup(System.Int64)">
            <summary>
            清除分组的所有标签
            </summary>
            <param name="groupId">分组Id</param>
            <param name="tenantTypeId">租户类型Id</param>
        </member>
        <member name="M:Tunynet.Common.TagService`1.GetTagsOfGroup(System.Int64)">
            <summary>
            获取分组下的标签
            </summary>
            <param name="groupId">分组Id</param>
        </member>
        <member name="M:Tunynet.Common.TagService`1.GetTopTagsOfGroup(System.Int64,System.Int32)">
            <summary>
            获取分组下的前N个标签
            </summary>
            <param name="groupId">分组Id</param>
            <param name="topNumber">获取记录数</param>
        </member>
        <member name="M:Tunynet.Common.TagService`1.GetGroupsOfTag(System.String,System.String)">
            <summary>
            根据标签获取标签分组
            </summary>
            <param name="tagName">标签名</param>
            <param name="tenantTypeId">租户类型Id</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.TagService`1.ResolveBodyForEdit(System.String,System.Int64,System.Int64,System.String)">
            <summary>
            解析内容用于创建话题
            </summary>
            <param name="body">待解析的内容</param>
            <param name="ownerId">标签拥有者Id</param>
            <param name="associateId">关联项Id</param>
            <param name="tenantTypeId">租户类型Id</param>
        </member>
        <member name="M:Tunynet.Common.TagService`1.ResolveBodyForDetail(System.String,System.Int64,System.Int64,System.Func{System.Collections.Generic.KeyValuePair{System.String,System.Int64},System.Int64,System.String})">
            <summary>
            解析内容中的AtUser用户展示展示
            </summary>
            <param name="body">待解析的内容</param>
            <param name="associateId">关联项Id</param>
            <param name="ownerId">标签拥有者Id</param>
            <param name="TagGenerate">用户生成对应标签的方法</param>
        </member>
        <member name="M:Tunynet.Common.TagService`1.SplitTagString(System.String)">
            <summary>
            分割tagString的到标签名集合
            </summary>
            <remarks>保留引号中标签名的空格</remarks>
            <param name="tagString">标签名字符串</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.TagService.#ctor(System.String)">
            <summary>
            构造器
            </summary>
            <param name="tenantTypeId">租户类型Id</param>
        </member>
        <member name="T:Tunynet.Common.TagSettings">
            <summary>
            站点Tag设置
            </summary>
        </member>
        <member name="P:Tunynet.Common.TagSettings.MaxTagsCount">
            <summary>
            最大标签数
            </summary>
        </member>
        <member name="T:Tunynet.Common.ITagUrlGetter">
            <summary>
            标签Url获取接口
            </summary>
        </member>
        <member name="M:Tunynet.Common.ITagUrlGetter.GetUrl(System.String,System.Int64)">
            <summary>
            获取标签访问Url
            </summary>
            <param name="tagName">标签名</param>
            <param name="ownerId"></param>
            <returns></returns>
        </member>
        <member name="T:Tunynet.Common.TagUrlGetterManager">
            <summary>
            标签url获取管理器
            </summary>
        </member>
        <member name="M:Tunynet.Common.TagUrlGetterManager.GetRegisteredGetter(System.String)">
            <summary>
            获取注册的TagUrlGetters
            </summary>
            <param name="tenantTypeId">租户类型Id</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.TagUrlGetterManager.RegisterGetter(System.String,Tunynet.Common.ITagUrlGetter)">
             <summary>
             注册UserDataSettings
             </summary>
             <param name="tenantTypeId">租户类型Id</param>
            <param name="getter">标签Url获取器</param>
        </member>
        <member name="T:Tunynet.Common.TagQuery">
            <summary>
            封装后台管理用户时用于查询用户的条件
            </summary>
        </member>
        <member name="P:Tunynet.Common.TagQuery.PubliclyAuditStatus">
            <summary>
            审核状态
            </summary>
        </member>
        <member name="P:Tunynet.Common.TagQuery.TenantTypeId">
             <summary>
            租户类型Id
             </summary>
        </member>
        <member name="P:Tunynet.Common.TagQuery.Keyword">
            <summary>
            关键字
            </summary>
        </member>
        <member name="P:Tunynet.Common.TagQuery.IsFeatured">
             <summary>
            是否为特色标签
             </summary>
        </member>
        <member name="T:Tunynet.Common.HttpWebHelper">
            <summary>
            远程页面请求
            </summary>
        </member>
        <member name="M:Tunynet.Common.HttpWebHelper.HttpWebRequest(System.String,System.String,System.Boolean,System.String,System.String@,System.Int32)">
            <summary>
            获取请求结果
            </summary>
            <param name="requestUrl">请求地址</param>
            <param name="timeout">超时时间(秒)</param>
            <param name="requestXML">请求xml内容</param>
            <param name="isPost">是否post提交</param>
            <param name="encoding">编码格式 例如:utf-8</param>
            <param name="msg">抛出的错误信息</param>
            <returns>返回请求结果</returns>
        </member>
        <member name="T:Tunynet.Common.Attitude">
            <summary>
            顶踩实体
            </summary>
        </member>
        <member name="M:Tunynet.Common.Attitude.New">
            <summary>
            实体初始化方法
            </summary>
            <returns></returns>
        </member>
        <member name="P:Tunynet.Common.Attitude.Id">
             <summary>
            Id
             </summary>
        </member>
        <member name="P:Tunynet.Common.Attitude.ObjectId">
             <summary>
            操作对象Id
             </summary>
        </member>
        <member name="P:Tunynet.Common.Attitude.SupportCount">
             <summary>
            支持数
             </summary>
        </member>
        <member name="P:Tunynet.Common.Attitude.OpposeCount">
             <summary>
            反对数
             </summary>
        </member>
        <member name="P:Tunynet.Common.Attitude.TenantTypeId">
             <summary>
            租户类型Id
             </summary>
        </member>
        <member name="P:Tunynet.Common.Attitude.Comprehensive">
             <summary>
            综合评价值（根据支持反对数加权所得）
             </summary>
        </member>
        <member name="T:Tunynet.Common.SortBy_Attitude">
            <summary>
            顶踩排序字段
            </summary>
        </member>
        <member name="F:Tunynet.Common.SortBy_Attitude.Comprehensive_Desc">
            <summary>
            根据综合评价
            </summary>
        </member>
        <member name="F:Tunynet.Common.SortBy_Attitude.SupportCount_Desc">
            <summary>
            根据顶的统计数
            </summary>
        </member>
        <member name="T:Tunynet.Common.AttitudeMode">
            <summary>
            顶踩的模式
            </summary>
        </member>
        <member name="F:Tunynet.Common.AttitudeMode.Unidirection">
            <summary>
            单向操作（用于仅存在顶操作）
            </summary>
        </member>
        <member name="F:Tunynet.Common.AttitudeMode.Bidirection">
            <summary>
            双向操作（用于顶踩操作都存在）
            </summary>
        </member>
        <member name="T:Tunynet.Common.AttitudeStyle">
            <summary>
            顶踩样式
            </summary>
        </member>
        <member name="F:Tunynet.Common.AttitudeStyle.Like">
            <summary>
            喜欢（心的形状）
            </summary>
        </member>
        <member name="F:Tunynet.Common.AttitudeStyle.Support">
            <summary>
            单向顶（向上的手的形状）
            </summary>
        </member>
        <member name="F:Tunynet.Common.AttitudeStyle.SupportOppose">
            <summary>
            双向顶和踩（向上向下的手的形状）
            </summary>
        </member>
        <member name="F:Tunynet.Common.AttitudeStyle.UpDown">
            <summary>
            双向顶和踩（向上向下箭头的形状）
            </summary>
        </member>
        <member name="T:Tunynet.Common.AttitudeOnlySupportSettings">
            <summary>
            单向支持设置
            </summary>
        </member>
        <member name="P:Tunynet.Common.AttitudeOnlySupportSettings.IsCancel">
            <summary>
            是否允许取消操作
            </summary>
        </member>
        <member name="T:Tunynet.Common.AttitudeRecord">
            <summary>
            顶踩记录实体
            </summary>
        </member>
        <member name="M:Tunynet.Common.AttitudeRecord.New">
            <summary>
            实体初始化方法
            </summary>
            <returns></returns>
        </member>
        <member name="P:Tunynet.Common.AttitudeRecord.Id">
             <summary>
            Id
             </summary>
        </member>
        <member name="P:Tunynet.Common.AttitudeRecord.ObjectId">
             <summary>
            操作对象Id
             </summary>
        </member>
        <member name="P:Tunynet.Common.AttitudeRecord.UserId">
             <summary>
            用户Id
             </summary>
        </member>
        <member name="P:Tunynet.Common.AttitudeRecord.TenantTypeId">
             <summary>
            租户类型Id
             </summary>
        </member>
        <member name="P:Tunynet.Common.AttitudeRecord.IsSupport">
             <summary>
            用户是否支持（true为支持false为反对）
             </summary>
        </member>
        <member name="T:Tunynet.Common.AttitudeService">
            <summary>
             顶踩的业务逻辑
            </summary>
        </member>
        <member name="M:Tunynet.Common.AttitudeService.#ctor(System.String)">
            <summary>
            构造器
            </summary>
            <param name="tenantTypeId">租户类型Id</param>
        </member>
        <member name="M:Tunynet.Common.AttitudeService.#ctor(System.String,Tunynet.Common.AttitudeMode)">
            <summary>
            构造器
            </summary>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="mode">双向或单向模式</param>
        </member>
        <member name="M:Tunynet.Common.AttitudeService.#ctor(System.String,Tunynet.Common.IAttitudeRepository,Tunynet.Common.IAttitudeRecordRepository,Tunynet.Common.AttitudeMode)">
            <summary>
            构造器
            </summary>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="attitudeRepository">顶踩数据访问</param>
            <param name="attitudeRecordRepository">顶踩记录数据访问</param>
        </member>
        <member name="M:Tunynet.Common.AttitudeService.Get(System.Int64)">
            <summary>
            获取顶踩信息
            </summary>
            <param name="objectId">操作对象</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.AttitudeService.Support(System.Int64,System.Int64)">
            <summary>
            对操作对象进行顶操作
            </summary>
            <param name="objectId">操作对象Id</param>
            <param name="userId">操作用户Id</param>
            <param name="mode">顶踩的操作模式</param>
            <returns>是否操作成功，Ture-成功</returns>
        </member>
        <member name="M:Tunynet.Common.AttitudeService.Oppose(System.Int64,System.Int64)">
            <summary>
            对操作对象进行踩操作
            </summary>
            <param name="objectId">操作对象Id</param>
            <param name="userId">操作用户Id</param>
            <returns>是否操作成功，Ture-成功</returns>
        </member>
        <member name="M:Tunynet.Common.AttitudeService.IsSupport(System.Int64,System.Int64)">
            <summary>
            用户当前操作
            </summary>
            <param name="objectId">操作对象Id</param>
            <param name="userId">用户的UserId</param>
            <returns>用户当前所做的操作:True-顶,false-踩,null-未做任何操作</returns>
        </member>
        <member name="M:Tunynet.Common.AttitudeService.GetPageObjectIds(Tunynet.Common.SortBy_Attitude,System.Int32,System.Int32)">
             <summary>
             获取操作对象的Id集合
             </summary>
            <param name="sortBy">顶踩排序字段</param>
            <param name="pageSize">每页的内容数</param>
            <param name="pageIndex">页码</param>
        </member>
        <member name="M:Tunynet.Common.AttitudeService.GetTopOperatedUserIds(System.Int64,System.Boolean,System.Int32)">
            <summary>
            获取操作者的Id集合
            </summary>
            <param name="objectId">操作对象Id</param>
            <param name="IsSupport">用户是否支持（true为支持，false为反对）</param>
            <param name="topNumber">获取条数</param>
        </member>
        <member name="M:Tunynet.Common.AttitudeService.GetPageObjectIdsByUserId(System.Int64,System.Int32,System.Int32)">
             <summary>
             获取用户顶过的内容ID集合
             </summary>
            <param name="userId">用户Id</param>
            <param name="pageSize">每页的内容数</param>
            <param name="pageIndex">页码</param>
        </member>
        <member name="T:Tunynet.Common.AttitudeSettings">
            <summary>
            顶踩配置类
            </summary>
        </member>
        <member name="P:Tunynet.Common.AttitudeSettings.SupportWeights">
            <summary>
            顶操作统计的权重
            </summary>
        </member>
        <member name="P:Tunynet.Common.AttitudeSettings.OpposeWeights">
            <summary>
            踩操作统计的权重
            </summary>
        </member>
        <member name="P:Tunynet.Common.AttitudeSettings.EnableCancel">
            <summary>
            是否允许取消操作
            </summary>
        </member>
        <member name="P:Tunynet.Common.AttitudeSettings.IsModify">
            <summary>
            是否允许修改操作
            </summary>
        </member>
        <member name="M:Tunynet.Common.EventOperationTypeExtension.Support(Tunynet.Events.EventOperationType)">
            <summary>
            顶
            </summary>
        </member>
        <member name="M:Tunynet.Common.EventOperationTypeExtension.Oppose(Tunynet.Events.EventOperationType)">
            <summary>
            踩
            </summary>
        </member>
        <member name="T:Tunynet.Common.AttitudeRecordRepository">
            <summary>
            顶踩记录的数据访问
            </summary>
        </member>
        <member name="T:Tunynet.Common.IAttitudeRecordRepository">
            <summary>
            顶踩记录的数据访问接口
            </summary>
        </member>
        <member name="M:Tunynet.Common.IAttitudeRecordRepository.GetTopOperatedUserIds(System.Int64,System.String,System.Boolean,System.Int32)">
            <summary>
            获取参与用户的Id集合
            </summary>
            <param name="objectId">操作对象Id</param>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="IsSupport">用户是否支持（true为支持，false为反对）</param>
            <param name="topNumber">条数</param>
        </member>
        <member name="M:Tunynet.Common.IAttitudeRecordRepository.GetObjectIds(System.String,System.Int64,System.Int32,System.Int32)">
             <summary>
             获取操作对象的Id集合
             </summary>
             <param name="tenantTypeId">租户类型Id</param>
            <param name="userId">用户ID</param>
            <param name="pageSize">每页的内容数</param>
            <param name="pageIndex">页码</param>
        </member>
        <member name="M:Tunynet.Common.IAttitudeRecordRepository.GetAllAttitues(System.String,System.Int64)">
            <summary>
            获取用户对某项的所有顶踩
            </summary>
            <param name="objectId"></param>
            <param name="tenantTypeId"></param>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.AttitudeRecordRepository.GetTopOperatedUserIds(System.Int64,System.String,System.Boolean,System.Int32)">
            <summary>
            获取参与用户的Id集合
            </summary>
            <param name="objectId">操作对象Id</param>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="IsSupport">用户是否支持（true为支持，false为反对）</param>
            <param name="topNumber">获取条数</param>
        </member>
        <member name="M:Tunynet.Common.AttitudeRecordRepository.GetObjectIds(System.String,System.Int64,System.Int32,System.Int32)">
             <summary>
             获取用户在某一租户下顶过的内容
             </summary>
             <param name="tenantTypeId">租户类型Id</param>
            <param name="userId">用户Id</param>
            <param name="pageSize">每页的内容数</param>
            <param name="pageIndex">页码</param>
        </member>
        <member name="M:Tunynet.Common.AttitudeRecordRepository.GetAllAttitues(System.String,System.Int64)">
            <summary>
            获取用户对某项的所有顶踩
            </summary>
            <param name="objectId"></param>
            <param name="tenantTypeId"></param>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.AttitudeRecordRepository.GetCacheKey_AllAttitues(System.String,System.Int64)">
            <summary>
            获取用户对某项的所有顶踩
            </summary>
            <param name="tenantTypeId"></param>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.AttitudeRecordRepository.GetCacheKey_ObjectIds(System.String,System.Int64,System.Int32)">
            <summary>
            获取操作Id集合的CacheKey
            </summary>
            <param name="tenantTypeId"> 租户类型Id</param>
            <param name="sortBy">排序类型</param>
            <returns></returns>
        </member>
        <member name="T:Tunynet.Common.AttitudeRepository">
            <summary>
            顶踩的数据访问
            </summary>
        </member>
        <member name="T:Tunynet.Common.IAttitudeRepository">
            <summary>
            顶踩的数据访问接口
            </summary>
        </member>
        <member name="M:Tunynet.Common.IAttitudeRepository.Get(System.Int64,System.String,System.Boolean)">
            <summary>
            获取顶踩信息
            </summary>
            <param name="objectId">操作对象</param>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="isFromCache">是否从缓存中获取</param>
        </member>
        <member name="M:Tunynet.Common.IAttitudeRepository.Support(System.Int64,System.String,System.Int64,Tunynet.Common.AttitudeMode)">
            <summary>
            对操作对象进行顶操作
            </summary>
            <param name="objectId">操作对象Id</param>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="userId">操作用户Id</param>
            <param name="mode">顶踩的操作模式</param>
            <returns>是否操作成功，Ture-成功</returns>
        </member>
        <member name="M:Tunynet.Common.IAttitudeRepository.Oppose(System.Int64,System.String,System.Int64)">
            <summary>
            对操作对象进行踩操作
            </summary>
            <param name="objectId">操作对象Id</param>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="userId">操作用户Id</param>
            <returns>是否操作成功，Ture-成功</returns>
        </member>
        <member name="M:Tunynet.Common.IAttitudeRepository.IsSupport(System.Int64,System.String,System.Int64)">
            <summary>
            用户当前操作
            </summary>
            <param name="objectId">操作对象Id</param>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="userId">用户的UserId</param>
            <returns>用户当前所做的操作:True-顶,false-踩,null-未做任何操作</returns>
        </member>
        <member name="M:Tunynet.Common.IAttitudeRepository.GetObjectIds(System.String,Tunynet.Common.SortBy_Attitude,System.Int32,System.Int32)">
             <summary>
             获取操作对象的Id集合
             </summary>
             <param name="tenantTypeId">租户类型Id</param>
            <param name="sortBy">顶踩排序字段</param>
            <param name="pageSize">每页的内容数</param>
            <param name="pageIndex">页码</param>
        </member>
        <member name="M:Tunynet.Common.AttitudeRepository.Get(System.Int64,System.String,System.Boolean)">
            <summary>
            获取顶踩信息
            </summary>
            <param name="objectId">操作对象</param>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="isFromCache">是否从缓存中获取</param>
        </member>
        <member name="M:Tunynet.Common.AttitudeRepository.Support(System.Int64,System.String,System.Int64,Tunynet.Common.AttitudeMode)">
            <summary>
            对操作对象进行顶操作
            </summary>
            <param name="objectId">操作对象Id</param>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="userId">操作用户Id</param>
            <param name="mode">顶踩的操作模式</param>
            <returns>是否操作成功，Ture-成功</returns>
        </member>
        <member name="M:Tunynet.Common.AttitudeRepository.Oppose(System.Int64,System.String,System.Int64)">
            <summary>
            对操作对象进行踩操作
            </summary>
            <param name="objectId">操作对象Id</param>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="userId">操作用户Id</param>
            <returns>是否操作成功，Ture-成功</returns>
        </member>
        <member name="M:Tunynet.Common.AttitudeRepository.IsSupport(System.Int64,System.String,System.Int64)">
            <summary>
            用户当前操作
            </summary>
            <param name="objectId">操作对象Id</param>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="userId">用户的UserId</param>
            <returns>用户当前所做的操作:True-顶,false-踩,null-未做任何操作</returns>
        </member>
        <member name="M:Tunynet.Common.AttitudeRepository.GetObjectIds(System.String,Tunynet.Common.SortBy_Attitude,System.Int32,System.Int32)">
             <summary>
             获取操作对象的Id集合
             </summary>
             <param name="tenantTypeId">租户类型Id</param>
            <param name="sortBy">顶踩排序字段</param>
            <param name="pageSize">每页的内容数</param>
            <param name="pageIndex">页码</param>
        </member>
        <member name="M:Tunynet.Common.AttitudeRepository.DeleteTrashDatas">
            <summary>
            删除垃圾数据
            </summary>
            <param name="serviceKey">服务标识</param>
        </member>
        <member name="M:Tunynet.Common.AttitudeRepository.GetCacheKey_ObjectIds(System.String,Tunynet.Common.SortBy_Attitude)">
            <summary>
            获取操作Id集合的CacheKey
            </summary>
            <param name="tenantTypeId"> 租户类型Id</param>
            <param name="sortBy">排序类型</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.AttitudeRepository.GetCacheKey_Attitude(System.String,System.Int64)">
            <summary>
            获取态度CacheKey
            </summary>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="objectId">操作对象</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.AttitudeRepository.GetCacheKey_IsSupport(System.Int64,System.String,System.Int64)">
            <summary>
            获取是否发表态度CacheKey
            </summary>
            <param name="objectId"></param>
            <param name="tenantTypeId"></param>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="T:Tunynet.Common.CommentUrlGetterFactory">
            <summary>
            评论URL获取器工厂
            </summary>
        </member>
        <member name="M:Tunynet.Common.CommentUrlGetterFactory.Get(System.String)">
            <summary>
            依据tenantTypeId获取ICommentUrlGetter
            </summary>
            <returns></returns>
        </member>
        <member name="T:Tunynet.Common.Configuration.CommentSettings">
            <summary>
            全局设置类
            </summary>
        </member>
        <member name="P:Tunynet.Common.Configuration.CommentSettings.EnableComment">
            <summary>
            是否启用评论
            </summary>
        </member>
        <member name="P:Tunynet.Common.Configuration.CommentSettings.ShowCommentCount">
            <summary>
            是否显示评论数
            </summary>
        </member>
        <member name="P:Tunynet.Common.Configuration.CommentSettings.EnableSupportOppose">
            <summary>
            是否启用顶踩
            </summary>
        </member>
        <member name="P:Tunynet.Common.Configuration.CommentSettings.ShowLowCommentOnLoad">
            <summary>
            二级回复是否在页面一加载的时候显示
            </summary>
        </member>
        <member name="P:Tunynet.Common.Configuration.CommentSettings.MaxCommentLength">
            <summary>
            评论录入的最大字数
            </summary>
        </member>
        <member name="P:Tunynet.Common.Configuration.CommentSettings.EnablePrivate">
            <summary>
            是否启用悄悄话
            </summary>
        </member>
        <member name="P:Tunynet.Common.Configuration.CommentSettings.AllowAnonymousComment">
            <summary>
            是否允许匿名用户评论
            </summary>
        </member>
        <member name="P:Tunynet.Common.Configuration.CommentSettings.EntryBoxAutoHeight">
            <summary>
            录入框是否自适应高度
            </summary>
        </member>
        <member name="P:Tunynet.Common.Configuration.CommentSettings.CommentClass">
            <summary>
            评论的样式
            </summary>
        </member>
        <member name="T:Tunynet.Common.Configuration.TenantCommentSettings">
            <summary>
            租户标识图配置类
            </summary>
        </member>
        <member name="M:Tunynet.Common.Configuration.TenantCommentSettings.#ctor(System.Xml.Linq.XElement)">
            <summary>
            构造器
            </summary>
            <param name="xElement">标识图配置节点</param>
        </member>
        <member name="M:Tunynet.Common.Configuration.TenantCommentSettings.GetRegisteredSettings(System.String)">
            <summary>
            获取注册的TenantCommentSettings
            </summary>
            <param name="tenantTypeId">租户类型Id</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Configuration.TenantCommentSettings.GetAll">
            <summary>
            获取所有注册的TenantCommentSettings
            </summary>
            <returns>TenantCommentSettings集合</returns>
        </member>
        <member name="M:Tunynet.Common.Configuration.TenantCommentSettings.RegisterSettings(System.Xml.Linq.XElement)">
            <summary>
            注册TenantCommentSettings
            </summary>
            <remarks>若xElement下有多个add节点，会同时注册多个TenantCommentSettings</remarks>
            <param name="xElement">标识图配置节点，会据此寻找其下所有子节点add</param>
        </member>
        <member name="P:Tunynet.Common.Configuration.TenantCommentSettings.TenantTypeId">
            <summary>
            租户类型Id
            </summary>
        </member>
        <member name="P:Tunynet.Common.Configuration.TenantCommentSettings.EnableRecommend">
            <summary>
            是否启用推荐
            </summary>
        </member>
        <member name="P:Tunynet.Common.Configuration.TenantCommentSettings.RecommendItemTypeId">
            <summary>
            推荐类型Id
            </summary>
        </member>
        <member name="P:Tunynet.Common.Configuration.TenantCommentSettings.EnableComment">
            <summary>
            是否显示评论
            </summary>
        </member>
        <member name="P:Tunynet.Common.Configuration.TenantCommentSettings.ShowCommentCount">
            <summary>
            是否显示评论数
            </summary>
        </member>
        <member name="P:Tunynet.Common.Configuration.TenantCommentSettings.EnableSupportOppose">
            <summary>
            是否启用顶踩
            </summary>
        </member>
        <member name="P:Tunynet.Common.Configuration.TenantCommentSettings.ShowLowCommentOnLoad">
            <summary>
            是否在页面加载的时候显示二级评论
            </summary>
        </member>
        <member name="P:Tunynet.Common.Configuration.TenantCommentSettings.MaxCommentLength">
            <summary>
            评论的最大字数
            </summary>
        </member>
        <member name="P:Tunynet.Common.Configuration.TenantCommentSettings.EnablePrivate">
            <summary>
            是否在页面加载的时候显示二级评论
            </summary>
        </member>
        <member name="P:Tunynet.Common.Configuration.TenantCommentSettings.AllowAnonymousComment">
            <summary>
            是否允许匿名用户评论
            </summary>
        </member>
        <member name="P:Tunynet.Common.Configuration.TenantCommentSettings.EntryBoxAutoHeight">
            <summary>
            是否允许匿名用户评论
            </summary>
        </member>
        <member name="T:Tunynet.Common.ICommentBodyProcessor">
            <summary>
            正文解析器
            </summary>
        </member>
        <member name="M:Tunynet.Common.ICommentBodyProcessor.Process(System.String,System.String,System.Int64,System.Int64)">
            <summary>
            解析内容
            </summary>
            <param name="body">被解析的正文</param>        
            <param name="tenantTypeId">租户类型Id</param>
            <param name="associateId">关联Id（例如：日志Id）</param>
            <param name="userId">作者Id</param>
            <returns>处理后的文本内容</returns>
        </member>
        <member name="T:Tunynet.Common.ICommentUrlGetter">
            <summary>
            评论相关Url获取器
            </summary>
        </member>
        <member name="M:Tunynet.Common.ICommentUrlGetter.GetCommentDetailUrl(System.Int64,System.Int64,System.Nullable{System.Int64})">
            <summary>
            获取评论详细显示url
            </summary>
            <remarks>如果无评论详细显示页面，则定位到评论列表的精确位置（需要考虑分页及性能，仅在真正需要浏览时才进行必要的计算）</remarks>
            <param name="commentedObjectId">被评论对象Id</param>
            <param name="id">评论Id</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.ICommentUrlGetter.GetCommentedObject(System.Int64)">
            <summary>
            获取被评论的对象实体
            </summary>
            <param name="commentedObjectId"></param>
            <returns></returns>
        </member>
        <member name="P:Tunynet.Common.ICommentUrlGetter.TenantTypeId">
            <summary>
            租户类型Id
            </summary>
        </member>
        <member name="T:Tunynet.Common.CountEntity">
            <summary>
            计数实体
            </summary>
        </member>
        <member name="M:Tunynet.Common.CountEntity.New">
            <summary>
            新建实体时使用
            </summary>
        </member>
        <member name="P:Tunynet.Common.CountEntity.CountId">
             <summary>
            id
             </summary>
        </member>
        <member name="P:Tunynet.Common.CountEntity.OwnerId">
             <summary>
            拥有者id
             </summary>
        </member>
        <member name="P:Tunynet.Common.CountEntity.ObjectId">
             <summary>
            计数对象id
             </summary>
        </member>
        <member name="P:Tunynet.Common.CountEntity.CountType">
             <summary>
            计数类型
             </summary>
        </member>
        <member name="P:Tunynet.Common.CountEntity.StatisticsCount">
             <summary>
            计数
             </summary>
        </member>
        <member name="T:Tunynet.Common.CountPerDayEntity">
            <summary>
            每日计数实体
            </summary>
        </member>
        <member name="M:Tunynet.Common.CountPerDayEntity.New">
            <summary>
            新建实体时使用
            </summary>
        </member>
        <member name="P:Tunynet.Common.CountPerDayEntity.Id">
             <summary>
            id
             </summary>
        </member>
        <member name="P:Tunynet.Common.CountPerDayEntity.OwnerId">
             <summary>
            拥有者id
             </summary>
        </member>
        <member name="P:Tunynet.Common.CountPerDayEntity.ObjectId">
             <summary>
            计数对象id
             </summary>
        </member>
        <member name="P:Tunynet.Common.CountPerDayEntity.ReferenceYear">
             <summary>
            统计日期的年份
             </summary>
        </member>
        <member name="P:Tunynet.Common.CountPerDayEntity.ReferenceMonth">
             <summary>
            统计日期的月份
             </summary>
        </member>
        <member name="P:Tunynet.Common.CountPerDayEntity.ReferenceDay">
             <summary>
            统计日期的天
             </summary>
        </member>
        <member name="P:Tunynet.Common.CountPerDayEntity.StatisticsCount">
             <summary>
            当天计数
             </summary>
        </member>
        <member name="P:Tunynet.Common.CountPerDayEntity.CountType">
             <summary>
            计数类型
             </summary>
        </member>
        <member name="P:Tunynet.Common.CountPerDayEntity.ReferenceDate">
            <summary>
            统计日期
            </summary>
        </member>
        <member name="T:Tunynet.Common.CountQueueItem">
            <summary>
            计数队列项
            </summary>
        </member>
        <member name="M:Tunynet.Common.CountQueueItem.#ctor(System.String,System.Int64,System.Int64,System.Int32)">
            <summary>
            构造器
            </summary>
            <param name="countType">计数类型</param>
            <param name="objectId">计数对象Id</param>
            <param name="ownerId">拥有者</param>
            <param name="statisticsCount">当天计数</param>
        </member>
        <member name="M:Tunynet.Common.CountQueueItem.AsCountEntity">
            <summary>
            转为计数实体
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.CountQueueItem.AsCountPerDayEntity">
            <summary>
            转为每日计数实体
            </summary>
            <returns></returns>
        </member>
        <member name="P:Tunynet.Common.CountQueueItem.ObjectId">
            <summary>
            计数对象Id
            </summary>
        </member>
        <member name="P:Tunynet.Common.CountQueueItem.CountType">
            <summary>
            计数类型
            </summary>
        </member>
        <member name="P:Tunynet.Common.CountQueueItem.OwnerId">
            <summary>
            拥有者Id
            </summary>
        </member>
        <member name="P:Tunynet.Common.CountQueueItem.StatisticsCount">
            <summary>
            计数
            </summary>
        </member>
        <member name="T:Tunynet.Common.CountService">
            <summary>
            附件业务逻辑类
            </summary>
        </member>
        <member name="M:Tunynet.Common.CountService.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Tunynet.Common.CountService.#ctor(Tunynet.Common.ICountRepository,System.String)">
            <summary>
            可设置repository的构造函数（主要用于测试用例）
            </summary>
        </member>
        <member name="M:Tunynet.Common.CountService.RegisterCounts">
            <summary>
            注册计数
            </summary>
        </member>
        <member name="M:Tunynet.Common.CountService.RegisterCountPerDay">
            <summary>
            注册每日计数
            </summary>
        </member>
        <member name="M:Tunynet.Common.CountService.RegisterStageCount(System.String,System.Int32[])">
            <summary>
            注册阶段计数
            </summary>
            <param name="countType">基础阶段计数</param>
            <param name="stageDays">阶段计数统计天数集合</param>
        </member>
        <member name="M:Tunynet.Common.CountService.ChangeCount(System.String,System.Int64,System.Int64,System.Int32,System.Boolean)">
            <summary>
            更新计数
            </summary>
            <param name="countType">计数类型（不允许是阶段计数类型）</param>
            <param name="objectId">计数对象Id</param>
            <param name="ownerId">拥有者Id</param>
            <param name="changeCount">变化数</param>
            <param name="isRealTime">是否立即更新显示计数</param>
            <remarks>若同时使用了每日计数，则会同时更新每日计数，以及该计数类型相关的阶段计数</remarks>
        </member>
        <member name="M:Tunynet.Common.CountService.Delete(System.Int64)">
            <summary>
            删除计数
            </summary>
            <param name="objectId">计数对象Id</param>
            <returns>删除成功返回true，否则返回false</returns>
        </member>
        <member name="M:Tunynet.Common.CountService.Get(System.String,System.Int64)">
            <summary>
            获取计数
            </summary>
            <param name="countType">计数类型</param>
            <param name="objectId">计数对象Id</param>
        </member>
        <member name="M:Tunynet.Common.CountService.Gets(System.String,System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            获取计数集合
            </summary>
            <param name="countType">计数类型</param>
            <param name="objectIds">计数对象Id集合</param>
        </member>
        <member name="M:Tunynet.Common.CountService.GetStageCount(System.String,System.Int32,System.Int64)">
            <summary>
            获取阶段计数
            </summary>
            <param name="countType">计数类型</param>
            <param name="dayCount">阶段计数统计天数，一定要和注册时的天数进行对应才能正常获取到</param>
            <param name="objectId">计数对象Id</param>
        </member>
        <member name="M:Tunynet.Common.CountService.GetAllCountPerDays(System.String)">
            <summary>
            获取计数对象Id的所有每天计数记录
            </summary>
            <param name="countType">计数类型</param>
            <returns>每天计数记录集合</returns>
        </member>
        <member name="M:Tunynet.Common.CountService.GetTops(System.Int32,System.String,System.Nullable{System.Int32},System.Nullable{System.Int64})">
            <summary>
            获取计数对象Id排行集合
            </summary>
            <param name="topNumber"></param>
            <param name="countType">计数类型</param>
            <param name="dayCount">阶段计数类型的天数（非阶段计数类型请输入null）</param>
            <param name="ownerId">拥有者Id</param>
            <returns>计数对象Id集合</returns>
        </member>
        <member name="M:Tunynet.Common.CountService.Gets(System.String,System.Nullable{System.Int32},System.Nullable{System.Int64},System.Nullable{System.Int32})">
            <summary>
            获取计数对象Id排行分页集合
            </summary>
            <param name="countType">计数类型</param>
            <param name="dayCount">阶段计数类型的天数（非阶段计数类型请输入null）</param>
            <param name="ownerId">拥有者Id</param>
            <param name="pageIndex">页码</param>
        </member>
        <member name="M:Tunynet.Common.CountService.GetTableName_Counts">
            <summary>
            获取计数表名
            </summary>
            <returns>计数表名</returns>
        </member>
        <member name="M:Tunynet.Common.CountService.GetTableName_CountsPerDay">
            <summary>
            获取每日计数表名
            </summary>
            <returns>每日计数表名</returns>
        </member>
        <member name="M:Tunynet.Common.CountService.GetStageCountType(System.String,System.Int32)">
            <summary>
            获取阶段计数类型
            </summary>
            <param name="countType">计数类型</param>
            <param name="dayCount">阶段计数统计天数，一定要和注册时的天数进行对应才能正常获取到</param>
        </member>
        <member name="T:Tunynet.Common.CountTypes">
            <summary>
            计数类型
            </summary>
        </member>
        <member name="M:Tunynet.Common.CountTypes.Instance">
            <summary>
            获取单例
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.CountTypes.HitTimes">
            <summary>
            浏览计数
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.CountTypes.DownloadCount">
            <summary>
            下载计数
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.CountTypes.CommentCount">
            <summary>
            评论数
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.CountTypes.ReputationPointsCounts">
            <summary>
            威望数
            </summary>
            <returns></returns>
        </member>
        <member name="T:Tunynet.Common.CountRepository">
            <summary>
            Count仓储
            </summary>
        </member>
        <member name="T:Tunynet.Common.ICountRepository">
            <summary>
            计数仓储接口
            </summary>
        </member>
        <member name="M:Tunynet.Common.ICountRepository.CheckCountTable(System.String)">
            <summary>
            注册计数
            </summary>
        </member>
        <member name="M:Tunynet.Common.ICountRepository.CheckCountPerDayTable(System.String)">
            <summary>
            注册每日计数
            </summary>
            <param name="tenantTypeId">租户类型Id</param>
        </member>
        <member name="M:Tunynet.Common.ICountRepository.ChangeCount(System.String,System.String,System.Int64,System.Int64,System.Int32,System.Collections.Generic.IList{System.String},System.Boolean)">
            <summary>
            调整计数
            </summary>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="countType">计数类型</param>
            <param name="objectId">计数对象Id</param>
            <param name="ownerId">ownerId</param>
            <param name="changeCount">变化数</param>
            <param name="stageCountTypes">阶段计数集合</param>
            <param name="isRealTime">是否立即更新显示计数</param>
        </member>
        <member name="M:Tunynet.Common.ICountRepository.ExecQueue">
            <summary>
            执行队列
            </summary>
        </member>
        <member name="M:Tunynet.Common.ICountRepository.UpdateStageCountPerDay(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Int32})">
            <summary>
            批量更新计数表中的阶段计数
            </summary>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="countType">计数类型</param>
            <param name="countType2Days">阶段计数类型-统计天数字典集合</param>
        </member>
        <member name="M:Tunynet.Common.ICountRepository.DeleteTrashCountPerDays(System.String,System.String,System.Int32)">
            <summary>
            删除每日计数表中的过期的历史计数记录
            </summary>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="countType">计数类型</param>
            <param name="maxValue">保留记录的最大天数</param>
        </member>
        <member name="M:Tunynet.Common.ICountRepository.Get(System.String,System.String,System.Int64)">
            <summary>
            获取计数
            </summary>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="countType">计数类型</param>
            <param name="objectId">计数对象Id</param>
        </member>
        <member name="M:Tunynet.Common.ICountRepository.Delete(System.String,System.Int64)">
            <summary>
            删除计数
            </summary>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="objectId">计数对象Id</param>
            <returns>删除成功返回true，否则返回false</returns>
        </member>
        <member name="M:Tunynet.Common.ICountRepository.GetTops(System.Int32,System.String,System.String,System.Nullable{System.Int64})">
            <summary>
            获取计数对象Id集合
            </summary>
            <param name="topNumber">前几条</param>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="countType">计数类型</param>
            <param name="ownerId">拥有者Id</param>
            <returns>计数对象Id集合</returns>
        </member>
        <member name="M:Tunynet.Common.ICountRepository.Gets(System.String,System.String,System.Nullable{System.Int64},System.Int32)">
            <summary>
            获取技术
            </summary>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="countType">技术类型</param>
            <param name="ownerId">拥有者id</param>
            <param name="pageIndex">页码</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.ICountRepository.GetAllCountPerDays(System.String,System.String)">
            <summary>
            获取计数对象Id的所有每天计数记录
            </summary>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="countType">计数类型</param>
            <returns>每天计数记录集合</returns>
        </member>
        <member name="M:Tunynet.Common.ICountRepository.GetTableName_Counts(System.String)">
            <summary>
            获取计数表名
            </summary>
            <param name="tenantTypeId">租户类型Id</param>
            <returns>计数表名</returns>
        </member>
        <member name="M:Tunynet.Common.ICountRepository.GetTableName_CountsPerDay(System.String)">
            <summary>
            获取每日计数表名
            </summary>
            <param name="tenantTypeId">租户类型Id</param>
            <returns>每日计数表名</returns>
        </member>
        <member name="M:Tunynet.Common.ICountRepository.Gets(System.String,System.String,System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            获取计数集合
            </summary>
            <param name="countType">计数类型</param>
            <param name="objectIds">计数对象Id集合</param>
        </member>
        <member name="M:Tunynet.Common.CountRepository.#ctor">
            <summary>
            无参构造器
            </summary>
        </member>
        <member name="M:Tunynet.Common.CountRepository.#ctor(System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Collections.Generic.Queue{Tunynet.Common.CountQueueItem}},System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Collections.Generic.Queue{Tunynet.Common.CountQueueItem}})">
            <summary>
            无参构造器
            </summary>
            <remarks>仅用于单元测试</remarks>
        </member>
        <member name="M:Tunynet.Common.CountRepository.CreateDAO">
            <summary>
            默认Database实例
            </summary>
        </member>
        <member name="M:Tunynet.Common.CountRepository.CheckCountTable(System.String)">
            <summary>
            注册计数
            </summary>
        </member>
        <member name="M:Tunynet.Common.CountRepository.CheckCountPerDayTable(System.String)">
            <summary>
            注册每日计数
            </summary>
            <param name="tenantTypeId">租户类型Id</param>
        </member>
        <member name="M:Tunynet.Common.CountRepository.ChangeCount(System.String,System.String,System.Int64,System.Int64,System.Int32,System.Collections.Generic.IList{System.String},System.Boolean)">
            <summary>
            调整计数
            </summary>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="countType">计数类型</param>
            <param name="objectId">计数对象Id</param>
            <param name="ownerId">ownerId</param>
            <param name="changeCount">变化数</param>
            <param name="stageCountTypes">阶段计数集合</param>
            <param name="isRealTime">是否立即更新显示计数</param>
        </member>
        <member name="M:Tunynet.Common.CountRepository.ExecQueue">
            <summary>
            执行队列
            </summary>
        </member>
        <member name="M:Tunynet.Common.CountRepository.UpdateStageCountPerDay(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Int32})">
            <summary>
            批量更新计数表中的阶段计数
            </summary>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="countType">计数类型</param>
            <param name="countType2Days"> 计数类型 -统计天数字典集合</param>
        </member>
        <member name="M:Tunynet.Common.CountRepository.DeleteTrashCountPerDays(System.String,System.String,System.Int32)">
            <summary>
            删除每日计数表中的过期的历史计数记录
            </summary>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="countType">计数类型</param>
            <param name="maxValue">保留记录的最大天数</param>
        </member>
        <member name="M:Tunynet.Common.CountRepository.DeleteTrashCount">
            <summary>
            删除垃圾数据
            </summary>
        </member>
        <member name="M:Tunynet.Common.CountRepository.Get(System.String,System.String,System.Int64)">
            <summary>
            获取计数
            </summary>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="countType">计数类型</param>
            <param name="objectId">计数对象Id</param>
        </member>
        <member name="M:Tunynet.Common.CountRepository.Gets(System.String,System.String,System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            获取计数集合
            </summary>
            <param name="countType">计数类型</param>
            <param name="objectIds">计数对象Id集合</param>
        </member>
        <member name="M:Tunynet.Common.CountRepository.Delete(System.String,System.Int64)">
            <summary>
            删除计数
            </summary>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="objectId">计数对象Id</param>
            <returns>删除成功返回true，否则返回false</returns>
        </member>
        <member name="M:Tunynet.Common.CountRepository.GetAllCountPerDays(System.String,System.String)">
            <summary>
            获取计数对象Id的所有每天计数记录
            </summary>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="countType">计数类型</param>
            <returns>每天计数记录集合</returns>
        </member>
        <member name="M:Tunynet.Common.CountRepository.GetTops(System.Int32,System.String,System.String,System.Nullable{System.Int64})">
            <summary>
            获取计数对象Id集合
            </summary>
            <remarks>
            一次性取出前SecondaryMaxRecords条记录
            </remarks>
            <param name="topNumber">准备获取的条数</param>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="countType">计数类型</param>
            <param name="ownerId">拥有者Id</param>
            <returns>计数对象Id集合</returns>
        </member>
        <member name="M:Tunynet.Common.CountRepository.Gets(System.String,System.String,System.Nullable{System.Int64},System.Int32)">
            <summary>
            获取计数
            </summary>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="countType">计数类型</param>
            <param name="ownerId">拥有者Id</param>
            <param name="pageIndex">页码数</param>
        </member>
        <member name="M:Tunynet.Common.CountRepository.GetTableName_Counts(System.String)">
            <summary>
            获取计数表名
            </summary>
            <param name="tenantTypeId">租户类型Id</param>
            <returns>计数表名</returns>
        </member>
        <member name="M:Tunynet.Common.CountRepository.GetTableName_CountsPerDay(System.String)">
            <summary>
            获取每日计数表名
            </summary>
            <param name="tenantTypeId">租户类型Id</param>
            <returns>每日计数表名</returns>
        </member>
        <member name="M:Tunynet.Common.CountRepository.GetsSql(System.String,System.String,System.Nullable{System.Int64})">
            <summary>
            获取计数
            </summary>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="countType">计数类型</param>
            <param name="ownerId">拥有者Id</param>
        </member>
        <member name="M:Tunynet.Common.CountRepository.GetCacheKey_Counts(System.String,System.String,System.Nullable{System.Int64})">
            <summary>
            获取计数Id集合的CacheKey
            </summary>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="countType">计数类型</param>
            <param name="ownerId">拥有者Id</param>
        </member>
        <member name="M:Tunynet.Common.CountRepository.GetCacheKey_Count(System.String,System.String,System.Int64)">
            <summary>
            获取计数的CacheKey
            </summary>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="countType">计数类型</param>
            <param name="objectId">计数类型id</param>
            <returns></returns>
        </member>
        <member name="P:Tunynet.Common.CountRepository.CacheablePageCount">
            <summary>
            可缓存的列表缓存页数
            </summary>
        </member>
        <member name="P:Tunynet.Common.CountRepository.PrimaryMaxRecords">
            <summary>
            主流查询最大允许返回记录数
            </summary>
        </member>
        <member name="P:Tunynet.Common.CountRepository.SecondaryMaxRecords">
            <summary>
            非主流查询最大允许返回记录数
            </summary>
            <remarks>
            例如：排行数据
            </remarks>
        </member>
        <member name="T:Tunynet.Common.StageCountTypeManager">
            <summary>
            阶段计数管理类
            </summary>
        </member>
        <member name="M:Tunynet.Common.StageCountTypeManager.Instance(System.String)">
            <summary>
            通过tenantTypeId获取StageCountTypeManager实例
            </summary>
            <param name="tenantTypeId">tenantTypeId</param>
        </member>
        <member name="M:Tunynet.Common.StageCountTypeManager.AddStageCounts(System.String,System.Int32[])">
            <summary>
            注册阶段计数
            </summary>
            <param name="baseCountType">基础阶段计数</param>
            <param name="stageDays">阶段计数统计天数集合</param>
        </member>
        <member name="M:Tunynet.Common.StageCountTypeManager.GetStageCountType(System.String,System.Int32)">
            <summary>
            解析阶段计数的countType
            </summary>
            <param name="baseCountType">基础阶段计数</param>
            <param name="dayCount">统计天数</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.StageCountTypeManager.GetStageCountTypes(System.String)">
            <summary>
            获取所有阶段计数类型
            </summary>
            <param name="baseCountType">基础阶段计数</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.StageCountTypeManager.GetAllStageCountTypes">
            <summary>
            获取所有阶段计数类型
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.StageCountTypeManager.GetMaxDayCount(System.String)">
            <summary>
            获取每日计数记录的最大保留天数
            </summary>
            <param name="baseCountType">基础阶段计数</param>
        </member>
        <member name="M:Tunynet.Common.StageCountTypeManager.GetAllTenantTypeIds">
            <summary>
            获取所有使用阶段计数的租户类型Id集合
            </summary>
            <returns></returns>
        </member>
        <member name="T:Tunynet.Common.ExecCountQueueTask">
            <summary>
            执行计数队列任务
            </summary>
        </member>
        <member name="M:Tunynet.Common.ExecCountQueueTask.Execute(Tunynet.Tasks.TaskDetail)">
            <summary>
            任务执行的内容
            </summary>
            <param name="taskDetail">任务配置状态信息</param>
        </member>
        <member name="T:Tunynet.Common.UpdateStageCountTask">
            <summary>
            每天批量更新阶段计数任务
            </summary>
        </member>
        <member name="M:Tunynet.Common.UpdateStageCountTask.Execute(Tunynet.Tasks.TaskDetail)">
            <summary>
            任务执行的内容
            </summary>
            <param name="taskDetail">任务配置状态信息</param>
        </member>
        <member name="T:Tunynet.Common.Emotion">
            <summary>
            表情实体类
            </summary>
        </member>
        <member name="M:Tunynet.Common.Emotion.New(System.Xml.Linq.XElement)">
            <summary>
            创建实体示例
            </summary>
            <param name="xElement"></param>
            <returns></returns>
        </member>
        <member name="P:Tunynet.Common.Emotion.Code">
            <summary>
            表情代码
            </summary>
        </member>
        <member name="P:Tunynet.Common.Emotion.FileName">
            <summary>
            表情图片文件名
            </summary>
        </member>
        <member name="P:Tunynet.Common.Emotion.Description">
            <summary>
            表情描述
            </summary>
        </member>
        <member name="P:Tunynet.Common.Emotion.FormatedCode">
            <summary>
            用于在内容中表示的表情符号
            </summary>
        </member>
        <member name="P:Tunynet.Common.Emotion.ImageUrl">
            <summary>
            表情图片url
            </summary>
        </member>
        <member name="T:Tunynet.Common.EmotionCategory">
            <summary>
            表情图片类别实体
            </summary>
        </member>
        <member name="M:Tunynet.Common.EmotionCategory.New(System.String)">
            <summary>
            创建实体示例
            </summary>
            <param name="directoryName">表情包目录名</param>
        </member>
        <member name="M:Tunynet.Common.EmotionCategory.InitPropertyValue(System.Xml.Linq.XElement,System.String)">
             <summary>
            初始化非数据库获取的属性值 
             </summary>
             <param name="xElement">表情分类配置节点</param>
             <param name="physicalDirectoryPath">表情包物理目录</param>
        </member>
        <member name="P:Tunynet.Common.EmotionCategory.DirectoryName">
             <summary>
            目录名
             </summary>
        </member>
        <member name="P:Tunynet.Common.EmotionCategory.CodePrefix">
            <summary>
            用来区分表情不同分组表情的表情代码前缀
            </summary>
        </member>
        <member name="P:Tunynet.Common.EmotionCategory.CategoryName">
            <summary>
            类别名称
            </summary>
        </member>
        <member name="P:Tunynet.Common.EmotionCategory.Description">
            <summary>
            类别描述
            </summary>
        </member>
        <member name="P:Tunynet.Common.EmotionCategory.EmotionMaxHeight">
            <summary>
            表情最大高度
            </summary>
        </member>
        <member name="P:Tunynet.Common.EmotionCategory.EmotionMaxWidth">
            <summary>
            表情最大宽度
            </summary>
        </member>
        <member name="P:Tunynet.Common.EmotionCategory.DisplayOrder">
            <summary>
            显示顺序
            </summary>
        </member>
        <member name="P:Tunynet.Common.EmotionCategory.IsEnabled">
            <summary>
            是否启用
            </summary>
        </member>
        <member name="P:Tunynet.Common.EmotionCategory.PhysicalDirectoryPath">
            <summary>
             物理目录
            </summary>
        </member>
        <member name="P:Tunynet.Common.EmotionCategory.Emotions">
            <summary>
            表情图片
            </summary>
        </member>
        <member name="T:Tunynet.Common.EmotionCategory.EmotionCategoryComparer">
            <summary>
            用于EmotionCategory排序
            </summary>
        </member>
        <member name="T:Tunynet.Common.EmotionService">
            <summary>
            表情业务逻辑类
            </summary>
        </member>
        <member name="M:Tunynet.Common.EmotionService.#ctor">
            <summary>
            表情管理构造器
            </summary>
        </member>
        <member name="M:Tunynet.Common.EmotionService.DeleteEmoticonCategory(System.String)">
            <summary>
            删除表情分组
            </summary>
            <param name="directoryName">表情分类目录名</param>
        </member>
        <member name="M:Tunynet.Common.EmotionService.UpdateEmotionCategory(Tunynet.Common.EmotionCategory)">
            <summary>
            更新表情分类
            </summary>
            <param name="emotionCategory">表情分类</param>
        </member>
        <member name="M:Tunynet.Common.EmotionService.GetEmotionCategory(System.String)">
            <summary>
            根据CategoryID获取EmotionCategory
            </summary>
            <param name="directoryName">表情分类目录名</param>
        </member>
        <member name="M:Tunynet.Common.EmotionService.GetEmotionCategories(System.Boolean)">
            <summary>
            获取所有表情分组
            </summary>
            <param name="isEnabled">是否只获取启用的标签</param>
        </member>
        <member name="M:Tunynet.Common.EmotionService.ExtractEmoticon(System.String,System.IO.Stream)">
            <summary>
            提取表情
            </summary>
            <param name="fileName">表情包文件名</param>
            <param name="fileStream">表情包文件流</param>
        </member>
        <member name="M:Tunynet.Common.EmotionService.LoadEmoticons(Tunynet.Common.EmotionCategory)">
            <summary>
            加载表情分类下的表情
            </summary>
            <param name="emotionCategory">表情分类</param>
        </member>
        <member name="M:Tunynet.Common.EmotionService.SaveEmoticonPackage(System.String,System.String,System.IO.Stream)">
            <summary>
            保存表情包
            </summary>
            <param name="fileName">表情包文件名</param>
            <param name="fullPath">文件存储路径</param>
            <param name="fileStream">表情包文件流</param>
        </member>
        <member name="M:Tunynet.Common.EmotionService.PopulateEmotionCategory(System.String,System.String)">
            <summary>
            组装表情分类实体
            </summary>
            <param name="directoryName">目录名</param>
            <param name="fullPath">表情包目录</param>
        </member>
        <member name="M:Tunynet.Common.EmotionService.PopulateEmotion(Tunynet.Common.EmotionCategory,System.Xml.Linq.XElement)">
            <summary>
            组装表情实体
            </summary>
            <param name="category">表情分类</param>
            <param name="categoryElement">表情分类配置节点</param>
        </member>
        <member name="M:Tunynet.Common.EmotionService.PrepareTransformsInfo(Tunynet.Common.EmotionCategory)">
            <summary>
            将所有表情写入集合中供下面的转换
            </summary>
            <param name="category">表情分类</param>
        </member>
        <member name="M:Tunynet.Common.EmotionService.EmoticonTransforms(System.String)">
            <summary>
            以含表情图片的html代码替换字符串formattedPost中的SmileyCode
            </summary>
            <param name="formattedPost">被替换的字符串</param>
        </member>
        <member name="T:Tunynet.Common.EmotionSettings">
            <summary>
            站点Email设置
            </summary>
        </member>
        <member name="P:Tunynet.Common.EmotionSettings.EmoticonPath">
            <summary>
            表情图片的虚拟路径，例如：
            ~/Emotions
            </summary>
        </member>
        <member name="P:Tunynet.Common.EmotionSettings.EnableDirectlyUrl">
            <summary>
            是否启用直连Url
            </summary>
        </member>
        <member name="P:Tunynet.Common.EmotionSettings.DirectlyRootUrl">
            <summary>
            直连Url
            </summary>
        </member>
        <member name="T:Tunynet.Common.Rating">
            <summary>
            星级评价实体
            </summary>
        </member>
        <member name="M:Tunynet.Common.Rating.New">
            <summary>
            新建实体时使用
            </summary>
            <returns></returns>
        </member>
        <member name="P:Tunynet.Common.Rating.Id">
             <summary>
            Id
             </summary>
        </member>
        <member name="P:Tunynet.Common.Rating.ObjectId">
             <summary>
            操作对象Id
             </summary>
        </member>
        <member name="P:Tunynet.Common.Rating.TenantTypeId">
             <summary>
            租户类型Id
             </summary>
        </member>
        <member name="P:Tunynet.Common.Rating.OwnerId">
             <summary>
            拥有者Id
             </summary>
        </member>
        <member name="P:Tunynet.Common.Rating.RateCount">
             <summary>
            评价总数
             </summary>
        </member>
        <member name="P:Tunynet.Common.Rating.Comprehensive">
             <summary>
            评价结果
             </summary>
        </member>
        <member name="P:Tunynet.Common.Rating.RateSum">
            <summary>
            评价总分值
            </summary>
        </member>
        <member name="T:Tunynet.Common.RatingGrade">
            <summary>
            星级评级等级统计实体
            </summary>
        </member>
        <member name="M:Tunynet.Common.RatingGrade.New">
            <summary>
            新建实体时使用
            </summary>
            <returns></returns>
        </member>
        <member name="P:Tunynet.Common.RatingGrade.Id">
             <summary>
            Id
             </summary>
        </member>
        <member name="P:Tunynet.Common.RatingGrade.ObjectId">
             <summary>
            操作对象Id
             </summary>
        </member>
        <member name="P:Tunynet.Common.RatingGrade.TenantTypeId">
             <summary>
            租户类型Id
             </summary>
        </member>
        <member name="P:Tunynet.Common.RatingGrade.RateNumber">
             <summary>
            星级评价等级类型
             </summary>
        </member>
        <member name="P:Tunynet.Common.RatingGrade.RateCount">
             <summary>
            星级统计总数
             </summary>
        </member>
        <member name="T:Tunynet.Common.RatingRecord">
            <summary>
            星级评价记录实体
            </summary>
        </member>
        <member name="M:Tunynet.Common.RatingRecord.New">
            <summary>
            新建实体时使用
            </summary>
        </member>
        <member name="P:Tunynet.Common.RatingRecord.Id">
             <summary>
            Id
             </summary>
        </member>
        <member name="P:Tunynet.Common.RatingRecord.ObjectId">
             <summary>
            操作对象Id
             </summary>
        </member>
        <member name="P:Tunynet.Common.RatingRecord.TenantTypeId">
             <summary>
            租户类型Id
             </summary>
        </member>
        <member name="P:Tunynet.Common.RatingRecord.RateNumber">
             <summary>
            星级评价等级类型
             </summary>
        </member>
        <member name="P:Tunynet.Common.RatingRecord.UserId">
             <summary>
            用户Id
             </summary>
        </member>
        <member name="P:Tunynet.Common.RatingRecord.DateCreated">
             <summary>
            创建日期
             </summary>
        </member>
        <member name="T:Tunynet.Common.RatingService">
            <summary>
            星级评价业务逻辑
            </summary>
        </member>
        <member name="M:Tunynet.Common.RatingService.#ctor(System.String)">
            <summary>
            构造器
            </summary>
            <param name="tenantTypeId">租户类型Id</param>
        </member>
        <member name="M:Tunynet.Common.RatingService.#ctor(System.String,Tunynet.Common.IRatingGradeRepository,Tunynet.Common.IRatingRecordRepository,Tunynet.Common.IRatingRepository)">
            <summary>
            测试用构造器
            </summary>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="ratingGradeRepository">评价选项数据访问</param>
            <param name="ratingRecordRepository">评价操作记录数据访问</param>
            <param name="ratingRepository">评价信息数据访问</param>
        </member>
        <member name="M:Tunynet.Common.RatingService.Delete(System.Int64)">
            <summary>
            删除指定操作Id的评价信息
            </summary>
            <param name="objectId">操作Id</param>
        </member>
        <member name="M:Tunynet.Common.RatingService.Get(System.Int64)">
            <summary>
            获取星级评价信息
            </summary>
            <param name="objectId">操作用户Id</param>
        </member>
        <member name="M:Tunynet.Common.RatingService.Rated(System.Int64,System.Int64,System.Int32,System.Int64)">
            <summary>
            对操作对象进行星级评价操作
            </summary>
            <param name="objectId">操作对象Id</param>
            <param name="userId">用户的UserId</param>
            <param name="rateNumber">星级类型</param>
            <param name="ownerId">拥有者Id</param>
        </member>
        <member name="M:Tunynet.Common.RatingService.IsRated(System.Int64,System.Int64)">
            <summary>
            用户当前的操作
            </summary>
            <param name="objectId">操作对象Id</param>
            <param name="userId">用户的userId</param>
        </member>
        <member name="M:Tunynet.Common.RatingService.GetTopObjectIds(System.Int32,System.Int64)">
            <summary>
            获取前N条操作对象的Id集合
            </summary>
            <param name="topNumber">前N条</param>
            <param name="ownerId">拥有者Id</param>
        </member>
        <member name="M:Tunynet.Common.RatingService.GetPagingObjectIds(System.Int32,System.Int64)">
            <summary>
            获取操作对象Id集合
            </summary>
            <param name="pageIndex">页码</param>
            <param name="ownerId">拥有者Id</param>
        </member>
        <member name="M:Tunynet.Common.RatingService.ClearByUser(System.Int64)">
            <summary>
            删除用户的记录
            </summary>
            <param name="userId">用户Id</param>
        </member>
        <member name="M:Tunynet.Common.RatingService.GetRatingCount(System.Int64)">
            <summary>
            获取评价人数
            </summary>
            <param name="objectId">评分对象</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.RatingService.GetRatingResult(System.Int64)">
            <summary>
            获取评分结果
            </summary>
            <param name="objectId">评分对象</param>
            <param name="tenantTypeId">租户Id</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.RatingService.GetRatingResultForVideo(System.Int64)">
            <summary>
            获取评分结果(统计评论评分)
            </summary>
            <param name="ownerId">拥有者Id</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.RatingService.CleanRatingRecords(System.Int32)">
            <summary>
            删除N天前的评价记录
            </summary>
            <param name="beforeDays">间隔天数</param>
        </member>
        <member name="M:Tunynet.Common.RatingService.GetTopRatingRecords(System.Int64,System.Nullable{System.Int32},System.Int32)">
            <summary>
            获取前N条用户的星级评价记录信息
            </summary>
            <param name="objectId">操作Id</param>
            <param name="rateNumber"> 星级类型</param>
            <param name="topNumber">前N条</param>
        </member>
        <member name="M:Tunynet.Common.RatingService.GetUserRatingRecords(System.Int64,System.Int64)">
            <summary>
            用户的星级评价记录信息
            </summary>
            <param name="objectId">操作对象Id</param>
            <param name="userId">用户Id</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.RatingService.GetRatingGrades(System.Int64)">
            <summary>
            获取指定评价选项信息
            </summary>
            <param name="objectId">评价数据Id</param>
        </member>
        <member name="T:Tunynet.Common.RatingSettings">
            <summary>
            星级评价的配置设置
            </summary>
        </member>
        <member name="P:Tunynet.Common.RatingSettings.IsModify">
            <summary>
            是否允许修改星级评价
            </summary>
        </member>
        <member name="T:Tunynet.Common.IRatingGradeRepository">
            <summary>
            星级统计数据访问接口
            </summary>
        </member>
        <member name="M:Tunynet.Common.IRatingGradeRepository.GetRatingGrades(System.Int64,System.String)">
            <summary>
            获取指定评价选项信息
            </summary>
            <param name="objectId">评价数据Id</param>
            <param name="tenantTypeId">租户类型Id</param>
        </member>
        <member name="M:Tunynet.Common.IRatingGradeRepository.ClearRatingGradesOfObjectId(System.Int64,System.String)">
            <summary>
            清空相关联的等级统计信息
            </summary>
            <param name="objectId"> 操作Id</param>
            <param name="tenantTypeId">租户类型Id</param>
        </member>
        <member name="T:Tunynet.Common.IRatingRecordRepository">
            <summary>
            星级评价记录数据访问接口
            </summary>
        </member>
        <member name="M:Tunynet.Common.IRatingRecordRepository.ClearByUser(System.Int64)">
            <summary>
            删除用户的记录
            </summary>
            <param name="userId"></param>
        </member>
        <member name="M:Tunynet.Common.IRatingRecordRepository.Clean(System.Nullable{System.Int32})">
            <summary>
            删除N天前的评价记录
            </summary>
            <param name="beforeDays">间隔天数</param>
        </member>
        <member name="M:Tunynet.Common.IRatingRecordRepository.GetTopRatingRecords(System.Int64,System.String,System.Nullable{System.Int32},System.Int32)">
             <summary>
            获取前N条用户的星级评价记录信息
             </summary>
             <param name="objectId"> 操作Id</param>
             <param name="tentanTypeId">操作类型Id</param>
             <param name="rateNumber">等级类型</param>
             <param name="topNumber">前N条</param>
        </member>
        <member name="M:Tunynet.Common.IRatingRecordRepository.ClearRatingRecordsOfObjectId(System.Int64,System.String)">
            <summary>
            清空相关联评价记录
            </summary>
            <param name="objectId">操作Id</param>
            <param name="tenantTypeId">租户类型Id</param>
        </member>
        <member name="M:Tunynet.Common.IRatingRecordRepository.GetUserRatingRecords(System.Int64,System.String,System.Int64)">
            <summary>
            用户的星级评价记录信息
            </summary>
            <param name="objectId">操作对象Id</param>
            <param name="userId">用户Id</param>
            <returns></returns>
        </member>
        <member name="T:Tunynet.Common.IRatingRepository">
            <summary>
            星级评价数据访问接口
            </summary>
        </member>
        <member name="M:Tunynet.Common.IRatingRepository.Get(System.Int64,System.String)">
            <summary>
            获取星级评价信息
            </summary>
            <param name="objectId">操作对象</param>
            <param name="tenantTypeId">租户类型Id</param>
        </member>
        <member name="M:Tunynet.Common.IRatingRepository.GetTopObjectIds(System.Int32,System.String,System.Int64)">
            <summary>
            获取前N条操作对象Id
            </summary>
            <param name="topNumber">获取前N条</param>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="ownerId">拥有者Id</param>
        </member>
        <member name="M:Tunynet.Common.IRatingRepository.Rated(System.Int64,System.String,System.Int64,System.Int32,System.Int64)">
            <summary>
            对操作对象进行星级评价操作
            </summary>
            <param name="objectId">操作对象Id</param>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="userId">用户的UserId</param>
            <param name="rateNumber">星级类型</param>
            <param name="ownerId">拥有者Id</param>
        </member>
        <member name="M:Tunynet.Common.IRatingRepository.IsRated(System.Int64,System.String,System.Int64)">
            <summary>
            用户当前操作
            </summary>
            <param name="objectId">操作对象Id</param>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="userId">用户的UserId</param>
            <returns>用户是否做过评价：True-评价过， False-没做过操作</returns>
        </member>
        <member name="M:Tunynet.Common.IRatingRepository.GetPagingObjectIds(System.String,System.Int32,System.Int64)">
            <summary>
            获取操作对象Id集合  用于分页
            </summary>
            <param name="tenantTypeId"> 租户类型Id</param>
            <param name="pageIndex">页码</param>
            <param name="ownerId">拥有者Id</param>
        </member>
        <member name="M:Tunynet.Common.IRatingRepository.GetRatingCount(System.Int64,System.String)">
            <summary>
            获取评价人数
            </summary>
            <param name="objectId">评分对象</param>
            <param name="tenantTypeId">租户Id</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.IRatingRepository.GetRatingCountForVideo(System.Int64,System.String)">
            <summary>
            获取评价人数
            </summary>
            <param name="objectId">评分对象</param>
            <param name="tenantTypeId">租户Id</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.IRatingRepository.GetRatingResult(System.Int64,System.String)">
            <summary>
            获取评分结果
            </summary>
            <param name="objectId">评分对象</param>
            <param name="tenantTypeId">租户Id</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.IRatingRepository.GetRatingResultForVideo(System.Int64,System.String)">
            <summary>
            获取评分结果
            </summary>
            <param name="ownerId">评分对象</param>
            <param name="tenantTypeId">租户Id</param>
            <returns></returns>
        </member>
        <member name="T:Tunynet.Common.RatingGradeRepository">
            <summary>
            等级统计数据访问
            </summary>
        </member>
        <member name="M:Tunynet.Common.RatingGradeRepository.GetRatingGrades(System.Int64,System.String)">
            <summary>
            获取指定评价选项信息
            </summary>
            <param name="objectId">评价数据Id</param>
            <param name="tenantTypeId">租户类型Id</param>
        </member>
        <member name="M:Tunynet.Common.RatingGradeRepository.ClearRatingGradesOfObjectId(System.Int64,System.String)">
            <summary>
            清空相关联的等级统计信息
            </summary>
            <param name="objectId"> 操作Id</param>
            <param name="tenantTypeId">租户类型Id</param>
        </member>
        <member name="T:Tunynet.Common.RatingRecordRepository">
            <summary>
            星级评价记录的数据访问
            </summary>
        </member>
        <member name="M:Tunynet.Common.RatingRecordRepository.ClearByUser(System.Int64)">
            <summary>
            删除用户的记录
            </summary>
            <param name="userId"></param>
        </member>
        <member name="M:Tunynet.Common.RatingRecordRepository.Clean(System.Nullable{System.Int32})">
            <summary>
            删除N天前的评价记录
            </summary>
            <param name="beforeDays">间隔天数</param>
        </member>
        <member name="M:Tunynet.Common.RatingRecordRepository.ClearRatingRecordsOfObjectId(System.Int64,System.String)">
            <summary>
            清空相关联评价记录
            </summary>
            <param name="objectId">操作Id</param>
            <param name="tenantTypeId">租户类型Id</param>
        </member>
        <member name="M:Tunynet.Common.RatingRecordRepository.GetTopRatingRecords(System.Int64,System.String,System.Nullable{System.Int32},System.Int32)">
             <summary>
            获取前N条用户的星级评价记录信息
             </summary>
             <param name="objectId"> 操作Id</param>
             <param name="tentanTypeId">操作类型Id</param>
             <param name="rateNumber">等级类型</param>
             <param name="topNumber">前N条</param>
        </member>
        <member name="M:Tunynet.Common.RatingRecordRepository.GetUserRatingRecords(System.Int64,System.String,System.Int64)">
            <summary>
            用户的星级评价记录信息
            </summary>
            <param name="objectId">操作对象Id</param>
            <param name="userId">用户Id</param>
            <returns></returns>
        </member>
        <member name="T:Tunynet.Common.RatingRepository">
            <summary>
            星级评价的数据访问
            </summary>
        </member>
        <member name="M:Tunynet.Common.RatingRepository.Get(System.Int64,System.String)">
            <summary>
            获取星级评价信息
            </summary>
            <param name="objectId">操作对象</param>
            <param name="tenantTypeId">租户类型Id</param>
        </member>
        <member name="M:Tunynet.Common.RatingRepository.GetTopObjectIds(System.Int32,System.String,System.Int64)">
            <summary>
            获取前N条操作对象Id
            </summary>
            <param name="topNumber">获取前N条</param>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="ownerId">拥有者Id</param>
        </member>
        <member name="M:Tunynet.Common.RatingRepository.Rated(System.Int64,System.String,System.Int64,System.Int32,System.Int64)">
            <summary>
            对操作对象进行星级评价操作
            </summary>
            <param name="objectId">操作对象Id</param>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="userId">用户的UserId</param>
            <param name="rateNumber">星级类型</param>
            <param name="ownerId">拥有者Id</param>
        </member>
        <member name="M:Tunynet.Common.RatingRepository.IsRated(System.Int64,System.String,System.Int64)">
            <summary>
            用户当前操作
            </summary>
            <param name="objectId">操作对象Id</param>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="userId">用户的UserId</param>
            <returns>用户是否做过评价：True-评价过， False-没做过操作</returns>
        </member>
        <member name="M:Tunynet.Common.RatingRepository.GetPagingObjectIds(System.String,System.Int32,System.Int64)">
            <summary>
            获取操作对象Id集合  用于分页
            </summary>
            <param name="tenantTypeId"> 租户类型Id</param>
            <param name="pageIndex">页码</param>
            <param name="ownerId">拥有者Id</param>
        </member>
        <member name="M:Tunynet.Common.RatingRepository.GetCacheKey_IsRated(System.Int64,System.String)">
            <summary>
            获取是否评价过CacheKey
            </summary>
            <param name="objectId">操作类型Id</param>
            <param name="tenantTypeId">租户类型Id</param>
        </member>
        <member name="M:Tunynet.Common.RatingRepository.GetCacheKey_Rating(System.String,System.Int64)">
            <summary>
            获取星级评价信息的CacheKey
            </summary>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="objectId">操作对象</param>
        </member>
        <member name="M:Tunynet.Common.RatingRepository.GetCacheKey_ObjectIds(System.String,System.Int64)">
            <summary>
            获取评价操作Id集合的CacheKey
            </summary>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="ownerId">拥有者Id</param>
        </member>
        <member name="M:Tunynet.Common.RatingRepository.GetRatingCount(System.Int64,System.String)">
            <summary>
            获取评价人数
            </summary>
            <param name="objectId">评分对象</param>
            <param name="tenantTypeId">租户Id</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.RatingRepository.GetRatingCountForVideo(System.Int64,System.String)">
            <summary>
            获取评价人数
            </summary>
            <param name="objectId">评分对象</param>
            <param name="tenantTypeId">租户Id</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.RatingRepository.GetRatingResult(System.Int64,System.String)">
            <summary>
            获取评分结果
            </summary>
            <param name="objectId">评分对象</param>
            <param name="tenantTypeId">租户Id</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.RatingRepository.GetRatingResultForVideo(System.Int64,System.String)">
            <summary>
            获取评分结果
            </summary>
            <param name="ownerId">评分对象</param>
            <param name="tenantTypeId">租户Id</param>
            <returns></returns>
        </member>
        <member name="P:Tunynet.Common.RatingRepository.SecondaryMaxRecords">
            <summary>
            非主流查询最大允许返回记录数
            </summary>
            <remarks>
            例如：排行数据
            </remarks>
        </member>
        <member name="P:Tunynet.Common.RatingRepository.CacheablePageCount">
            <summary>
            可缓存的列表缓存页数
            </summary>
        </member>
        <member name="P:Tunynet.Common.SupportOpposeEventArgs.TenantTypeId">
            <summary>
            租户类型ID
            </summary>
        </member>
        <member name="P:Tunynet.Common.SupportOpposeEventArgs.UserId">
            <summary>
            操作用户ID
            </summary>
        </member>
        <member name="P:Tunynet.Common.SupportOpposeEventArgs.FirstTime">
            <summary>
            是否第一次顶或踩的操作，用于区别是否反向操作后又正向操作
            </summary>
        </member>
        <member name="T:Tunynet.Common.ApplicationDataKeysExtensions">
            <summary>
            ApplicationDataKeys扩展
            </summary>
        </member>
        <member name="M:Tunynet.Common.ApplicationDataKeysExtensions.PubliclyAuditStatus(Tunynet.Common.ApplicationDataKeys)">
            <summary>
            应用的哪些审核状态可以对外显示
            </summary>
            <param name="applicationDataKeys"></param>
        </member>
        <member name="T:Tunynet.Common.AuditStrictDegree">
            <summary>
            审核严格程度
            </summary>
        </member>
        <member name="F:Tunynet.Common.AuditStrictDegree.NotSet">
            <summary>
            未设置
            </summary>
        </member>
        <member name="F:Tunynet.Common.AuditStrictDegree.None">
            <summary>
            不审核
            </summary>
        </member>
        <member name="F:Tunynet.Common.AuditStrictDegree.Create">
            <summary>
            创建时审核
            </summary>
        </member>
        <member name="F:Tunynet.Common.AuditStrictDegree.Update">
            <summary>
            更新时也审核
            </summary>
        </member>
        <member name="T:Tunynet.Common.AuditStatus">
            <summary>
            审核状态
            </summary>
        </member>
        <member name="F:Tunynet.Common.AuditStatus.Fail">
            <summary>
            未通过
            </summary>
        </member>
        <member name="F:Tunynet.Common.AuditStatus.Pending">
            <summary>
            待审核
            </summary>
        </member>
        <member name="F:Tunynet.Common.AuditStatus.Again">
            <summary>
            需再次审核
            </summary>
        </member>
        <member name="F:Tunynet.Common.AuditStatus.Success">
            <summary>
            通过审核
            </summary>
        </member>
        <member name="T:Tunynet.Common.PubliclyAuditStatus">
            <summary>
            用于显示的审核状态
            </summary>
        </member>
        <member name="F:Tunynet.Common.PubliclyAuditStatus.Fail">
            <summary>
            未通过
            </summary>
        </member>
        <member name="F:Tunynet.Common.PubliclyAuditStatus.Pending_GreaterThanOrEqual">
            <summary>
            待审核、需再次审核、通过审核
            </summary>
        </member>
        <member name="F:Tunynet.Common.PubliclyAuditStatus.Pending">
            <summary>
            待审核
            </summary>
        </member>
        <member name="F:Tunynet.Common.PubliclyAuditStatus.Again_GreaterThanOrEqual">
            <summary>
            需再次审核、通过审核
            </summary>
        </member>
        <member name="F:Tunynet.Common.PubliclyAuditStatus.Again">
            <summary>
            需再次审核
            </summary>
        </member>
        <member name="F:Tunynet.Common.PubliclyAuditStatus.Success">
            <summary>
            通过审核
            </summary>
        </member>
        <member name="T:Tunynet.Common.AuditEventArgs">
            <summary>
            审核变化自定义事件
            </summary>
        </member>
        <member name="M:Tunynet.Common.AuditEventArgs.#ctor(System.Nullable{Tunynet.Common.AuditStatus},System.Nullable{Tunynet.Common.AuditStatus})">
            <summary>
            构造函数
            </summary>
            <param name="oldAuditStatus">变化前的审核状态</param>
            <param name="newAuditStatus">变化后的审核状态</param>
        </member>
        <member name="P:Tunynet.Common.AuditEventArgs.OldAuditStatus">
            <summary>
            旧审核状态
            </summary>
        </member>
        <member name="P:Tunynet.Common.AuditEventArgs.NewAuditStatus">
            <summary>
            新审核状态
            </summary>
        </member>
        <member name="T:Tunynet.Common.AuditItem">
            <summary>
            权限实体类
            </summary>
        </member>
        <member name="P:Tunynet.Common.AuditItem.ItemKey">
             <summary>
            动态项目标志
             </summary>
        </member>
        <member name="P:Tunynet.Common.AuditItem.ApplicationId">
             <summary>
            应用程序id
             </summary>
        </member>
        <member name="P:Tunynet.Common.AuditItem.ItemName">
             <summary>
            项目名称
             </summary>
        </member>
        <member name="P:Tunynet.Common.AuditItem.DisplayOrder">
             <summary>
            排序序号
             </summary>
        </member>
        <member name="P:Tunynet.Common.AuditItem.Description">
             <summary>
            描述
             </summary>
        </member>
        <member name="T:Tunynet.Common.AuditItemInUserRole">
            <summary>
            审核项目与角色实体类
            </summary>
        </member>
        <member name="M:Tunynet.Common.AuditItemInUserRole.New">
            <summary>
            新建实体时使用
            </summary>
        </member>
        <member name="P:Tunynet.Common.AuditItemInUserRole.Id">
             <summary>
            Id
             </summary>
        </member>
        <member name="P:Tunynet.Common.AuditItemInUserRole.RoleName">
             <summary>
            角色名称
             </summary>
        </member>
        <member name="P:Tunynet.Common.AuditItemInUserRole.ItemKey">
             <summary>
            审核项目标识
             </summary>
        </member>
        <member name="P:Tunynet.Common.AuditItemInUserRole.StrictDegree">
             <summary>
            严格程度
             </summary>
        </member>
        <member name="P:Tunynet.Common.AuditItemInUserRole.IsLocked">
             <summary>
            是否锁定
             </summary>
        </member>
        <member name="T:Tunynet.Common.AuditItemKeys">
            <summary>
            审核项目标识
            </summary>
        </member>
        <member name="M:Tunynet.Common.AuditItemKeys.Instance">
            <summary>
            获取该类的单例
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.AuditItemKeys.Comment">
            <summary>
            评论
            </summary>
        </member>
        <member name="T:Tunynet.Common.AuditService">
            <summary>
            审核业务逻辑类
            </summary>
        </member>
        <member name="M:Tunynet.Common.AuditService.#ctor">
            <summary>
            构造器
            </summary>
        </member>
        <member name="M:Tunynet.Common.AuditService.#ctor(Tunynet.Repositories.IRepository{Tunynet.Common.AuditItem},Tunynet.Common.Repositories.IAuditItemInUserRoleRepository)">
            <summary>
            构造器
            </summary>
            <param name="auditItemRepository">AuditItem仓储</param>
            <param name="auditItemInUserRoleRepository">PermissionItemInUserRoleRepository仓储</param>
        </member>
        <member name="M:Tunynet.Common.AuditService.GetAuditItems(System.Int32)">
            <summary>
            获取审核项集合
            </summary>
            <param name="applicationId">应用程序ID</param>
            <returns>审核项集合</returns>
        </member>
        <member name="M:Tunynet.Common.AuditService.GetAuditItem(System.String)">
            <summary>
            获取AuditItem
            </summary>
            <param name="itemKey">审核项标识</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.AuditService.GetAuditItemsInUserRole(System.String,System.Nullable{System.Int32})">
            <summary>
            获取用户角色对应的审核设置
            </summary>
            <param name="roleName">角色名称</param>
            <returns>返回roleName对应的审核设置</returns>
        </member>
        <member name="M:Tunynet.Common.AuditService.UpdateAuditItemInUserRole(System.Collections.Generic.IEnumerable{Tunynet.Common.AuditItemInUserRole})">
            <summary>
            更新权限规则
            </summary>
            <param name="AuditItemInUserRoles">待更新的权限项目规则集合</param>
        </member>
        <member name="M:Tunynet.Common.AuditService.GetPubliclyAuditStatus(System.Int32)">
            <summary>
            获取应用的PubliclyAuditStatus设置
            </summary>
            <param name="applicationId">ApplicationId</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.AuditService.SavePubliclyAuditStatus(System.Int32,Tunynet.Common.PubliclyAuditStatus)">
            <summary>
            保存应用的PubliclyAuditStatus设置
            </summary>
            <param name="applicationId">ApplicationId</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.AuditService.ChangeAuditStatusForCreate(System.Int64,Tunynet.Common.IAuditable)">
            <summary>
            创建实体时设置审核状态
            </summary>
            <param name="userId">UserId</param>
            <param name="auditable">可审核实体</param>
        </member>
        <member name="M:Tunynet.Common.AuditService.ChangeAuditStatusForUpdate(System.Int64,Tunynet.Common.IAuditable)">
            <summary>
            更新实体时设置审核状态
            </summary>
            <param name="userId">UserId</param>
            <param name="auditable">可审核实体</param>
        </member>
        <member name="M:Tunynet.Common.AuditService.NeedAudit(System.Int64,Tunynet.Common.IAuditable,Tunynet.Common.AuditStrictDegree)">
            <summary>
            判断是否需要在一定的严格程度上需要审核
            </summary>
            <param name="userId">UserId</param>
            <param name="auditable">可审核实体</param>
            <param name="strictDegree">审核严格程度</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.AuditService.ResolveAuditDirection(System.Nullable{Tunynet.Common.AuditStatus},System.Nullable{Tunynet.Common.AuditStatus})">
            <summary>
            解析审核状态变化前后是否会对其他数据产生正向还负向的影响（例如：是该加积分，还是减积分）
            </summary>
            <remarks>该方法仅针对于管理员通过审核或不通过审核的情况</remarks>
            <param name="oldAuditStatus">变化前的审核状态（若是创建操作，请赋值为null）</param>
            <param name="newAuditStatus">变化后的审核状态（若是删除操作，请赋值为null）</param>
            <returns>true-正影响，false-负影响，null-未产生影响</returns>
        </member>
        <member name="T:Tunynet.Common.IAuditable">
            <summary>
            可审核接口
            </summary>
        </member>
        <member name="P:Tunynet.Common.IAuditable.AuditStatus">
            <summary>
            审核状态
            </summary>
        </member>
        <member name="P:Tunynet.Common.IAuditable.AuditItemKey">
            <summary>
            审核项目标识
            </summary>
            <remarks>
            具体实现类显性实现
            </remarks>
        </member>
        <member name="T:Tunynet.Common.Repositories.AuditItemInUserRoleRepository">
            <summary>
            审核设置数据访问
            </summary>
        </member>
        <member name="T:Tunynet.Common.Repositories.IAuditItemInUserRoleRepository">
            <summary>
            AuditItemInUserRole仓储接口
            </summary>
        </member>
        <member name="M:Tunynet.Common.Repositories.IAuditItemInUserRoleRepository.GetAuditItemsInUserRole(System.String)">
            <summary>
            获取用户角色对应的审核设置
            </summary>
            <param name="roleName">角色名称</param>
            <returns>返回roleName对应的审核设置</returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.IAuditItemInUserRoleRepository.UpdateAuditItemInUserRole(System.Collections.Generic.IEnumerable{Tunynet.Common.AuditItemInUserRole})">
            <summary>
            更新审核项目设置
            </summary>
            <param name="auditItemInUserRoles">待更新的审核项目规则集合</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.AuditItemInUserRoleRepository.CreateDAO">
            <summary>
            默认Database实例
            </summary>
        </member>
        <member name="M:Tunynet.Common.Repositories.AuditItemInUserRoleRepository.GetAuditItemsInUserRole(System.String)">
            <summary>
            获取用户角色对应的审核设置
            </summary>
            <param name="roleName">角色名称</param>
            <returns>返回roleName对应的审核设置</returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.AuditItemInUserRoleRepository.UpdateAuditItemInUserRole(System.Collections.Generic.IEnumerable{Tunynet.Common.AuditItemInUserRole})">
            <summary>
            更新审核项目设置
            </summary>
            <param name="auditItemInUserRoles">待更新的审核项目规则集合</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.AuditItemInUserRoleRepository.GetCacheKey_GetAuditItemsInUserRole(System.String)">
            <summary>
            获取审核项目与角色关联 的CacheKey
            </summary>
            <param name="roleName">角色名</param>
        </member>
        <member name="P:Tunynet.Common.Repositories.AuditItemInUserRoleRepository.RealTimeCacheHelper">
            <summary>
            缓存设置
            </summary>
        </member>
        <member name="T:Tunynet.Common.ApplicationAdministratorRoleNames">
            <summary>
            应用管理员角色处理器
            </summary>
        </member>
        <member name="M:Tunynet.Common.ApplicationAdministratorRoleNames.#ctor">
            <summary>
            构造器
            </summary>
        </member>
        <member name="M:Tunynet.Common.ApplicationAdministratorRoleNames.GetAll">
            <summary>
            获取应用管理员角色
            </summary>
            <param name="applicationId">应用Id</param>
            <returns>应用管理员角色</returns>
        </member>
        <member name="M:Tunynet.Common.ApplicationAdministratorRoleNames.GetRoleNames(System.Int32)">
            <summary>
            获取应用管理员角色
            </summary>
            <param name="applicationId">应用Id</param>
            <returns>应用管理员角色</returns>
        </member>
        <member name="M:Tunynet.Common.ApplicationAdministratorRoleNames.Add(System.Int32,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            添加应用管理员角色
            </summary>
            <param name="applicationId">应用Id</param>
            <param name="applicationAdministratorRoleNames">应用管理员角色</param>
        </member>
        <member name="M:Tunynet.Common.ApplicationAdministratorRoleNames.Remove(System.Int32)">
            <summary>
            删除应用管理员角色
            </summary>
            <param name="applicationId">应用Id</param>
        </member>
        <member name="T:Tunynet.Common.AuthorizationService">
            <summary>
            权限验证服务类
            </summary>
        </member>
        <member name="T:Tunynet.Common.IAuthorizationService">
            <summary>
            授权服务接口
            </summary>
        </member>
        <member name="M:Tunynet.Common.IAuthorizationService.IsSuperAdministrator(Tunynet.Common.IUser)">
            <summary>
            当前用户是不是超级管理员
            </summary>
            <param name="currentUser">当前用户</param>
            <returns>是超级管理员返回true，否则返回false</returns>
        </member>
        <member name="M:Tunynet.Common.IAuthorizationService.IsOwner(Tunynet.Common.IUser,System.Int64[])">
            <summary>
            是不是拥有者
            </summary>
            <remarks>
            拥有者一般对自己的内容有管理权限
            </remarks>
            <param name="currentUser">当前用户</param>
            <param name="userIds">可能作为拥着有的多个用户Id</param>
            <returns>是拥有者返回true，否则返回false</returns>
        </member>
        <member name="M:Tunynet.Common.IAuthorizationService.IsTenantManager(Tunynet.Common.IUser,System.String,System.Int64)">
            <summary>
            是不是租户管理者
            </summary>
            <param name="currentUser">当前用户</param>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="tenantOwnerId">租户的OwnerId</param>
            <returns>是租户拥有者返回true，否则返回false</returns>
        </member>
        <member name="M:Tunynet.Common.IAuthorizationService.IsTenantMember(Tunynet.Common.IUser,System.String,System.Int64)">
            <summary>
            是不是租户普通成员
            </summary>
            <param name="currentUser">当前用户</param>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="tenantOwnerId">租户的OwnerId</param>
            <returns>是租户拥有者返回true，否则返回false</returns>
        </member>
        <member name="M:Tunynet.Common.IAuthorizationService.IsApplicationManager(Tunynet.Common.IUser,System.Int32)">
            <summary>
            是不是应用管理员
            </summary>
            <param name="currentUser"></param>
            <param name="applicationId">应用Id</param>
            <returns>是应用管理员返回true，否则返回false</returns>
        </member>
        <member name="M:Tunynet.Common.IAuthorizationService.Check(Tunynet.Common.IUser,System.String)">
            <summary>
            检查用户是否有权限进行某项操作
            </summary>
            <param name="currentUser">当前用户</param>
            <param name="permissionItemKey">权限项目标识</param>
            <returns>有权限操作返回true，否则返回false</returns>
        </member>
        <member name="M:Tunynet.Common.AuthorizationService.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Tunynet.Common.AuthorizationService.#ctor(System.Collections.Generic.IEnumerable{Tunynet.Common.ITenantAuthorizationHandler},System.String,System.String,Tunynet.Common.PermissionService)">
            <summary>
            构造函数
            </summary>
            <param name="tenantAuthorizationHandlers">租户权限处理器集合</param>
            <param name="anonymous">匿名用户角色名称</param>
            <param name="superAdministrator">超级管理员角色名称</param>
            <param name="permissionService">权限管理服务</param>
        </member>
        <member name="M:Tunynet.Common.AuthorizationService.IsSuperAdministrator(Tunynet.Common.IUser)">
            <summary>
            当前用户是不是超级管理员
            </summary>
            <param name="currentUser">当前用户</param>
            <returns>是超级管理员返回true，否则返回false</returns>
        </member>
        <member name="M:Tunynet.Common.AuthorizationService.IsOwner(Tunynet.Common.IUser,System.Int64[])">
            <summary>
            是不是拥有者
            </summary>
            <remarks>
            拥有者一般对自己的内容有管理权限
            </remarks>
            <param name="currentUser">当前用户</param>
            <param name="userIds">可能作为拥着有的多个用户Id</param>
            <returns>是拥有者返回true，否则返回false</returns>
        </member>
        <member name="M:Tunynet.Common.AuthorizationService.IsTenantManager(Tunynet.Common.IUser,System.String,System.Int64)">
            <summary>
            是不是租户管理者
            </summary>
            <param name="currentUser"></param>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="tenantOwnerId">租户的OwnerId</param>
            <returns>是租户拥有者返回true，否则返回false</returns>
        </member>
        <member name="M:Tunynet.Common.AuthorizationService.IsTenantMember(Tunynet.Common.IUser,System.String,System.Int64)">
            <summary>
            是不是租户普通成员
            </summary>
            <param name="currentUser"></param>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="tenantOwnerId">租户的OwnerId</param>
            <returns>是租户拥有者返回true，否则返回false</returns>
        </member>
        <member name="M:Tunynet.Common.AuthorizationService.IsApplicationManager(Tunynet.Common.IUser,System.Int32)">
            <summary>
            是不是应用管理员
            </summary>
            <param name="currentUser"></param>
            <param name="applicationId">应用Id</param>
            <returns>是应用管理员返回true，否则返回false</returns>
        </member>
        <member name="M:Tunynet.Common.AuthorizationService.Check(Tunynet.Common.IUser,System.String)">
            <summary>
            检查用户是否有权限进行某项操作
            </summary>
            <param name="currentUser">当前用户</param>
            <param name="permissionItemKey">权限项目标识</param>
            <returns>有权限操作返回true，否则返回false</returns>
        </member>
        <member name="T:Tunynet.Common.ITenantAuthorizationHandler">
            <summary>
            租户权限验证处理器
            </summary>
        </member>
        <member name="M:Tunynet.Common.ITenantAuthorizationHandler.IsTenantManager(Tunynet.Common.IUser,System.Int64)">
            <summary>
            判断是否为租户管理者
            </summary>
            <param name="currentUser">当前用户</param>
            <param name="tenantOwnerId">租户拥有者Id</param>
            <returns>true-是；false-不是</returns>
        </member>
        <member name="M:Tunynet.Common.ITenantAuthorizationHandler.IsTenantMember(Tunynet.Common.IUser,System.Int64)">
            <summary>
            判断是否为租户普通成员
            </summary>
            <param name="currentUser">当前用户</param>
            <param name="tenantOwnerId">租户拥有者Id</param>
            <returns>true-是；false-不是</returns>
        </member>
        <member name="P:Tunynet.Common.ITenantAuthorizationHandler.TenantTypeId">
            <summary>
            租户类型Id
            </summary>
        </member>
        <member name="T:Tunynet.Common.PermissionType">
            <summary>
            权限许可类型
            </summary>
        </member>
        <member name="T:Tunynet.Common.PermissionScope">
            <summary>
            权限许可范围
            </summary>
            <remarks>
            范围越大对应的整型值越大
            </remarks>
        </member>
        <member name="T:Tunynet.Common.PermissionItem">
            <summary>
            权限实体类
            </summary>
        </member>
        <member name="P:Tunynet.Common.PermissionItem.ItemKey">
             <summary>
            权限项目标志
             </summary>
        </member>
        <member name="P:Tunynet.Common.PermissionItem.ApplicationId">
             <summary>
            应用程序id
             </summary>
        </member>
        <member name="P:Tunynet.Common.PermissionItem.ItemName">
             <summary>
            权限项目名称
             </summary>
        </member>
        <member name="P:Tunynet.Common.PermissionItem.DisplayOrder">
             <summary>
            排序序号
             </summary>
        </member>
        <member name="P:Tunynet.Common.PermissionItem.EnableQuota">
             <summary>
            是否启用权限额度
             </summary>
        </member>
        <member name="P:Tunynet.Common.PermissionItem.EnableScope">
             <summary>
            是否启用权限范围
             </summary>
        </member>
        <member name="T:Tunynet.Common.PermissionItemInUserRole">
            <summary>
            权限项目与角色关联
            </summary>
        </member>
        <member name="M:Tunynet.Common.PermissionItemInUserRole.New">
            <summary>
            新建实体时使用
            </summary>
        </member>
        <member name="P:Tunynet.Common.PermissionItemInUserRole.Id">
             <summary>
            Id
             </summary>
        </member>
        <member name="P:Tunynet.Common.PermissionItemInUserRole.RoleName">
             <summary>
            角色名称
             </summary>
        </member>
        <member name="P:Tunynet.Common.PermissionItemInUserRole.ItemKey">
             <summary>
            权限项目标识
             </summary>
        </member>
        <member name="P:Tunynet.Common.PermissionItemInUserRole.PermissionType">
             <summary>
            权限设置类型
             </summary>
        </member>
        <member name="P:Tunynet.Common.PermissionItemInUserRole.PermissionQuota">
             <summary>
            允许的权限额度
             </summary>
        </member>
        <member name="P:Tunynet.Common.PermissionItemInUserRole.PermissionScope">
             <summary>
            允许的权限范围
             </summary>
        </member>
        <member name="P:Tunynet.Common.PermissionItemInUserRole.IsLocked">
             <summary>
            是否锁定
             </summary>
        </member>
        <member name="T:Tunynet.Common.PermissionItemKeys">
            <summary>
            权限项目标识配置类（便于使用PermissionItemKey）
            </summary>
            <remarks>
            各Application应该对该配置类的方法进行扩展
            </remarks>
        </member>
        <member name="M:Tunynet.Common.PermissionItemKeys.Instance">
            <summary>
            获取该类的单例
            </summary>
            <returns></returns>
        </member>
        <member name="T:Tunynet.Common.PermissionService">
            <summary>
            权限管理服务类
            </summary>
        </member>
        <member name="M:Tunynet.Common.PermissionService.#ctor">
            <summary>
            构造器
            </summary>
        </member>
        <member name="M:Tunynet.Common.PermissionService.#ctor(Tunynet.Repositories.IRepository{Tunynet.Common.PermissionItem},Tunynet.Common.Repositories.IPermissionItemInUserRoleRepository)">
            <summary>
            构造器
            </summary>
            <param name="permissionItemRepository">PermissionItem仓储</param>
            <param name="permissionItemInUserRoleRepository"><see cref="T:Tunynet.Common.Repositories.IPermissionItemInUserRoleRepository"/></param>
        </member>
        <member name="M:Tunynet.Common.PermissionService.GetPermissionItems(System.Nullable{System.Int32})">
            <summary>
            获取权限项集合
            </summary>
            <param name="applicationId">应用程序ID</param>
            <returns>权限项集合</returns>
        </member>
        <member name="M:Tunynet.Common.PermissionService.GetPermissionItem(System.String)">
            <summary>
            获取PermissionItem
            </summary>
            <param name="itemKey">权限项标识</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.PermissionService.GetPermissionItemsInUserRole(System.String)">
            <summary>
            获取用户角色对应的权限设置
            </summary>
            <param name="roleName">角色名称</param>
            <returns>返回roleName对应的权限设置</returns>
        </member>
        <member name="M:Tunynet.Common.PermissionService.UpdatePermissionItemInUserRole(System.Collections.Generic.IEnumerable{Tunynet.Common.PermissionItemInUserRole})">
            <summary>
            更新权限规则
            </summary>
            <param name="permissionItemInUserRoles">待更新的权限项目规则集合</param>
        </member>
        <member name="M:Tunynet.Common.PermissionService.ResolveUserPermission(System.Int64)">
            <summary>
            解析用户的权限规则用于权限验证
            </summary>
            <param name="userId">用户Id</param>
            <returns></returns>
        </member>
        <member name="T:Tunynet.Common.Repositories.IPermissionItemInUserRoleRepository">
            <summary>
            PermissionItemInUserRole仓储接口
            </summary>
        </member>
        <member name="M:Tunynet.Common.Repositories.IPermissionItemInUserRoleRepository.UpdatePermissionItemInUserRole(System.Collections.Generic.IEnumerable{Tunynet.Common.PermissionItemInUserRole})">
            <summary>
            更新权限项目设置
            </summary>
            <param name="permissionItemInUserRoles">待更新的权限项目规则集合</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.IPermissionItemInUserRoleRepository.GetPermissionItemsInUserRole(System.String)">
            <summary>
            获取用户角色对应的权限设置
            </summary>
            <param name="roleName">角色名称</param>
            <returns>返回roleName对应的权限设置</returns>
        </member>
        <member name="T:Tunynet.Common.Repositories.PermissionItemInUserRoleRepository">
            <summary>
            权限项目关联设置的数据访问
            </summary>
        </member>
        <member name="M:Tunynet.Common.Repositories.PermissionItemInUserRoleRepository.CreateDAO">
            <summary>
            默认Database实例
            </summary>
        </member>
        <member name="M:Tunynet.Common.Repositories.PermissionItemInUserRoleRepository.UpdatePermissionItemInUserRole(System.Collections.Generic.IEnumerable{Tunynet.Common.PermissionItemInUserRole})">
            <summary>
            更新权限项目设置
            </summary>
            <param name="permissionItemInUserRoles">待更新的权限项目规则集合</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.PermissionItemInUserRoleRepository.GetPermissionItemsInUserRole(System.String)">
            <summary>
            获取用户角色对应的权限设置
            </summary>
            <param name="roleName">角色名称</param>
            <returns>返回roleName对应的权限设置</returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.PermissionItemInUserRoleRepository.GetCacheKey_GetPermissionItemsInUserRole(System.String)">
            <summary>
            获取权限项目与角色关联 的CacheKey
            </summary>
            <param name="roleName">角色名</param>
        </member>
        <member name="P:Tunynet.Common.Repositories.PermissionItemInUserRoleRepository.RealTimeCacheHelper">
            <summary>
            缓存设置
            </summary>
        </member>
        <member name="T:Tunynet.Common.ResolvedUserPermission">
            <summary>
            用户权限规则
            </summary>
        </member>
        <member name="M:Tunynet.Common.ResolvedUserPermission.Merge(Tunynet.Common.PermissionItem,Tunynet.Common.PermissionType,Tunynet.Common.PermissionScope,System.Single)">
            <summary>
            合并权限规则
            </summary>
            <param name="permissionItem">权限项目</param>
            <param name="permissionType">权限许可类型</param>
            <param name="permissionScope">权限许可范围</param>
            <param name="permissionQuota">权限许可额度</param>
        </member>
        <member name="M:Tunynet.Common.ResolvedUserPermission.Validate(System.String)">
            <summary>
            权限验证
            </summary>
            <param name="itemKey">权限项目标识</param>
            <returns>通过验证返回true，否则返回false</returns>        
        </member>
        <member name="M:Tunynet.Common.ResolvedUserPermission.Validate(System.String,Tunynet.Common.PermissionScope)">
            <summary>
            权限验证
            </summary>
            <param name="itemKey">权限项目标识</param>
            <param name="permissionScope">权限许可范围</param>
            <returns>通过验证返回true，否则返回false</returns>  
        </member>
        <member name="M:Tunynet.Common.ResolvedUserPermission.Validate(System.String,Tunynet.Common.PermissionScope,System.Single)">
            <summary>
            权限验证
            </summary>
            <param name="itemKey">权限项目标识</param>
            <param name="permissionScope">权限许可范围</param>
            <param name="permissionQuota">权限许可额度</param>
            <returns>通过验证返回true，否则返回false</returns>
        </member>
        <member name="T:Tunynet.Common.ResolvedUserPermission.PermissionSetting">
            <summary>
            权限设置
            </summary>
        </member>
        <member name="M:Tunynet.Common.ResolvedUserPermission.PermissionSetting.#ctor(Tunynet.Common.PermissionType,Tunynet.Common.PermissionScope,System.Single)">
            <summary>
            构造函数
            </summary>
            <param name="permissionType"></param>
            <param name="permissionScope"></param>
            <param name="permissionQuota"></param>
        </member>
        <member name="P:Tunynet.Common.ResolvedUserPermission.PermissionSetting.PermissionType">
            <summary>
            权限许可类型
            </summary>
        </member>
        <member name="P:Tunynet.Common.ResolvedUserPermission.PermissionSetting.PermissionScope">
            <summary>
            权限许可范围
            </summary>
        </member>
        <member name="P:Tunynet.Common.ResolvedUserPermission.PermissionSetting.PermissionQuota">
            <summary>
            权限许可额度
            </summary>
        </member>
        <member name="T:Tunynet.Common.PrivacyStatus">
            <summary>
            隐私状态
            </summary>
        </member>
        <member name="F:Tunynet.Common.PrivacyStatus.Private">
            <summary>
            仅自己可见
            </summary>        
        </member>
        <member name="F:Tunynet.Common.PrivacyStatus.Part">
            <summary>
            仅部分人可见
            </summary>
        </member>
        <member name="F:Tunynet.Common.PrivacyStatus.Public">
            <summary>
            所有人可见
            </summary>
        </member>
        <member name="M:Tunynet.Common.Comment.New">
            <summary>
            新建实体时使用
            </summary>
        </member>
        <member name="M:Tunynet.Common.Comment.GetCommentDetailUrl">
            <summary>
            获取评论的详细显示Url
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Comment.GetCommentedObjectUrl">
            <summary>
            获取被评论对象的Url
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Comment.GetCommentedObject">
            <summary>
            获取被评论对象
            </summary>
            <returns></returns>
        </member>
        <member name="P:Tunynet.Common.Comment.Id">
             <summary>
            Id
             </summary>
        </member>
        <member name="P:Tunynet.Common.Comment.ParentId">
             <summary>
            父评论Id（一级ParentId等于Id）
             </summary>
        </member>
        <member name="P:Tunynet.Common.Comment.CommentedObjectId">
             <summary>
            被评论对象Id
             </summary>
        </member>
        <member name="P:Tunynet.Common.Comment.TenantTypeId">
             <summary>
            租户类型Id（4位ApplicationId+2位顺序号）
             </summary>
        </member>
        <member name="P:Tunynet.Common.Comment.OwnerId">
             <summary>
            拥有者Id
             </summary>
        </member>
        <member name="P:Tunynet.Common.Comment.UserId">
             <summary>
            评论人UserId
             </summary>
        </member>
        <member name="P:Tunynet.Common.Comment.Author">
             <summary>
            评论人名称
             </summary>
        </member>
        <member name="P:Tunynet.Common.Comment.ToUserId">
             <summary>
            被回复UserId（一级ToUserId为0）
             </summary>
        </member>
        <member name="P:Tunynet.Common.Comment.ToUserDisplayName">
             <summary>
            被回复人名称（一级ToUserDisplayName为空字符串）
             </summary>
        </member>
        <member name="P:Tunynet.Common.Comment.Subject">
             <summary>
            标题
             </summary>
        </member>
        <member name="P:Tunynet.Common.Comment.Body">
             <summary>
            评论内容
             </summary>
        </member>
        <member name="P:Tunynet.Common.Comment.IsPrivate">
             <summary>
            是否属于悄悄话
             </summary>
        </member>
        <member name="P:Tunynet.Common.Comment.AuditStatus">
             <summary>
            审核状态
             </summary>
        </member>
        <member name="P:Tunynet.Common.Comment.ChildCount">
             <summary>
            子级评论数量
             </summary>
        </member>
        <member name="P:Tunynet.Common.Comment.IsAnonymous">
             <summary>
            是否匿名评论
             </summary>
        </member>
        <member name="P:Tunynet.Common.Comment.IP">
             <summary>
            评论人IP
             </summary>
        </member>
        <member name="P:Tunynet.Common.Comment.DateCreated">
             <summary>
            创建日期
             </summary>
        </member>
        <member name="P:Tunynet.Common.Comment.Contact">
            <summary>
            联系方式
            </summary>
        </member>
        <member name="P:Tunynet.Common.Comment.AuditItemKey">
            <summary>
            审核项标识
            </summary>
        </member>
        <member name="T:Tunynet.Common.SortBy_Comment">
            <summary>
            评论排序字段
            </summary>
        </member>
        <member name="F:Tunynet.Common.SortBy_Comment.DateCreated">
            <summary>
            发布日期
            </summary>
        </member>
        <member name="F:Tunynet.Common.SortBy_Comment.DateCreatedDesc">
            <summary>
            发布日期倒序
            </summary>
        </member>
        <member name="T:Tunynet.Common.CommentService">
            <summary>
            评论业务逻辑
            </summary>
        </member>
        <member name="M:Tunynet.Common.CommentService.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Tunynet.Common.CommentService.#ctor(Tunynet.Common.Repositories.ICommentRepository)">
            <summary>
            可设置repository的构造函数（主要用于测试用例）
            </summary>
        </member>
        <member name="M:Tunynet.Common.CommentService.Create(Tunynet.Common.Comment)">
            <summary>
            创建评论
            </summary>
            <param name="comment">待创建评论</param>
            <returns>创建成功返回true，否则返回false</returns>
        </member>
        <member name="M:Tunynet.Common.CommentService.Delete(System.Int64)">
            <summary>
            删除评论 
            </summary>
            <param name="id">评论Id</param>
            <returns>删除成功返回true，否则返回false</returns>
        </member>
        <member name="M:Tunynet.Common.CommentService.Delete(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            批量删除评论
            </summary>
            <param name="ids">待删除的评论Id列表</param>
            <returns>返回删除的评论数量</returns>
        </member>
        <member name="M:Tunynet.Common.CommentService.UpdateAuditStatus(System.Int64,System.Boolean)">
            <summary>
            更新审核状态
            </summary>
            <param name="id">待更新id</param>
            <param name="isApproved">是否通过审核</param>
        </member>
        <member name="M:Tunynet.Common.CommentService.BatchUpdateAuditStatus(System.Collections.Generic.IEnumerable{System.Int64},System.Boolean)">
            <summary>
            批量更新审核状态
            </summary>
            <param name="ids">待被更新的Id集合</param>
            <param name="isApproved">是否通过审核</param>
        </member>
        <member name="M:Tunynet.Common.CommentService.DeleteCommentedObjectComments(System.Int64)">
            <summary>
            删除被评论对象的所有评论
            </summary>
            <remarks>
            供被评论对象删除时调用
            </remarks>
            <param name="commentedObjectId"></param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.CommentService.DeleteUserComments(System.Int64,System.Boolean)">
            <summary>
             删除用户发布的评论
            </summary>
            <remarks>
            供用户删除时处理用户相关信息时调用
            </remarks>
            <param name="userId">UserId</param>
            <param name="reserveCommnetsAsAnonymous">true=保留用户发布的评论，但是修改为匿名用户；false=直接删除评论</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.CommentService.GetCommentedObjectComments(System.Int64)">
            <summary>
            获取被评论对象的所有评论（用于删除被评论对象时的积分处理）
            </summary>
            <param name="commentedObjectId">被评论对象ID</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.CommentService.Get(System.Int64)">
            <summary>
            获取单个评论实体
            </summary>
            <param name="id">评论Id</param>
            <returns>评论</returns>
        </member>
        <member name="M:Tunynet.Common.CommentService.GetRootComments(System.String,System.Int64,System.Int32,Tunynet.Common.SortBy_Comment)">
            <summary>
            获取顶级评论列表
            </summary>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="commentedObjectId">被评论对象Id</param>
            <param name="pageIndex">当前页码</param>
            <param name="sortBy">排序字段</param> 
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.CommentService.GetChildren(System.Int64,System.Int32,Tunynet.Common.SortBy_Comment)">
            <summary>
            获取子级评论列表
            </summary>
            <param name="parentId">父评论Id</param>
            <param name="pageIndex">当前页码</param>
            <param name="sortBy">排序字段</param> 
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.CommentService.GetOwnerComments(System.Int64,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Int32,System.Nullable{System.Boolean})">
            <summary>
            获取拥有者的评论
            </summary>
            <param name="ownerId">评论拥有者Id</param>
            <param name="tenantTypeId">租户类型Id（如果为null，则获取该拥有者所有评论）</param>
            <param name="startDate">开始时间</param>
            <param name="endDate">截止时间</param>
            <param name="pageIndex">当前页码</param>
            <param name="isMobileClient">是否是移动客户端</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.CommentService.GetUserComments(System.Int64,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Int32)">
            <summary>
            获取用户发布的评论
            </summary>
            <param name="userId">评论发布人UserId</param>
            <param name="tenantTypeId">租户类型Id（如果为null，则获取该拥有者所有评论）</param>
            <param name="startDate">开始时间</param>
            <param name="endDate">截止时间</param>
            <param name="pageIndex">当前页码</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.CommentService.GetUserCommentCount(System.Int64,System.String)">
            <summary>
            获取用户发布的评论数
            </summary>
            <param name="userId">评论发布人UserId</param>
            <param name="tenantTypeId">租户类型Id（如果为null，则获取该拥有者所有评论）</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.CommentService.GetNewComments(System.Int64,System.Int64)">
            <summary>
            获取新的评论（供移动客户端使用）
            </summary>
            <param name="ownerId"></param>
            <param name="oldCommentId">未查看的最后一条评论的id</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.CommentService.GetTopComments(System.Int64,System.String,System.Int32,Tunynet.Common.SortBy_Comment)">
             <summary>
             获取前topNumber条评论
             </summary>
            <param name="ownerId">评论拥有者Id</param>
             <param name="tenantTypeId">租户类型Id</param>
             <param name="topNumber">获取的评论数量</param>
             <param name="sortBy">排序字段</param>
             <returns></returns>
        </member>
        <member name="M:Tunynet.Common.CommentService.GetComments(System.Nullable{Tunynet.Common.PubliclyAuditStatus},System.String,System.Nullable{System.Int64},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Int32,System.Int32)">
            <summary>
            查询用户评论
            </summary>
            <param name="publiclyAuditStatus">审核状态</param>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="userId">评论发布人UserId</param>
            <param name="startDate">开始时间</param>
            <param name="endDate">截止时间</param>
            <param name="pageSize">页大小</param>
            <param name="pageIndex">当前页码</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.CommentService.GetPageIndexForCommentInCommens(System.Int64,System.String,System.Int64,Tunynet.Common.SortBy_Comment)">
            <summary>
            获取一级评论在评论列表中的页码
            </summary>
            <param name="commentId">评论id</param>
            <returns>页码</returns>
        </member>
        <member name="T:Tunynet.Common.Repositories.CommentRepository">
            <summary>
            CommentRepository
            </summary>
        </member>
        <member name="T:Tunynet.Common.Repositories.ICommentRepository">
            <summary>
            ICommentRepository接口
            </summary>
        </member>
        <member name="M:Tunynet.Common.Repositories.ICommentRepository.UpdateChildCount(System.Int64,System.Boolean)">
            <summary>
            更新父级ChildCount
            </summary>
            <param name="parentId">父级Id</param>
            <param name="isReduce">是否减少</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.ICommentRepository.Delete(System.Int64)">
            <summary>
            删除评论 
            </summary>
            <param name="id">评论Id</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.ICommentRepository.DeleteCommentedObjectComments(System.Int64)">
            <summary>
            删除被评论对象的所有评论
            </summary>
            <remarks>
            供被评论对象删除时调用
            </remarks>
            <param name="commentedObjectId"></param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.ICommentRepository.DeleteUserComments(System.Int64,System.Boolean)">
            <summary>
             删除用户发布的评论
            </summary>
            <remarks>
            供用户删除时处理用户相关信息时调用
            </remarks>
            <param name="userId">UserId</param>
            <param name="reserveCommnetsAsAnonymous">true=保留用户发布的评论，但是修改为匿名用户；false=直接删除评论</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.ICommentRepository.GetCommentedObjectComments(System.Int64)">
            <summary>
            获取被评论对象的所有评论（用于删除被评论对象时的积分处理）
            </summary>
            <param name="commentedObjectId">被评论对象ID</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.ICommentRepository.GetRootComments(System.String,System.Int64,System.Int32,Tunynet.Common.SortBy_Comment)">
            <summary>
            获取顶级评论列表
            </summary>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="commentedObjectId">被评论对象Id</param>
            <param name="pageIndex">当前页码</param>
            <param name="sortBy">排序字段</param> 
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.ICommentRepository.GetChildren(System.Int64,System.Int32,Tunynet.Common.SortBy_Comment)">
            <summary>
            获取子级评论列表
            </summary>
            <param name="parentId">父评论Id</param>
            <param name="pageIndex">当前页码</param>
            <param name="sortBy">排序字段</param> 
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.ICommentRepository.GetUserComments(System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Int32,System.Nullable{System.Boolean})">
            <summary>
            获取拥有者的评论
            </summary>
            <param name="ownerId">评论拥有者Id</param>
            <param name="userId">评论发布人UserId</param>
            <param name="tenantTypeId">租户类型Id（如果为null，则获取该拥有者所有评论）</param>
            <param name="startDate">开始时间</param>
            <param name="endDate">截止时间</param>
            <param name="pageIndex">当前页码</param>
            <param name="isMobileClient">是否是移动客户端</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.ICommentRepository.GetNewComments(System.Int64,System.Int64)">
            <summary>
            获取新的评论（供移动客户端使用）
            </summary>
            <param name="ownerId"></param>
            <param name="oldCommentId"></param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.ICommentRepository.GetTopComments(System.Int64,System.String,System.Int32,Tunynet.Common.SortBy_Comment)">
            <summary>
            获取前topNumber条评论
            </summary>
            <param name="ownerId">评论拥有者Id</param>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="topNumber">获取的评论数量</param>
            <param name="sortBy">排序字段</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.ICommentRepository.GetComments(System.Nullable{Tunynet.Common.PubliclyAuditStatus},System.String,System.Nullable{System.Int64},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Int32,System.Int32)">
            <summary>
            查询用户评论
            </summary>
            <param name="publiclyAuditStatus">审核状态</param>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="userId">评论发布人UserId</param>
            <param name="startDate">开始时间</param>
            <param name="endDate">截止时间</param>
            <param name="pageSize">页大小</param>
            <param name="pageIndex">当前页码</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.CommentRepository.UpdateChildCount(System.Int64,System.Boolean)">
            <summary>
            更新父级ChildCount
            </summary>
            <param name="parentId">父级Id</param>
            <param name="isReduce">是否减少</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.CommentRepository.Delete(System.Int64)">
            <summary>
            删除评论 
            </summary>
            <param name="id">评论Id</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.CommentRepository.DeleteCommentedObjectComments(System.Int64)">
            <summary>
            删除被评论对象的所有评论
            </summary>
            <remarks>
            供被评论对象删除时调用
            </remarks>
            <param name="commentedObjectId">被评论对象Id</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.CommentRepository.DeleteUserComments(System.Int64,System.Boolean)">
            <summary>
             删除用户发布的评论
            </summary>
            <remarks>
            供用户删除时处理用户相关信息时调用
            </remarks>
            <param name="userId">UserId</param>
            <param name="reserveCommnetsAsAnonymous">true=保留用户发布的评论，但是修改为匿名用户；false=直接删除评论</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.CommentRepository.DeleteTrashDatas">
            <summary>
            删除垃圾数据
            </summary>
        </member>
        <member name="M:Tunynet.Common.Repositories.CommentRepository.GetCommentedObjectComments(System.Int64)">
            <summary>
            获取被评论对象的所有评论（用于删除被评论对象时的积分处理）
            </summary>
            <param name="commentedObjectId">被评论对象ID</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.CommentRepository.GetRootComments(System.String,System.Int64,System.Int32,Tunynet.Common.SortBy_Comment)">
            <summary>
            获取顶级评论列表
            </summary>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="commentedObjectId">被评论对象Id</param>
            <param name="pageIndex">当前页码</param>
            <param name="sortBy">排序字段</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.CommentRepository.GetChildren(System.Int64,System.Int32,Tunynet.Common.SortBy_Comment)">
            <summary>
            获取子级评论列表
            </summary>
            <param name="parentId">父评论Id</param>
            <param name="pageIndex">当前页码</param>
            <param name="sortBy">排序字段</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.CommentRepository.GetUserComments(System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Int32,System.Nullable{System.Boolean})">
            <summary>
            获取拥有者的评论
            </summary>
            <param name="ownerId">评论拥有者Id</param>
            <param name="userId">评论发布人UserId</param>
            <param name="tenantTypeId">租户类型Id（如果为null，则获取该拥有者所有评论）</param>
            <param name="startDate">开始时间</param>
            <param name="endDate">截止时间</param>
            <param name="pageIndex">当前页码</param>
            <param name="isMobileClient">是否是移动客户端</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.CommentRepository.GetNewComments(System.Int64,System.Int64)">
            <summary>
            获取新的评论（供移动客户端使用）
            </summary>
            <param name="ownerId"></param>
            <param name="oldCommentId"></param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.CommentRepository.GetTopComments(System.Int64,System.String,System.Int32,Tunynet.Common.SortBy_Comment)">
            <summary>
            获取前topNumber条评论
            </summary>
            <param name="ownerId">评论拥有者Id</param>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="topNumber">获取的评论数量</param>
            <param name="sortBy">排序字段</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.CommentRepository.GetComments(System.Nullable{Tunynet.Common.PubliclyAuditStatus},System.String,System.Nullable{System.Int64},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Int32,System.Int32)">
            <summary>
            查询用户评论
            </summary>
            <param name="publiclyAuditStatus">审核状态</param>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="userId">评论发布人UserId</param>
            <param name="startDate">开始时间</param>
            <param name="endDate">截止时间</param>
            <param name="pageSize">页大小</param>
            <param name="pageIndex">当前页码</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.CommentRepository.GetResolvedBody(System.Int64)">
            <summary>
            获取解析后的内容
            </summary>
            <param name="id">评论Id</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.CommentRepository.GetCachekey_GetRootComments(System.String,System.Int64,Tunynet.Common.SortBy_Comment)">
            <summary>
            获取一级回复的CacheKey
            </summary>
            <param name="tenantTypeId"></param>
            <param name="commentedObjectId"></param>
            <param name="sortBy"></param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.CommentRepository.GetCacheKey_GetChildren(System.Int64,Tunynet.Common.SortBy_Comment)">
            <summary>
            获取子级回复的CacheKey
            </summary>
            <param name="parentId"></param>
            <param name="pageIndex"></param>
            <param name="sortBy"></param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.CommentRepository.GetPageIndexForCommentInCommens(System.Int64,System.String,System.Int64,Tunynet.Common.SortBy_Comment)">
            <summary>
            获取一级评论在评论列表中的页码数
            </summary>
            <param name="commentId">评论id</param>
            <param name="tenantType">租户类型id</param>
            <param name="commentedObjectId">被评论对象id</param>
            <param name="sortBy">排序方式</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.CommentRepository.GetUserCommentCount(System.Int64,System.String)">
            <summary>
            获取用户发布的评论数
            </summary>
            <param name="userId"></param>
            <param name="tenantTypeId"></param>
            <returns></returns>
        </member>
        <member name="P:Tunynet.Common.Repositories.CommentRepository.PubliclyAuditStatus">
            <summary>
            微博应用可对外显示的审核状态
            </summary>
        </member>
        <member name="T:Tunynet.Common.PresentArea">
            <summary>
            呈现区域实体
            </summary>
        </member>
        <member name="M:Tunynet.Common.PresentArea.SplitThemeKeyAndAppearanceKey">
            <summary>
            从DefaultAppearanceId分隔ThemeKey和AppearanceKey
            </summary>
        </member>
        <member name="P:Tunynet.Common.PresentArea.PresentAreaKey">
            <summary>
            呈现区域标识（与目录名称相同）
            </summary>
        </member>
        <member name="P:Tunynet.Common.PresentArea.AllowMultipleInstances">
            <summary>
            是否可有多个实例
            </summary>
        </member>
        <member name="P:Tunynet.Common.PresentArea.EnableThemes">
            <summary>
            是否启用皮肤
            </summary>
        </member>
        <member name="P:Tunynet.Common.PresentArea.DefaultAppearanceID">
            <summary>
            默认皮肤（格式：PresentAreaKey,ThemeKey,AppearanceKey，与AppearanceID相同）
            </summary>
        </member>
        <member name="P:Tunynet.Common.PresentArea.ThemeLocation">
            <summary>
            皮肤文件所在位置（以”~/目录”表示）
            </summary>
        </member>
        <member name="P:Tunynet.Common.PresentArea.DefaultThemeKey">
            <summary>
            默认ThemeKey
            </summary>
        </member>
        <member name="P:Tunynet.Common.PresentArea.DefaultAppearanceKey">
            <summary>
            默认AppearanceKey
            </summary>
        </member>
        <member name="T:Tunynet.Common.PresentAreaKeysOfBuiltIn">
            <summary>
            内置的呈现区域标识
            </summary>
        </member>
        <member name="F:Tunynet.Common.PresentAreaKeysOfBuiltIn.UserSpace">
            <summary>
            用户空间
            </summary>        
        </member>
        <member name="F:Tunynet.Common.PresentAreaKeysOfBuiltIn.GroupSpace">
            <summary>
            群组
            </summary>
        </member>
        <member name="F:Tunynet.Common.PresentAreaKeysOfBuiltIn.Channel">
            <summary>
            频道
            </summary>
        </member>
        <member name="F:Tunynet.Common.PresentAreaKeysOfBuiltIn.ControlPanel">
            <summary>
            控制台（后台）
            </summary>
        </member>
        <member name="F:Tunynet.Common.PresentAreaKeysOfBuiltIn.Home">
            <summary>
            首页
            </summary>
        </member>
        <member name="T:Tunynet.Common.PresentAreaService">
            <summary>
            呈现区域业务逻辑
            </summary>
        </member>
        <member name="M:Tunynet.Common.PresentAreaService.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Tunynet.Common.PresentAreaService.#ctor(Tunynet.Repositories.IRepository{Tunynet.Common.PresentArea})">
            <summary>
            可设置repository的构造函数（主要用于测试用例）
            </summary>
            <param name="repository">PresentArea仓储</param>
        </member>
        <member name="M:Tunynet.Common.PresentAreaService.Get(System.String)">
            <summary>
            根据PresentAreaKey获取呈现区域
            </summary>
            <param name="presentAreaKey">呈现区域标识</param>
            <returns>返回presentAreaKey对应的PresentArea，如果不存在返回null</returns>
        </member>
        <member name="M:Tunynet.Common.PresentAreaService.GetAll">
            <summary>
            获取所有呈现区域
            </summary>
            <returns>返回所有呈现区域</returns>
        </member>
        <member name="M:Tunynet.Common.PresentAreaService.Update(Tunynet.Common.PresentArea)">
            <summary>
            更新呈现区域
            </summary>
            <param name="presentArea">PresentArea</param>        
        </member>
        <member name="T:Tunynet.Common.Configuration.PrivacySettings">
            <summary>
            动态配置
            </summary>
        </member>
        <member name="P:Tunynet.Common.Configuration.PrivacySettings.SpecifyUserMaxCount">
            <summary>
            允许用户指定可见人数的最大值
            </summary>
        </member>
        <member name="P:Tunynet.Common.Configuration.PrivacySettings.StopUserMaxCount">
            <summary>
            黑名单人数限制值
            </summary>
        </member>
        <member name="T:Tunynet.Common.ContentPrivacyService">
            <summary>
            内容隐私业务逻辑类
            </summary>
        </member>
        <member name="M:Tunynet.Common.ContentPrivacyService.#ctor">
            <summary>
            构造器
            </summary>
        </member>
        <member name="M:Tunynet.Common.ContentPrivacyService.#ctor(Tunynet.Common.Repositories.IContentPrivacySpecifyObjectsRepository)">
            <summary>
            构造器
            </summary>
            <param name="contentPrivacySpecifyObjectsRepository">内容隐私仓储</param>
        </member>
        <member name="M:Tunynet.Common.ContentPrivacyService.UpdatePrivacySettings(Tunynet.Common.IPrivacyable,System.Collections.Generic.Dictionary{System.Int32,System.Collections.Generic.IEnumerable{Tunynet.Common.ContentPrivacySpecifyObject}})">
            <summary>
            更新内容隐私设置
            </summary>
            <param name="privacyable">可隐私接口</param>
            <param name="specifyObjects"><remarks>key=specifyObjectTypeId,value=内容指定对象集合</remarks></param>
        </member>
        <member name="M:Tunynet.Common.ContentPrivacyService.GetPrivacySpecifyObjects(System.String,System.Int64)">
            <summary>
            获取内容隐私设置指定对象
            </summary>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="contentId">内容Id</param>
            <returns><remarks>key=specifyObjectTypeId,value=内容指定对象集合</remarks></returns>
        </member>
        <member name="M:Tunynet.Common.ContentPrivacyService.Validate(Tunynet.Common.IPrivacyable,System.Int64)">
            <summary>
            内容隐私验证
            </summary>        
            <param name="privacyable">可隐私接口</param>
            <param name="toUserId">被验证用户Id</param>
            <returns>true-验证通过，false-验证失败</returns>
        </member>
        <member name="T:Tunynet.Common.ContentPrivacySpecifyObject">
            <summary>
            内容隐私设置指定对象
            </summary>
        </member>
        <member name="M:Tunynet.Common.ContentPrivacySpecifyObject.New">
            <summary>
            新建实体时使用
            </summary>
        </member>
        <member name="P:Tunynet.Common.ContentPrivacySpecifyObject.Id">
             <summary>
            Id
             </summary>
        </member>
        <member name="P:Tunynet.Common.ContentPrivacySpecifyObject.TenantTypeId">
             <summary>
            内容项租户类型Id
             </summary>
        </member>
        <member name="P:Tunynet.Common.ContentPrivacySpecifyObject.ContentId">
             <summary>
            内容项Id
             </summary>
        </member>
        <member name="P:Tunynet.Common.ContentPrivacySpecifyObject.SpecifyObjectTypeId">
             <summary>
            被指定对象类型
             </summary>
        </member>
        <member name="P:Tunynet.Common.ContentPrivacySpecifyObject.SpecifyObjectId">
             <summary>
            被指定对象Id
             </summary>
        </member>
        <member name="P:Tunynet.Common.ContentPrivacySpecifyObject.SpecifyObjectName">
             <summary>
            被指定对象名称
             </summary>
        </member>
        <member name="P:Tunynet.Common.ContentPrivacySpecifyObject.DateCreated">
             <summary>
            创建时间
             </summary>
        </member>
        <member name="T:Tunynet.Common.IPrivacyable">
            <summary>
            可隐私接口
            </summary>
        </member>
        <member name="P:Tunynet.Common.IPrivacyable.ContentId">
            <summary>
            内容项Id
            </summary>
            <remarks>
            具体实现类显性实现
            </remarks>
        </member>
        <member name="P:Tunynet.Common.IPrivacyable.UserId">
            <summary>
            内容项作者Id
            </summary>
            <remarks>
            具体实现类显性实现
            </remarks>
        </member>
        <member name="P:Tunynet.Common.IPrivacyable.PrivacyStatus">
            <summary>
            隐私状态
            </summary>
            <remarks>一定不要显性实现</remarks>
        </member>
        <member name="P:Tunynet.Common.IPrivacyable.TenantTypeId">
            <summary>
            租户类型Id
            </summary>
            <remarks>
            具体实现类显性实现
            </remarks>
        </member>
        <member name="T:Tunynet.Common.IPrivacySpecifyObjectValidator">
            <summary>
            隐私指定对象验证器
            </summary>
        </member>
        <member name="M:Tunynet.Common.IPrivacySpecifyObjectValidator.Validate(System.Int64,System.Int64,System.Int64)">
            <summary>
            验证指定对象针对toUserId是否具有隐私权限
            </summary>
            <param name="userId">用户Id</param>
            <param name="toUserId">被验证用户</param>
            <param name="specifyObjectId">指定对象Id</param>
            <returns>true-成功，false-失败</returns>
        </member>
        <member name="T:Tunynet.Common.PrivacyItem">
            <summary>
            隐私项目
            </summary>
        </member>
        <member name="M:Tunynet.Common.PrivacyItem.New">
            <summary>
            新建实体时使用
            </summary>
        </member>
        <member name="P:Tunynet.Common.PrivacyItem.ItemKey">
             <summary>
            隐私项目标识
             </summary>
        </member>
        <member name="P:Tunynet.Common.PrivacyItem.ItemGroupId">
             <summary>
            隐私项目分组Id
             </summary>
        </member>
        <member name="P:Tunynet.Common.PrivacyItem.ApplicationId">
             <summary>
            应用程序Id
             </summary>
        </member>
        <member name="P:Tunynet.Common.PrivacyItem.ItemName">
             <summary>
            隐私项目名称
             </summary>
        </member>
        <member name="P:Tunynet.Common.PrivacyItem.Description">
             <summary>
            隐私项目描述
             </summary>
        </member>
        <member name="P:Tunynet.Common.PrivacyItem.DisplayOrder">
             <summary>
            排序序号
             </summary>
        </member>
        <member name="P:Tunynet.Common.PrivacyItem.PrivacyStatus">
             <summary>
            隐私状态
             </summary>
        </member>
        <member name="T:Tunynet.Common.PrivacyItemGroup">
            <summary>
            隐私项目分组实体类
            </summary>
        </member>
        <member name="M:Tunynet.Common.PrivacyItemGroup.#cctor">
            <summary>
            静态构造器
            </summary>
        </member>
        <member name="M:Tunynet.Common.PrivacyItemGroup.#ctor">
            <summary>
            构造器
            </summary>
        </member>
        <member name="M:Tunynet.Common.PrivacyItemGroup.GetAll">
            <summary>
            获取所有隐私项目类型
            </summary>
            <returns>通知类型</returns>
        </member>
        <member name="M:Tunynet.Common.PrivacyItemGroup.Get(System.Int32)">
            <summary>
            获取隐私项目类型
            </summary>
            <param name="typeId">类型Id</param>
            <returns>隐私项目类型</returns>
        </member>
        <member name="M:Tunynet.Common.PrivacyItemGroup.Add(Tunynet.Common.PrivacyItemGroup)">
            <summary>
            添加隐私项目类型
            </summary>
            <param name="PrivacyItemGroup">隐私项目类型</param>
        </member>
        <member name="P:Tunynet.Common.PrivacyItemGroup.TypeId">
            <summary>
            类型Id
            </summary>
        </member>
        <member name="P:Tunynet.Common.PrivacyItemGroup.TypeName">
            <summary>
            类型名称
            </summary>
        </member>
        <member name="P:Tunynet.Common.PrivacyItemGroup.Description">
            <summary>
            类型描述
            </summary>
        </member>
        <member name="T:Tunynet.Common.PrivacyItemGroupIds">
            <summary>
            隐私项目分组Id管理类
            </summary>
        </member>
        <member name="M:Tunynet.Common.PrivacyItemGroupIds.Instance">
            <summary>
            获取单例
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.PrivacyItemGroupIds.Profile">
            <summary>
            个人资料
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.PrivacyItemGroupIds.VisitSpace">
            <summary>
            空间访问
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.PrivacyItemGroupIds.Interactive">
            <summary>
            沟通互动
            </summary>
            <returns></returns>
        </member>
        <member name="T:Tunynet.Common.PrivacyItemKeys">
            <summary>
            隐私项目Key管理类
            </summary>
        </member>
        <member name="M:Tunynet.Common.PrivacyItemKeys.Instance">
            <summary>
            获取单例
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.PrivacyItemKeys.Birthday">
            <summary>
            生日
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.PrivacyItemKeys.Mobile">
            <summary>
            手机号码
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.PrivacyItemKeys.Email">
            <summary>
            联系邮箱
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.PrivacyItemKeys.QQ">
            <summary>
            QQ
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.PrivacyItemKeys.Msn">
            <summary>
            Msn
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.PrivacyItemKeys.EducationExperience">
            <summary>
            教育信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.PrivacyItemKeys.WorkExperience">
            <summary>
            职业信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.PrivacyItemKeys.VisitUserSpace">
            <summary>
            空间访问
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.PrivacyItemKeys.InviteFollow">
            <summary>
            求关注
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.PrivacyItemKeys.Follow">
            <summary>
            加关注
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.PrivacyItemKeys.Invitation">
            <summary>
            发请求
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.PrivacyItemKeys.Message">
            <summary>
            发私信
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.PrivacyItemKeys.Comment">
            <summary>
            评论
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.PrivacyItemKeys.AtUser">
            <summary>
            @提到我
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.PrivacyItemKeys.TrueName">
            <summary>
            真实姓名
            </summary>
            <returns></returns>
        </member>
        <member name="T:Tunynet.Common.PrivacyService">
            <summary>
            隐私业务逻辑类
            </summary>
        </member>
        <member name="M:Tunynet.Common.PrivacyService.#ctor">
            <summary>
            构造器
            </summary>
        </member>
        <member name="M:Tunynet.Common.PrivacyService.#ctor(Tunynet.Common.Repositories.IPrivacyItemRepository,Tunynet.Common.Repositories.IStopedUserRepository,Tunynet.Common.Repositories.IUserPrivacySettingRepository,Tunynet.Common.Repositories.IUserPrivacySpecifyObjectRepository)">
            <summary>
            构造器
            </summary>
            <param name="privacyItemRepository">PrivacyItemRepository仓储</param>
            <param name="stopedUserRepository">StopedUserRepository仓储</param>
            <param name="userPrivacySettingRepository">UserPrivacySettingRepository仓储</param>
            <param name="userPrivacySpecifyObjectRepository">UserPrivacySpecifyObjectRepository仓储</param>
        </member>
        <member name="M:Tunynet.Common.PrivacyService.GetPrivacyItem(System.String)">
            <summary>
            获取PrivacyItem
            </summary>
            <param name="itemKey">隐私项标识</param>
            <returns>PrivacyItem</returns>
        </member>
        <member name="M:Tunynet.Common.PrivacyService.GetPrivacyItems(System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            获取隐私项集合
            </summary>
            <param name="itemGroupId">隐私项目类型Id</param>
            <param name="applicationId">应用Id</param>
            <returns>隐私项集合</returns>
        </member>
        <member name="M:Tunynet.Common.PrivacyService.UpdatePrivacyItems(System.Collections.Generic.IEnumerable{Tunynet.Common.PrivacyItem})">
            <summary>
            更新隐私规则
            </summary>
            <param name="privacyItems">待更新的隐私项目规则集合</param>
        </member>
        <member name="M:Tunynet.Common.PrivacyService.CreateStopedUser(Tunynet.Common.StopedUser)">
            <summary>
            把用户加入黑名单
            </summary>
            <param name="stopedUser">黑名单</param>
        </member>
        <member name="M:Tunynet.Common.PrivacyService.DeleteStopedUser(System.Int64,System.Int64)">
            <summary>
            把用户从黑名单中删除
            </summary>
            <param name="userId">userId</param>
            <param name="toUserId">被加入黑名单的UserId</param>
        </member>
        <member name="M:Tunynet.Common.PrivacyService.GetStopedUsers(System.Int64)">
            <summary>
            获取用户的黑名单
            </summary>
            <returns><remarks>key=ToUserId,value=StopedUser</remarks></returns>
        </member>
        <member name="M:Tunynet.Common.PrivacyService.UpdateUserPrivacySettings(System.Int64,System.Collections.Generic.Dictionary{System.String,Tunynet.Common.PrivacyStatus},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.IEnumerable{Tunynet.Common.UserPrivacySpecifyObject}})">
            <summary>
            更新用户的隐私设置
            </summary>
            <param name="userId">用户Id</param>
            <param name="userSettings"><remarks>key=itemKey,value=PrivacyStatus</remarks></param>
            <param name="specifyObjects"><remarks>key=itemKey,value=用户指定对象集合</remarks></param>
        </member>
        <member name="M:Tunynet.Common.PrivacyService.ClearUserPrivacySettings(System.Int64)">
            <summary>
            清空用户隐私设置（用于恢复到默认设置）
            </summary>
            <param name="userId"></param>
        </member>
        <member name="M:Tunynet.Common.PrivacyService.GetUserPrivacySettings(System.Int64)">
            <summary>
            获取用户的隐私设置
            </summary>
            <param name="userId">用户Id</param>
            <returns><para>如果用户无设置返回空集合</para><remarks>key=itemKey,value=PrivacyStatus</remarks></returns>
        </member>
        <member name="M:Tunynet.Common.PrivacyService.GetUserPrivacySpecifyObjects(System.Int64,System.String)">
            <summary>
            获取用户隐私设置指定对象集合
            </summary>
            <param name="userId">用户Id</param>
            <param name="itemKey">隐私项目Key</param>
            <returns><remarks>key=specifyObjectTypeId,value=用户指定对象集合</remarks></returns>
        </member>
        <member name="M:Tunynet.Common.PrivacyService.IsStopedUser(System.Int64,System.Int64)">
            <summary>
            toUserId是不是userId阻止的用户
            </summary>
            <param name="userId">用户Id</param>
            <param name="toUserId">被判定用户Id</param>
            <returns>true-是黑名单用户，false-不是</returns>
        </member>
        <member name="M:Tunynet.Common.PrivacyService.Validate(System.Int64,System.Int64,System.String)">
            <overloads>隐私验证</overloads>
             <summary>
             隐私验证
             </summary>        
             <param name="userId">用户Id</param>
             <param name="toUserId">被验证用户Id</param>
             <param name="itemKey">隐私项目Key</param>
             <returns>true-验证通过，false-验证失败</returns>
        </member>
        <member name="M:Tunynet.Common.PrivacyService.ValidateUserPrivacySpecifyObject(System.Int64,System.Int64,System.String)">
            <summary>
            用户隐私验证指定对象
            </summary>        
            <param name="userId">用户Id</param>
            <param name="toUserId">被验证用户Id</param>
            <param name="itemKey">隐私项目Key</param>
            <returns>true-验证通过，false-验证失败</returns>
        </member>
        <member name="T:Tunynet.Common.Repositories.ContentPrivacySpecifyObjectsRepository">
            <summary>
            内容隐私设置指定对象仓储
            </summary>
        </member>
        <member name="T:Tunynet.Common.Repositories.IContentPrivacySpecifyObjectsRepository">
            <summary>
            内容隐私设置指定对象接口
            </summary>
        </member>
        <member name="M:Tunynet.Common.Repositories.IContentPrivacySpecifyObjectsRepository.GetPrivacySpecifyObjects(System.String,System.Int64)">
            <summary>
            获取内容隐私设置指定对象
            </summary>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="contentId">内容Id</param>
            <returns><remarks>key=specifyObjectTypeId,value=内容指定对象集合</remarks></returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.IContentPrivacySpecifyObjectsRepository.UpdatePrivacySettings(Tunynet.Common.IPrivacyable,System.Collections.Generic.Dictionary{System.Int32,System.Collections.Generic.IEnumerable{Tunynet.Common.ContentPrivacySpecifyObject}})">
            <summary>
            更新内容隐私设置
            </summary>
            <param name="privacyable">可隐私接口</param>
            <param name="specifyObjects"><remarks>key=specifyObjectTypeId,value=内容指定对象集合</remarks></param>
        </member>
        <member name="M:Tunynet.Common.Repositories.ContentPrivacySpecifyObjectsRepository.GetPrivacySpecifyObjects(System.String,System.Int64)">
            <summary>
            获取内容隐私设置指定对象
            </summary>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="contentId">内容Id</param>
            <returns><remarks>key=specifyObjectTypeId,value=内容指定对象集合</remarks></returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.ContentPrivacySpecifyObjectsRepository.UpdatePrivacySettings(Tunynet.Common.IPrivacyable,System.Collections.Generic.Dictionary{System.Int32,System.Collections.Generic.IEnumerable{Tunynet.Common.ContentPrivacySpecifyObject}})">
            <summary>
            更新内容隐私设置
            </summary>
            <param name="privacyable">可隐私接口</param>
            <param name="specifyObjects"><remarks>key=specifyObjectTypeId,value=内容指定对象集合</remarks></param>
        </member>
        <member name="T:Tunynet.Common.Repositories.IPrivacyItemRepository">
            <summary>
            隐私项目接口
            </summary>
        </member>
        <member name="M:Tunynet.Common.Repositories.IPrivacyItemRepository.UpdatePrivacyItems(System.Collections.Generic.IEnumerable{Tunynet.Common.PrivacyItem})">
            <summary>
            更新隐私规则
            </summary>
            <param name="privacyItems">待更新的隐私项目规则集合</param>
        </member>
        <member name="T:Tunynet.Common.Repositories.IStopedUserRepository">
            <summary>
            用户黑名单接口
            </summary>
        </member>
        <member name="M:Tunynet.Common.Repositories.IStopedUserRepository.GetStopedUsers(System.Int64)">
            <summary>
            获取用户的黑名单
            </summary>
            <returns><remarks>key=ToUserId,value=StopedUser</remarks></returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.IStopedUserRepository.CreateStopedUser(Tunynet.Common.StopedUser)">
            <summary>
            把用户加入黑名单
            </summary>
            <param name="stopedUser">黑名单</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.IStopedUserRepository.DeleteStopedUser(Tunynet.Common.StopedUser)">
            <summary>
            把用户从黑名单中删除
            <param name="stopedUser">黑名单</param>
            </summary>
        </member>
        <member name="T:Tunynet.Common.Repositories.IUserPrivacySettingRepository">
            <summary>
            用户隐私设置接口
            </summary>
        </member>
        <member name="M:Tunynet.Common.Repositories.IUserPrivacySettingRepository.UpdateUserPrivacySettings(System.Int64,System.Collections.Generic.Dictionary{System.String,Tunynet.Common.PrivacyStatus})">
            <summary>
            更新用户的隐私设置
            </summary>
            <param name="userId">用户Id</param>
            <param name="userSettings"><remarks>key=itemKey,value=PrivacyStatus</remarks></param>
        </member>
        <member name="M:Tunynet.Common.Repositories.IUserPrivacySettingRepository.GetUserPrivacySettings(System.Int64)">
            <summary>
            获取用户的隐私设置
            </summary>
            <param name="userId">用户Id</param>
            <returns><para>如果用户无设置返回空集合</para><remarks>key=itemKey,value=PrivacyStatus</remarks></returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.IUserPrivacySettingRepository.ClearUserPrivacySettings(System.Int64)">
            <summary>
            清空用户隐私设置（用于恢复到默认设置）
            </summary>
            <param name="userId"></param>
        </member>
        <member name="T:Tunynet.Common.Repositories.IUserPrivacySpecifyObjectRepository">
            <summary>
            用户隐私设置指定对象接口
            </summary>
        </member>
        <member name="M:Tunynet.Common.Repositories.IUserPrivacySpecifyObjectRepository.UpdateUserPrivacySpecifyObjects(System.Int64,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.IEnumerable{Tunynet.Common.UserPrivacySpecifyObject}})">
            <summary>
            更新用户隐私设置指定对象
            </summary>
            <param name="userId">用户Id</param>
            <param name="userSettings"><remarks>key=itemKey,value=PrivacyStatus</remarks></param>
            <param name="specifyObjects"><remarks>key=itemKey,value=用户指定对象集合</remarks></param>
        </member>
        <member name="M:Tunynet.Common.Repositories.IUserPrivacySpecifyObjectRepository.GetUserPrivacySpecifyObjects(System.Int64,System.String)">
            <summary>
            获取用户隐私设置指定对象集合
            </summary>
            <param name="userId">用户Id</param>
            <param name="itemKey">隐私项目Key</param>
            <returns><remarks>key=specifyObjectTypeId,value=用户指定对象集合</remarks></returns>
        </member>
        <member name="T:Tunynet.Common.Repositories.PrivacyItemRepository">
            <summary>
            隐私项目仓储
            </summary>
        </member>
        <member name="M:Tunynet.Common.Repositories.PrivacyItemRepository.UpdatePrivacyItems(System.Collections.Generic.IEnumerable{Tunynet.Common.PrivacyItem})">
            <summary>
            更新隐私规则
            </summary>
            <param name="privacyItems">待更新的隐私项目规则集合</param>
        </member>
        <member name="T:Tunynet.Common.Repositories.StopedUserRepository">
            <summary>
            用户黑名单仓储
            </summary>
        </member>
        <member name="M:Tunynet.Common.Repositories.StopedUserRepository.GetStopedUsers(System.Int64)">
            <summary>
            获取用户的黑名单
            </summary>
            <returns><remarks>key=ToUserId,value=StopedUser</remarks></returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.StopedUserRepository.CreateStopedUser(Tunynet.Common.StopedUser)">
            <summary>
            把用户加入黑名单
            </summary>
            <param name="stopedUser">黑名单</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.StopedUserRepository.DeleteStopedUser(Tunynet.Common.StopedUser)">
            <summary>
            把用户从黑名单中删除
            </summary>
            <param name="stopedUser">黑名单用户</param>
        </member>
        <member name="T:Tunynet.Common.Repositories.UserPrivacySettingRepository">
            <summary>
            用户隐私设置仓储
            </summary>
        </member>
        <member name="M:Tunynet.Common.Repositories.UserPrivacySettingRepository.UpdateUserPrivacySettings(System.Int64,System.Collections.Generic.Dictionary{System.String,Tunynet.Common.PrivacyStatus})">
            <summary>
            更新用户的隐私设置
            </summary>
            <param name="userId">用户Id</param>
            <param name="userSettings"><remarks>key=itemKey,value=PrivacyStatus</remarks></param>
        </member>
        <member name="M:Tunynet.Common.Repositories.UserPrivacySettingRepository.GetUserPrivacySettings(System.Int64)">
            <summary>
             获取用户的隐私设置
             </summary>
             <param name="userId">用户Id</param>
             <returns><para>如果用户无设置返回空集合</para><remarks>key=itemKey,value=PrivacyStatus</remarks></returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.UserPrivacySettingRepository.ClearUserPrivacySettings(System.Int64)">
            <summary>
            清空用户隐私设置（用于恢复到默认设置）
            </summary>
            <param name="userId"></param>
        </member>
        <member name="T:Tunynet.Common.Repositories.UserPrivacySpecifyObjectRepository">
            <summary>
            用户隐私设置指定对象仓储
            </summary>
        </member>
        <member name="M:Tunynet.Common.Repositories.UserPrivacySpecifyObjectRepository.UpdateUserPrivacySpecifyObjects(System.Int64,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.IEnumerable{Tunynet.Common.UserPrivacySpecifyObject}})">
            <summary>
            更新用户隐私设置指定对象
            </summary>
            <param name="userId">用户Id</param>
            <param name="specifyObjects"><remarks>key=itemKey,value=用户指定对象集合</remarks></param>
        </member>
        <member name="M:Tunynet.Common.Repositories.UserPrivacySpecifyObjectRepository.GetUserPrivacySpecifyObjects(System.Int64,System.String)">
            <summary>
            获取用户隐私设置指定对象集合
            </summary>
            <param name="userId">用户Id</param>
            <param name="itemKey">隐私项目Key</param>
            <returns><remarks>key=specifyObjectTypeId,value=用户指定对象集合</remarks></returns>
        </member>
        <member name="T:Tunynet.Common.SpecifyObjectType">
            <summary>
            隐私设置指定对象类型
            </summary>
        </member>
        <member name="M:Tunynet.Common.SpecifyObjectType.#cctor">
            <summary>
            静态构造器
            </summary>
        </member>
        <member name="M:Tunynet.Common.SpecifyObjectType.#ctor">
            <summary>
            构造器
            </summary>
        </member>
        <member name="M:Tunynet.Common.SpecifyObjectType.GetAll">
            <summary>
            获取所有隐私设置指定对象类型
            </summary>
            <returns>隐私类型</returns>
        </member>
        <member name="M:Tunynet.Common.SpecifyObjectType.Get(System.Int32)">
            <summary>
            获取隐私设置指定对象类型
            </summary>
            <param name="typeId">类型Id</param>
            <returns>隐私设置指定对象类型</returns>
        </member>
        <member name="M:Tunynet.Common.SpecifyObjectType.Add(Tunynet.Common.SpecifyObjectType)">
            <summary>
            添加隐私设置指定对象类型
            </summary>
            <param name="PrivacyItemType">隐私设置指定对象类型</param>
        </member>
        <member name="P:Tunynet.Common.SpecifyObjectType.TypeId">
            <summary>
            类型Id
            </summary>
        </member>
        <member name="P:Tunynet.Common.SpecifyObjectType.TypeName">
            <summary>
            类型名称
            </summary>
        </member>
        <member name="P:Tunynet.Common.SpecifyObjectType.Description">
            <summary>
            类型描述
            </summary>
        </member>
        <member name="T:Tunynet.Common.SpecifyObjectTypeIds">
            <summary>
            隐私设置指定对象类型Id管理类
            </summary>
        </member>
        <member name="M:Tunynet.Common.SpecifyObjectTypeIds.Instance">
            <summary>
            获取单例
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.SpecifyObjectTypeIds.User">
            <summary>
            指定人
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.SpecifyObjectTypeIds.UserGroup">
            <summary>
            指定关注分组
            </summary>
            <returns></returns>
        </member>
        <member name="T:Tunynet.Common.StopedUser">
            <summary>
            用户黑名单
            </summary>
        </member>
        <member name="M:Tunynet.Common.StopedUser.New">
            <summary>
            新建实体时使用
            </summary>
        </member>
        <member name="P:Tunynet.Common.StopedUser.Id">
             <summary>
            Id
             </summary>
        </member>
        <member name="P:Tunynet.Common.StopedUser.UserId">
             <summary>
            用户Id
             </summary>
        </member>
        <member name="P:Tunynet.Common.StopedUser.ToUserId">
             <summary>
            被阻止用户Id
             </summary>
        </member>
        <member name="P:Tunynet.Common.StopedUser.ToUserDisplayName">
             <summary>
            被阻止用户名称
             </summary>
        </member>
        <member name="T:Tunynet.Common.UserGroupPrivacySpecifyObjectValidator">
            <summary>
            隐私指定关注分组验证器
            </summary>
        </member>
        <member name="M:Tunynet.Common.UserGroupPrivacySpecifyObjectValidator.Tunynet#Common#IPrivacySpecifyObjectValidator#Validate(System.Int64,System.Int64,System.Int64)">
            <summary>
            验证指定对象针对toUserId是否具有隐私权限
            </summary>
            <param name="userId">用户Id</param>
            <param name="toUserId">被验证用户</param>
            <param name="specifyObjectId">指定对象Id</param>
            <returns>true-成功，false-失败</returns>
        </member>
        <member name="T:Tunynet.Common.UserPrivacySetting">
            <summary>
            用户隐私设置
            </summary>
        </member>
        <member name="M:Tunynet.Common.UserPrivacySetting.New">
            <summary>
            新建实体时使用
            </summary>
        </member>
        <member name="P:Tunynet.Common.UserPrivacySetting.Id">
             <summary>
            Id
             </summary>
        </member>
        <member name="P:Tunynet.Common.UserPrivacySetting.UserId">
             <summary>
            用户Id
             </summary>
        </member>
        <member name="P:Tunynet.Common.UserPrivacySetting.ItemKey">
             <summary>
            类型Id
             </summary>
        </member>
        <member name="P:Tunynet.Common.UserPrivacySetting.PrivacyStatus">
             <summary>
            隐私状态
             </summary>
        </member>
        <member name="T:Tunynet.Common.UserPrivacySpecifyObject">
            <summary>
            用户隐私设置指定对象
            </summary>
        </member>
        <member name="M:Tunynet.Common.UserPrivacySpecifyObject.New">
            <summary>
            新建实体时使用
            </summary>
        </member>
        <member name="P:Tunynet.Common.UserPrivacySpecifyObject.Id">
             <summary>
            Id
             </summary>
        </member>
        <member name="P:Tunynet.Common.UserPrivacySpecifyObject.UserPrivacySettingId">
             <summary>
            用户隐私设置Id
             </summary>
        </member>
        <member name="P:Tunynet.Common.UserPrivacySpecifyObject.SpecifyObjectTypeId">
             <summary>
            被指定对象类型
             </summary>
        </member>
        <member name="P:Tunynet.Common.UserPrivacySpecifyObject.SpecifyObjectId">
             <summary>
            被指定对象Id
             </summary>
        </member>
        <member name="P:Tunynet.Common.UserPrivacySpecifyObject.SpecifyObjectName">
             <summary>
            被指定对象名称
             </summary>
        </member>
        <member name="P:Tunynet.Common.UserPrivacySpecifyObject.DateCreated">
             <summary>
            创建时间
             </summary>
        </member>
        <member name="T:Tunynet.Common.UserPrivacySpecifyObjectValidator">
            <summary>
            隐私指定人验证器
            </summary>
        </member>
        <member name="M:Tunynet.Common.UserPrivacySpecifyObjectValidator.Tunynet#Common#IPrivacySpecifyObjectValidator#Validate(System.Int64,System.Int64,System.Int64)">
            <summary>
            验证指定对象针对toUserId是否具有隐私权限
            </summary>
            <param name="userId">用户Id</param>
            <param name="toUserId">被验证用户</param>
            <param name="specifyObjectId">指定对象Id</param>
            <returns>true-成功，false-失败</returns>
        </member>
        <member name="T:Tunynet.Common.BlockedObjectTypes">
            <summary>
            被屏蔽对象类型
            </summary>
        </member>
        <member name="M:Tunynet.Common.BlockedObjectTypes.Instance">
            <summary>
            获取单例
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.BlockedObjectTypes.User">
            <summary>
            用户
            </summary>
            <returns>返回用户对应的被屏蔽对象类型</returns>
        </member>
        <member name="M:Tunynet.Common.BlockedObjectTypes.Group">
            <summary>
            群组
            </summary>
            <returns>返回群组对应的被屏蔽对象类型</returns>
        </member>
        <member name="T:Tunynet.Common.Repositories.IUserBlockRepository">
            <summary>
            屏蔽 数据访问借口
            </summary>
        </member>
        <member name="M:Tunynet.Common.Repositories.IUserBlockRepository.GetBlockedObjects(System.Int64,System.Int32)">
            <summary>
            获取y用户的屏蔽对象列表
            </summary>
            <param name="userId">用户id</param>
            <param name="objectType">被屏蔽的类型</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.IUserBlockRepository.CleanByUser(System.Int64)">
            <summary>
            清除根据用户删除数据（删除 用户的时候使用）
            </summary>
            <param name="userId">用户id</param>
            <returns>是否成功清除数据</returns>
        </member>
        <member name="T:Tunynet.Common.Repositories.UserBlockRepository">
            <summary>
            屏蔽用户的数据访问
            </summary>
        </member>
        <member name="M:Tunynet.Common.Repositories.UserBlockRepository.GetBlockedObjects(System.Int64,System.Int32)">
            <summary>
            获取被屏蔽对象列表
            </summary>
            <param name="userId">>UserId</param>
            <param name="objectType">被屏蔽对象类型</param>
            <returns>被屏蔽对象列表</returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.UserBlockRepository.GetCacheKey_BlockedObjects(System.Int64,System.Int32)">
            <summary>
            获取cachekey
            </summary>
            <param name="userId">用户id</param>
            <param name="objectType">保存数据类型</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.UserBlockRepository.CleanByUser(System.Int64)">
            <summary>
            清除用户数据（删除用户时使用）
            </summary>
            <param name="userId">用户id</param>
            <returns>是否成功删除</returns>
        </member>
        <member name="T:Tunynet.Common.UserBlockedObject">
            <summary>
            用户屏蔽的对象
            </summary>
        </member>
        <member name="P:Tunynet.Common.UserBlockedObject.Id">
            <summary>
            id
            </summary>
        </member>
        <member name="P:Tunynet.Common.UserBlockedObject.UserId">
            <summary>
            用户id
            </summary>
        </member>
        <member name="P:Tunynet.Common.UserBlockedObject.ObjectType">
            <summary>
            被屏蔽的类型
            </summary>
        </member>
        <member name="P:Tunynet.Common.UserBlockedObject.ObjectId">
            <summary>
            被屏蔽对象id
            </summary>
        </member>
        <member name="P:Tunynet.Common.UserBlockedObject.ObjectName">
            <summary>
            被屏蔽对象名
            </summary>
        </member>
        <member name="P:Tunynet.Common.UserBlockedObject.DateCreated">
            <summary>
            屏蔽创建名
            </summary>
        </member>
        <member name="T:Tunynet.Common.UserBlockService">
            <summary>
            用户屏蔽业务逻辑类
            </summary>
        </member>
        <member name="M:Tunynet.Common.UserBlockService.#ctor">
            <summary>
            屏蔽用户屏蔽群组
            </summary>
        </member>
        <member name="M:Tunynet.Common.UserBlockService.#ctor(Tunynet.Common.Repositories.IUserBlockRepository)">
            <summary>
            带参数的构造方法
            </summary>
            <param name="userBlockRepository"></param>
        </member>
        <member name="M:Tunynet.Common.UserBlockService.BlockUser(System.Int64,System.Int64,System.String)">
            <summary>
            屏蔽用户
            </summary>
            <param name="userId">屏蔽人UserId</param>
            <param name="blockedUserId">被屏蔽UserId</param>
            <param name="blockedDisplayName">被屏蔽用户DisplayName</param>
        </member>
        <member name="M:Tunynet.Common.UserBlockService.BlockGroup(System.Int64,System.Int64,System.String)">
            <summary>
            屏蔽群组
            </summary>
            <param name="userId">屏蔽人UserId</param>
            <param name="blockedGroupId">被屏蔽群组Id</param>
            <param name="blockedGroupName">被屏蔽群组名称</param>
        </member>
        <member name="M:Tunynet.Common.UserBlockService.Create(System.Int64,System.Int32,System.Int64,System.String)">
            <summary>
            添加屏蔽对象
            </summary>
            <param name="userId">屏蔽人UserId</param>
            <param name="objectType">被屏蔽对象类型</param>
            <param name="objectId">被屏蔽对象Id</param>
            <param name="objectName">被屏蔽对象名称</param>
        </member>
        <member name="M:Tunynet.Common.UserBlockService.Delete(System.Int64)">
            <summary>
            删除被屏蔽对象
            </summary>
            <param name="id">Id</param>
        </member>
        <member name="M:Tunynet.Common.UserBlockService.IsBlockedUser(System.Int64,System.Int64)">
            <summary>
            用户是否被屏蔽
            </summary>
            <param name="userId">UserId</param>
            <param name="checkingUserId">被检查的UserId</param>
            <returns>如果checkingUserId被userId屏蔽，则返回true</returns>
        </member>
        <member name="M:Tunynet.Common.UserBlockService.IsBlockedGroup(System.Int64,System.Int64)">
            <summary>
            群组是否被屏蔽
            </summary>
            <param name="userId">UserId</param>
            <param name="checkingGroupId">被检查的群组Id</param>
            <returns>如果checkingGroupId被userId屏蔽，则返回true</returns>
        </member>
        <member name="M:Tunynet.Common.UserBlockService.IsBlocked(System.Int64,System.Int32,System.Int64)">
            <summary>
            是否被屏蔽
            </summary>
            <param name="userId">UserId</param>
            <param name="objectType">被屏蔽对象类型</param>
            <param name="objectId">被屏蔽对象Id</param>
            <returns>如果objectId被userId屏蔽，则返回true</returns>
        </member>
        <member name="M:Tunynet.Common.UserBlockService.GetBlockedUsers(System.Int64)">
            <summary>
            获取用户的屏蔽用户列表
            </summary>
            <param name="userId">UserId</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.UserBlockService.GetBlockedGroups(System.Int64)">
            <summary>
            获取用户的屏蔽群组列表
            </summary>
            <param name="userId">UserId</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.UserBlockService.GetBlockedObjects(System.Int64,System.Int32)">
            <summary>
            获取y用户的屏蔽对象列表
            </summary>
            <param name="userId">UserId</param>
            <param name="objectType">被屏蔽对象类型</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.UserBlockService.CleanByUser(System.Int64)">
            <summary>
            清除数据根据用户id（删除用户的时候使用）
            </summary>
            <param name="userId">用户id</param>
            <returns>是否成功清除数据</returns>
        </member>
        <member name="T:Tunynet.Search.CountTypesExtension">
            <summary>
            计数类型扩展
            </summary>
        </member>
        <member name="M:Tunynet.Search.CountTypesExtension.SearchCount(Tunynet.Common.CountTypes)">
            <summary>
            搜索次数
            </summary>
        </member>
        <member name="T:Tunynet.Search.Repositories.ISearchedTermRepository">
            <summary>
            搜索热词仓储接口
            </summary>
        </member>
        <member name="M:Tunynet.Search.Repositories.ISearchedTermRepository.InsertOrUpdate(System.String,System.String,System.Boolean)">
            <summary>
            添加或更新搜索热词
            </summary>
            <param name="searchTypeCode">搜索类型编码</param>
            <param name="term">搜索词</param>
        </member>
        <member name="M:Tunynet.Search.Repositories.ISearchedTermRepository.GetManuals(System.String)">
            <summary>
            获取人工干预的搜索词
            </summary>
            <param name="searchTypeCode">搜索类型编码</param>
            <returns>符合条件的搜索词集合</returns>
        </member>
        <member name="M:Tunynet.Search.Repositories.ISearchedTermRepository.GetManuals(System.String,System.String)">
            <summary>
            获取匹配的人工干预的搜索词
            </summary>
            <param name="keyword">要匹配的关键字</param>
            <param name="searchTypeCode">搜索类型编码</param>
            <returns>符合条件的搜索词集合</returns>
        </member>
        <member name="M:Tunynet.Search.Repositories.ISearchedTermRepository.GetTops(System.Int32,System.String)">
            <summary>
            获取前N条最热的搜索词（仅非人工干预）
            </summary>
            <param name="topNumber">获取的数据条数</param>
            <param name="searchTypeCode">搜索类型编码</param>
            <returns>用户最多搜索的前topNumber的搜索词</returns>
        </member>
        <member name="M:Tunynet.Search.Repositories.ISearchedTermRepository.GetTops(System.String,System.Int32,System.String)">
            <summary>
            获取匹配的前N条最热的搜索词（仅非人工干预）
            </summary>
            <param name="keyword">要匹配的关键字</param>
            <param name="topNumber">获取的数据条数</param>
            <param name="searchTypeCode">搜索类型编码</param>
            <returns>用户最多搜索的前topNumber的搜索词</returns>
        </member>
        <member name="M:Tunynet.Search.Repositories.ISearchedTermRepository.Gets(System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Boolean,System.Int32,System.Int32)">
            <summary>
            分页获取搜索词（仅非人工干预）
            </summary>
            <param name="searchTypeCode">搜索类型编码</param>
            <param name="term">搜索词</param>
            <param name="startDate">开始日期</param>
            <param name="endDate">结束日期</param>
            <param name="isRealtime">是否实时缓存</param>
            <param name="pageIndex">当前页码</param>
            <param name="pageSize">每页条数</param>
            <returns>按条件检索的热词</returns>
        </member>
        <member name="M:Tunynet.Search.Repositories.ISearchedTermRepository.JudgeDisplayOrder(System.Int64,System.Boolean@,System.Boolean@,System.Int64@,System.Int64@)">
            <summary>
            判定搜索词的DisplayOrder可以做哪些调整
            </summary>
            <param name="id">Id</param>
            <param name="isFirst">在人工干预同类型搜索词中是否处于首位</param>
            <param name="isLast">在人工干预同类型搜索词中是否处于末位</param>
            <param name="decreaseReferenceId">降低DisplayOrder时参照的Id</param>
            <param name="increaseReferenceId">增加DisplayOrder时参照的Id</param>
        </member>
        <member name="M:Tunynet.Search.Repositories.ISearchedTermRepository.ChangeDisplayOrder(System.Int64,System.Int64)">
            <summary>
            变更搜索词的排列顺序
            </summary>
            <param name="id">待调整的Id</param>
            <param name="referenceId">参照Id</param>        
        </member>
        <member name="M:Tunynet.Search.Repositories.ISearchedTermRepository.DeleteByEntityId(System.Object)">
            <summary>
            从数据库删除实体
            </summary>
            <param name="entityId">主键</param>
            <returns>影响的记录数</returns>
        </member>
        <member name="M:Tunynet.Search.Repositories.ISearchedTermRepository.Update(System.Int64,System.String,System.String)">
            <summary>
            更新管理员添加的搜索词
            </summary>
            <param name="id">搜索词Id</param>
            <param name="term">搜索词</param>
            <param name="searchTypeCode">搜索类型编码</param>
        </member>
        <member name="T:Tunynet.Search.Repositories.ISearchHistoryRepository">
            <summary>
            搜索历史仓储接口
            </summary>
        </member>
        <member name="M:Tunynet.Search.Repositories.ISearchHistoryRepository.Insert(System.Int64,System.String,System.String)">
            <summary>
            添加搜索历史
            </summary>
            <param name="userId">UserId</param>
            <param name="searchTypeCode">搜索类型编码</param>
            <param name="term">搜索词</param>
        </member>
        <member name="M:Tunynet.Search.Repositories.ISearchHistoryRepository.Clear(System.Int64,System.String)">
            <summary>
            清除用户的搜索历史
            </summary>
            <param name="userId">UserId</param>
            <param name="searchTypeCode">搜索类型编码</param>        
        </member>
        <member name="M:Tunynet.Search.Repositories.ISearchHistoryRepository.Gets(System.Int64,System.String)">
            <summary>
            获取用户的搜索历史
            </summary>
            <param name="userId">UserId</param>
            <param name="searchTypeCode">搜索类型编码</param>
            <returns>按使用时间倒序排列的搜索词</returns>
        </member>
        <member name="T:Tunynet.Search.Repositories.SearchedTermRepository">
            <summary>
            搜索热词仓储
            </summary>
        </member>
        <member name="M:Tunynet.Search.Repositories.SearchedTermRepository.InsertOrUpdate(System.String,System.String,System.Boolean)">
            <summary>
            添加或更新搜索热词
            </summary>
            <param name="searchTypeCode">搜索类型编码</param>
            <param name="term">搜索词</param>
            <param name="isAddedByAdministrator">是否由管理员添加</param>
        </member>
        <member name="M:Tunynet.Search.Repositories.SearchedTermRepository.Update(System.Int64,System.String,System.String)">
            <summary>
            更新管理员添加的搜索词
            </summary>
            <param name="id">搜索词Id</param>
            <param name="term">搜索词</param>
            <param name="searchTypeCode">搜索类型编码</param>
        </member>
        <member name="M:Tunynet.Search.Repositories.SearchedTermRepository.DeleteByEntityId(System.Object)">
            <summary>
            删除
            </summary>
            <param name="entityId">主键</param>
            <returns>影响的记录数</returns>
        </member>
        <member name="M:Tunynet.Search.Repositories.SearchedTermRepository.Delete(Tunynet.Search.SearchedTerm)">
            <summary>
            删除
            </summary>
            <param name="entity">实体</param>
            <returns>影响的记录数</returns>
        </member>
        <member name="M:Tunynet.Search.Repositories.SearchedTermRepository.GetManuals(System.String)">
            <summary>
            获取人工干预的搜索词
            </summary>
            <param name="searchTypeCode">搜索类型编码</param>
            <returns>符合条件的搜索词集合</returns>
        </member>
        <member name="M:Tunynet.Search.Repositories.SearchedTermRepository.GetManuals(System.String,System.String)">
            <summary>
            获取匹配的人工干预的搜索词
            </summary>
            <param name="keyword">要匹配的关键字</param>
            <param name="searchTypeCode">搜索类型编码</param>
            <returns>符合条件的搜索词集合</returns>
        </member>
        <member name="M:Tunynet.Search.Repositories.SearchedTermRepository.GetTops(System.Int32,System.String)">
            <summary>
            获取前N条最热的搜索词（仅非人工干预）
            </summary>
            <param name="topNumber">获取的数据条数</param>
            <param name="searchTypeCode">搜索类型编码</param>
            <returns>用户最多搜索的前topNumber的搜索词</returns>
        </member>
        <member name="M:Tunynet.Search.Repositories.SearchedTermRepository.GetTops(System.String,System.Int32,System.String)">
            <summary>
            获取匹配的前N条最热的搜索词（仅非人工干预）
            </summary>
            <param name="keyword">要匹配的关键字</param>
            <param name="topNumber">获取的数据条数</param>
            <param name="searchTypeCode">搜索类型编码</param>
            <returns>用户最多搜索的前topNumber的搜索词</returns>
        </member>
        <member name="M:Tunynet.Search.Repositories.SearchedTermRepository.Gets(System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Boolean,System.Int32,System.Int32)">
            <summary>
            分页获取搜索词（仅非人工干预）
            </summary>
            <param name="searchTypeCode">搜索类型编码</param>
            <param name="term">搜索词</param>
            <param name="startDate">开始日期</param>
            <param name="endDate">结束日期</param>
            <param name="isRealtime">是否实时缓存</param>
            <param name="pageIndex">当前页码</param>
            <param name="pageSize">每页条数</param>
            <returns>按条件检索的热词</returns>
        </member>
        <member name="M:Tunynet.Search.Repositories.SearchedTermRepository.JudgeDisplayOrder(System.Int64,System.Boolean@,System.Boolean@,System.Int64@,System.Int64@)">
            <summary>
            判定搜索词的DisplayOrder可以做哪些调整
            </summary>
            <param name="id">Id</param>
            <param name="isFirst">在人工干预同类型搜索词中是否处于首位</param>
            <param name="isLast">在人工干预同类型搜索词中是否处于末位</param>
            <param name="decreaseReferenceId">降低DisplayOrder时参照的Id</param>
            <param name="increaseReferenceId">增加DisplayOrder时参照的Id</param>
        </member>
        <member name="M:Tunynet.Search.Repositories.SearchedTermRepository.ChangeDisplayOrder(System.Int64,System.Int64)">
            <summary>
            变更搜索词的排列顺序
            </summary>
            <param name="id">待调整的Id</param>
            <param name="referenceId">参照Id</param>        
        </member>
        <member name="T:Tunynet.Search.Repositories.SearchHistoryRepository">
            <summary>
            搜索历史仓储
            </summary>
        </member>
        <member name="M:Tunynet.Search.Repositories.SearchHistoryRepository.#ctor(System.Web.HttpContextBase)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Tunynet.Search.Repositories.SearchHistoryRepository.#ctor(System.Web.HttpContext)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Tunynet.Search.Repositories.SearchHistoryRepository.Insert(System.Int64,System.String,System.String)">
            <summary>
            添加搜索历史
            </summary>
            <param name="userId">UserId</param>
            <param name="searchTypeCode">搜索类型编码</param>
            <param name="term">搜索词</param>
        </member>
        <member name="M:Tunynet.Search.Repositories.SearchHistoryRepository.Clear(System.Int64,System.String)">
            <summary>
            清除用户的搜索历史
            </summary>
            <param name="userId">UserId</param>
            <param name="searchTypeCode">搜索类型编码</param>   
        </member>
        <member name="M:Tunynet.Search.Repositories.SearchHistoryRepository.Gets(System.Int64,System.String)">
            <summary>
            获取用户的搜索历史
            </summary>
            <param name="userId">UserId</param>
            <param name="searchTypeCode">搜索类型编码</param>
            <returns>按使用时间倒序排列的搜索词</returns>
        </member>
        <member name="M:Tunynet.Search.Repositories.SearchHistoryRepository.GetCookie(System.Int64,System.String)">
            <summary>
            获取HttpCookie
            </summary>
            <param name="userId"></param>
            <param name="searchTypeCode"></param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Search.Repositories.SearchHistoryRepository.WriteCookie(System.Web.HttpCookie)">
            <summary>
            写入cookie
            </summary>
            <remarks>cookie过期时间为1年</remarks>
        </member>
        <member name="T:Tunynet.Search.SearchedTerm">
            <summary>
            搜索词
            </summary>
        </member>
        <member name="M:Tunynet.Search.SearchedTerm.New">
            <summary>
            新建实体时使用
            </summary>
        </member>
        <member name="P:Tunynet.Search.SearchedTerm.Id">
             <summary>
            Id（使用Id生成器自动生成）
             </summary>
        </member>
        <member name="P:Tunynet.Search.SearchedTerm.Term">
             <summary>
            搜索词
             </summary>
        </member>
        <member name="P:Tunynet.Search.SearchedTerm.SearchTypeCode">
             <summary>
            搜索类型编码
             </summary>
        </member>
        <member name="P:Tunynet.Search.SearchedTerm.IsAddedByAdministrator">
             <summary>
            是否由管理员添加（人工干预）
             </summary>
        </member>
        <member name="P:Tunynet.Search.SearchedTerm.DisplayOrder">
             <summary>
            排序字段（默认与Id相同）
             </summary>
        </member>
        <member name="P:Tunynet.Search.SearchedTerm.DateCreated">
             <summary>
            创建时间
             </summary>
        </member>
        <member name="P:Tunynet.Search.SearchedTerm.LastModified">
             <summary>
            最后使用日期
             </summary>
        </member>
        <member name="T:Tunynet.Search.SearchedTermService">
            <summary>
            搜索热词业务逻辑类
            </summary>
        </member>
        <member name="M:Tunynet.Search.SearchedTermService.#ctor">
            <summary>
            构造器
            </summary>
        </member>
        <member name="M:Tunynet.Search.SearchedTermService.#ctor(Tunynet.Search.Repositories.ISearchedTermRepository)">
            <summary>
            构造器
            </summary>
            <param name="searchedTermRepository">SearchedTermRepository仓储</param>
        </member>
        <member name="M:Tunynet.Search.SearchedTermService.SearchTerm(System.String,System.String)">
            <summary>
            搜索词记录及计数
            </summary>
            <param name="searchTypeCode">搜索类型编码</param>
            <param name="term">搜索词</param>
        </member>
        <member name="M:Tunynet.Search.SearchedTermService.CreateByAdministrator(System.String,System.String)">
            <summary>
            管理员添加搜索词
            </summary>
            <param name="searchTypeCode"></param>
            <param name="term"></param>
        </member>
        <member name="M:Tunynet.Search.SearchedTermService.Update(System.Int64,System.String,System.String)">
            <summary>
            更新管理员添加的搜索词
            </summary>
            <param name="id">搜索词Id</param>
            <param name="term">搜索词</param>
            <param name="searchTypeCode">搜索类型编码</param>
        </member>
        <member name="M:Tunynet.Search.SearchedTermService.ChangeDisplayOrder(System.Int64,System.Int64)">
            <summary>
            变更搜索词的排列顺序
            </summary>
            <param name="id">待调整的Id</param>
            <param name="referenceId">参照Id</param>        
        </member>
        <member name="M:Tunynet.Search.SearchedTermService.Delete(System.Int64)">
            <summary>
            删除搜索词
            </summary>
            <param name="id">搜索词Id</param>
        </member>
        <member name="M:Tunynet.Search.SearchedTermService.JudgeDisplayOrder(System.Int64,System.Boolean@,System.Boolean@,System.Int64@,System.Int64@)">
            <summary>
            判定搜索词的DisplayOrder可以做哪些调整
            </summary>
            <param name="id">Id</param>
            <param name="isFirst">在人工干预同类型搜索词中是否处于首位</param>
            <param name="isLast">在人工干预同类型搜索词中是否处于末位</param>
            <param name="decreaseReferenceId">降低DisplayOrder时参照的Id</param>
            <param name="increaseReferenceId">增加DisplayOrder时参照的Id</param>
        </member>
        <member name="M:Tunynet.Search.SearchedTermService.GetManuals(System.String)">
            <summary>
            获取人工干预的搜索词
            </summary>
            <remarks>按DisplayOrder正序排列</remarks>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Search.SearchedTermService.GetManuals(System.String,System.String)">
            <summary>
            获取匹配的人工干预的搜索词
            </summary>
            <remarks>按DisplayOrder正序排列</remarks>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Search.SearchedTermService.GetTops(System.Int32,System.String)">
            <summary>
            获取前N条最热的搜索词（仅非人工干预）
            </summary>
            <remarks>按DisplayOrder正序排列</remarks>
            <param name="topNumber">获取的数据条数</param>
            <param name="searchTypeCode">搜索类型编码</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Search.SearchedTermService.GetTops(System.String,System.Int32,System.String)">
            <summary>
            获取匹配的前N条最热的搜索词（仅非人工干预）
            </summary>
            <param name="keyword">要匹配的关键字</param>
            <param name="topNumber">获取的数据条数</param>
            <param name="searchTypeCode">搜索类型编码</param>
            <returns>用户最多搜索的前topNumber的搜索词</returns>
        </member>
        <member name="M:Tunynet.Search.SearchedTermService.Gets(System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Boolean,System.Int32,System.Int32)">
            <summary>
            分页获取搜索词（仅非人工干预）
            </summary>
            <param name="searchTypeCode">搜索类型编码</param>
            <param name="term">搜索词关键字（支持右半模糊搜索）</param>
            <param name="startDate">开始时间</param>
            <param name="endDate">截止时间</param>
            <param name="isRealtime">是否需要即时缓存</param>
            <param name="pageSize">每页条数</param>
            <param name="pageIndex">页码</param>
            <returns></returns>
        </member>
        <member name="T:Tunynet.Search.SearchHistoryService">
            <summary>
            搜索历史业务逻辑类
            </summary>
        </member>
        <member name="M:Tunynet.Search.SearchHistoryService.#ctor">
            <summary>
            构造器
            </summary>
        </member>
        <member name="M:Tunynet.Search.SearchHistoryService.#ctor(Tunynet.Search.Repositories.ISearchHistoryRepository)">
            <summary>
            构造器
            </summary>
            <param name="searchHistoryRepository">SearchHistory仓储</param>        
        </member>
        <member name="M:Tunynet.Search.SearchHistoryService.SearchTerm(System.Int64,System.String,System.String)">
            <summary>
            记录到搜索记录
            </summary>
            <param name="userId">UserId</param>
            <param name="searchTypeCode">搜索类型编码</param>
            <param name="term">搜索词</param>
        </member>
        <member name="M:Tunynet.Search.SearchHistoryService.Clear(System.Int64,System.String)">
            <summary>
            清除用户的搜索历史
            </summary>
            <param name="userId">UserId</param>
            <param name="searchTypeCode">搜索类型编码</param>
        </member>
        <member name="M:Tunynet.Search.SearchHistoryService.Gets(System.Int64,System.String)">
            <summary>
            获取用户最近搜索历史
            </summary>
            <param name="userId">UserId</param>        
            <param name="searchTypeCode">搜索类型编码</param>
            <returns>按使用时间倒序排列的搜索词</returns>
        </member>
        <member name="T:Tunynet.UI.ApplicationManagementOperation">
            <summary>
            应用的管理操作实体
            </summary>
        </member>
        <member name="P:Tunynet.UI.ApplicationManagementOperation.OperationId">
             <summary>
            OperationId
             </summary>
        </member>
        <member name="P:Tunynet.UI.ApplicationManagementOperation.ApplicationId">
             <summary>
            ApplicationId
             </summary>
        </member>
        <member name="P:Tunynet.UI.ApplicationManagementOperation.AssociatedNavigationId">
            <summary>
            关联导航Id
            </summary>
        </member>
        <member name="P:Tunynet.UI.ApplicationManagementOperation.PresentAreaKey">
             <summary>
            呈现区域标识
             </summary>
        </member>
        <member name="P:Tunynet.UI.ApplicationManagementOperation.OperationType">
             <summary>
            管理操作类型
             </summary>
        </member>
        <member name="P:Tunynet.UI.ApplicationManagementOperation.OperationText">
             <summary>
            操作的文字
             </summary>
        </member>
        <member name="P:Tunynet.UI.ApplicationManagementOperation.ResourceName">
             <summary>
            操作文字资源名称（如果同时设置OperationText则以OperationText优先）
             </summary>
        </member>
        <member name="P:Tunynet.UI.ApplicationManagementOperation.NavigationUrl">
             <summary>
            导航url
             </summary>
        </member>
        <member name="P:Tunynet.UI.ApplicationManagementOperation.UrlRouteName">
             <summary>
            导航路由规则名称
             </summary>
        </member>
        <member name="P:Tunynet.UI.ApplicationManagementOperation.RouteDataName">
            <summary>
            路由数据名
            </summary>
        </member>
        <member name="P:Tunynet.UI.ApplicationManagementOperation.IconName">
            <summary>
            内置图标名称
            </summary>
        </member>
        <member name="P:Tunynet.UI.ApplicationManagementOperation.ImageUrl">
             <summary>
            菜单文字旁边的图标url
             </summary>
        </member>
        <member name="P:Tunynet.UI.ApplicationManagementOperation.NavigationTarget">
             <summary>
            是新开窗口还是在当前窗口（默认:_self）
             </summary>
        </member>
        <member name="P:Tunynet.UI.ApplicationManagementOperation.DisplayOrder">
             <summary>
            排序序号
             </summary>
        </member>
        <member name="P:Tunynet.UI.ApplicationManagementOperation.OnlyOwnerVisible">
            <summary>
            仅拥有者可见
            </summary>
        </member>
        <member name="P:Tunynet.UI.ApplicationManagementOperation.IsLocked">
             <summary>
            是否锁定
             </summary>
        </member>
        <member name="P:Tunynet.UI.ApplicationManagementOperation.IsEnabled">
             <summary>
            是否启用
             </summary>
        </member>
        <member name="T:Tunynet.UI.ManagementOperationService">
            <summary>
            ApplicationManagementOperation业务逻辑
            </summary>
        </member>
        <member name="M:Tunynet.UI.ManagementOperationService.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Tunynet.UI.ManagementOperationService.#ctor(Tunynet.Repositories.IRepository{Tunynet.UI.ApplicationManagementOperation})">
            <summary>
            构造函数
            </summary>
            <param name="repository">ApplicationManagementOperation仓储</param>
        </member>
        <member name="M:Tunynet.UI.ManagementOperationService.Create(Tunynet.UI.ApplicationManagementOperation)">
            <summary>
            添加管理操作
            </summary>
            <param name="applicationManagementOperation">ApplicationManagementOperation</param>
        </member>
        <member name="M:Tunynet.UI.ManagementOperationService.Update(Tunynet.UI.ApplicationManagementOperation)">
            <summary>
            更新管理操作
            </summary>
            <param name="applicationManagementOperation">ApplicationManagementOperation</param>
        </member>
        <member name="M:Tunynet.UI.ManagementOperationService.Delete(System.Int32)">
            <summary>
            删除管理操作
            </summary>
            <param name="operationId">管理操作实体Id</param>
        </member>
        <member name="M:Tunynet.UI.ManagementOperationService.Get(System.Int32)">
            <summary>
            获取ApplicationManagementOperation
            </summary>
            <param name="operationId">管理操作实体Id</param>
        </member>
        <member name="M:Tunynet.UI.ManagementOperationService.GetShortcuts(System.String,System.Boolean)">
            <summary>
            获取指定呈现区域的所有快捷操作
            </summary>
            <param name="presentAreaKey">呈现区域标识</param>
            <param name="onlyEnabled">是否仅返回启用状态的</param>
            <returns>获取呈现区域满足条件的快捷操作</returns>
        </member>
        <member name="M:Tunynet.UI.ManagementOperationService.GetManagementMenus(System.String,System.Boolean)">
            <summary>
            获取指定呈现区域的所有管理菜单
            </summary>
            <param name="presentAreaKey">呈现区域标识</param>
            <param name="onlyEnabled">是否仅返回启用状态的</param>
            <returns>获取呈现区域满足条件的操作菜单</returns>
        </member>
        <member name="M:Tunynet.UI.ManagementOperationService.GetManagementOperations(System.String,Tunynet.UI.ManagementOperationType,System.Boolean)">
            <summary>
            获取指定呈现区域指定类型的管理操作
            </summary>
            <param name="presentAreaKey">呈现区域标识</param>
            <param name="operationType">管理操作类型</param>
            <param name="onlyEnabled">是否仅返回启用状态的</param>
            <returns>获取呈现区域满足条件的管理操作</returns>
        </member>
        <member name="T:Tunynet.UI.ManagementOperationType">
            <summary>
            管理操作类型
            </summary>
        </member>
        <member name="F:Tunynet.UI.ManagementOperationType.Shortcut">
            <summary>
            快捷操作
            </summary>
        </member>
        <member name="F:Tunynet.UI.ManagementOperationType.ManagementMenu">
            <summary>
            管理菜单
            </summary>
        </member>
        <member name="T:Tunynet.UI.CommonOperation">
            <summary>
            初始化常用操作实体
            </summary>
        </member>
        <member name="M:Tunynet.UI.CommonOperation.New">
            <summary>
            新建实体时使用
            </summary>
        </member>
        <member name="P:Tunynet.UI.CommonOperation.Id">
             <summary>
            Id
             </summary>
        </member>
        <member name="P:Tunynet.UI.CommonOperation.NavigationId">
             <summary>
            NavigationId
             </summary>
        </member>
        <member name="P:Tunynet.UI.CommonOperation.UserId">
             <summary>
            UserId
             </summary>
        </member>
        <member name="T:Tunynet.UI.Navigation">
            <summary>
            用于呈现的导航实体
            </summary>
            <remarks>
            下一步开发设想：
            1、使用扩展方法IsVisible(User currentUser)
            2、使用扩展方法GetUrl()、GetUrl(string spacekey)
            </remarks>
        </member>
        <member name="M:Tunynet.UI.Navigation.AppendChild(Tunynet.UI.Navigation)">
            <summary>
            添加子导航
            </summary>
        </member>
        <member name="M:Tunynet.UI.Navigation.IsCurrent(System.Int32)">
            <summary>
            判断是否属于当前导航
            </summary>
            <remarks>
            单元测试用例，仅需测试NavigationService.GetCurrentNavigationPath()
            </remarks>
            <param name="currentNavigationId"></param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.UI.Navigation.AsInitialNavigation">
            <summary>
            转换成InitialNavigation
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tunynet.UI.Navigation.CompareTo(System.Object)">
            <summary>
            Navigation比较（用于排序）
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="P:Tunynet.UI.Navigation.NavigationId">
             <summary>
            NavigationId
             </summary>
        </member>
        <member name="P:Tunynet.UI.Navigation.ParentNavigationId">
             <summary>
            ParentNavigationId
             </summary>
        </member>
        <member name="P:Tunynet.UI.Navigation.Depth">
             <summary>
            深度（从上到下以0开始）
             </summary>
        </member>
        <member name="P:Tunynet.UI.Navigation.PresentAreaKey">
             <summary>
            呈现区域标识
             </summary>
        </member>
        <member name="P:Tunynet.UI.Navigation.ApplicationId">
             <summary>
            ApplicationId
             </summary>
        </member>
        <member name="P:Tunynet.UI.Navigation.OwnerId">
             <summary>
            呈现区域实例OwnerId
             </summary>
        </member>
        <member name="P:Tunynet.UI.Navigation.NavigationType">
             <summary>
            导航类型
             </summary>
        </member>
        <member name="P:Tunynet.UI.Navigation.NavigationText">
             <summary>
            导航文字
             </summary>
        </member>
        <member name="P:Tunynet.UI.Navigation.ResourceName">
             <summary>
            导航文字资源名称（如果同时设置NavigationText则以NavigationText优先）
             </summary>
        </member>
        <member name="P:Tunynet.UI.Navigation.NavigationUrl">
             <summary>
            导航url
             </summary>
        </member>
        <member name="P:Tunynet.UI.Navigation.UrlRouteName">
             <summary>
            应用导航路由规则名称
             </summary>
        </member>
        <member name="P:Tunynet.UI.Navigation.RouteDataName">
             <summary>
            路由数据名称(Url中包含的路由数据)
             </summary>
        </member>
        <member name="P:Tunynet.UI.Navigation.ImageUrl">
             <summary>
            菜单文字旁边的图标url
             </summary>
        </member>
        <member name="P:Tunynet.UI.Navigation.IconName">
            <summary>
            图标名称
            </summary>
        </member>
        <member name="P:Tunynet.UI.Navigation.NavigationTarget">
             <summary>
            是新开窗口还是在当前窗口（默认:_self）
             </summary>
        </member>
        <member name="P:Tunynet.UI.Navigation.DisplayOrder">
             <summary>
            排序序号
             </summary>
        </member>
        <member name="P:Tunynet.UI.Navigation.OnlyOwnerVisible">
             <summary>
            是否仅拥有者可见
             </summary>
        </member>
        <member name="P:Tunynet.UI.Navigation.IsLocked">
             <summary>
            是否锁定
             </summary>
        </member>
        <member name="P:Tunynet.UI.Navigation.IsEnabled">
             <summary>
            是否启用
             </summary>
        </member>
        <member name="P:Tunynet.UI.Navigation.Text">
            <summary>
            用于呈现的导航文本
            </summary>
        </member>
        <member name="P:Tunynet.UI.Navigation.Parent">
            <summary>
            父导航
            </summary>
        </member>
        <member name="P:Tunynet.UI.Navigation.Children">
            <summary>
            所有子导航
            </summary>
        </member>
        <member name="T:Tunynet.UI.NavigationService">
            <summary>
            导航业务逻辑
            </summary>
        </member>
        <member name="M:Tunynet.UI.NavigationService.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Tunynet.UI.NavigationService.#ctor(Tunynet.Repositories.IRepository{Tunynet.UI.InitialNavigation},Tunynet.UI.IPresentAreaNavigationRepository)">
            <summary>
            构造函数（主要用于测试用例）
            </summary>
            <param name="initialNavigationRepository">InitialNavigation仓储</param>
            <param name="presentAreaNavigationRepository">PresentAreaNavigation仓储</param>
        </member>
        <member name="M:Tunynet.UI.NavigationService.GetRootNavigations(System.String,System.Int64)">
            <summary>
            获取第一级导航（用于呈现）
            </summary>
            <param name="presentAreaKey">呈现区域标识</param>
            <param name="ownerId">呈现区域实例OwnerId</param>
            <returns>返回呈现区域实例OwnerId的导航集合</returns>
        </member>
        <member name="M:Tunynet.UI.NavigationService.GetRootNavigations(System.String)">
            <summary>
            获取第一级导航（用于呈现，仅有单个实例的呈现区域使用）
            </summary>
            <param name="presentAreaKey">呈现区域标识</param>
            <returns>返回presentAreaKey的OwnerId为0的所有一级导航集合</returns>
        </member>
        <member name="M:Tunynet.UI.NavigationService.GetNavigation(System.String,System.Int32,System.Int64)">
            <summary>
            获取导航实体
            </summary>
            <param name="presentAreaKey">呈现区域标识</param>
            <param name="navigationId">导航Id</param>
            <param name="ownerId">拥有者Id</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.UI.NavigationService.GetCurrentNavigationPath(System.String,System.Int64,System.Int32)">
            <summary>
            获取当前导航路径的NavigationId（按照Depth 从低到高）
            </summary>
            <param name="presentAreaKey">呈现区域标识</param>
            <param name="ownerId">呈现区域实例OwnerId</param>
            <param name="currentNavigationId">当前导航Id</param>
            <returns>返回当前导航路径的NavigationId集合</returns>
        </member>
        <member name="M:Tunynet.UI.NavigationService.RecursiveGetParents(System.Collections.Generic.IEnumerable{Tunynet.UI.Navigation},Tunynet.UI.Navigation,System.Collections.Generic.List{Tunynet.UI.Navigation}@)">
            <summary>
            递归获取Navigation所有祖先
            </summary>
        </member>
        <member name="M:Tunynet.UI.NavigationService.GetNavigations(System.String,System.Int64)">
            <summary>
            获取呈现区域实例的所有导航
            </summary>
            <remarks>
            单例呈现区域第一次获取导航数据时，自动初始化该实例的导航数据
            </remarks>
            <param name="presentAreaKey">呈现区域标识</param>
            <param name="ownerId">呈现区域实例OwnerId</param>
            <returns>返回呈现区域实例的导航集合</returns>
        </member>
        <member name="M:Tunynet.UI.NavigationService.Organize(System.Collections.Generic.List{Tunynet.UI.Navigation},System.Int32)">
            <summary>
             为Navigationt组织Parent和Children
             </summary>
        </member>
        <member name="M:Tunynet.UI.NavigationService.CreateInitialNavigation(Tunynet.UI.InitialNavigation,System.Boolean)">
            <summary>
            添加初始化导航
            </summary>
            <remarks>
            对于单实例的呈现区域必须设置forceOwnerCreate=true
            </remarks>
            <param name="initialNavigation">初始化导航</param>
            <param name="forceOwnerCreate">是否强制呈现区域实例Owner安装</param>
            <exception cref="T:System.ArgumentNullException">initialNavigation为空时</exception>
            <exception cref="T:System.ArgumentException">InitialNavigation已经存在时</exception>
            <exception cref="T:System.ApplicationException">initialNavigation的ParentNavigationId大于0但是相应的InitialNavigation不存在时</exception>
            <returns>返回创建的InitialNavigation的Id</returns>
        </member>
        <member name="M:Tunynet.UI.NavigationService.UpdateInitialNavigation(Tunynet.UI.InitialNavigation,System.Boolean)">
            <summary>
            更新初始化导航
            </summary>
            <remarks>
            对于单实例的呈现区域必须设置forceOwnerUpdate=true
            </remarks>
            <param name="initialNavigation">初始化导航</param>
            <param name="forceOwnerUpdate">是否强制呈现区域实例Owner更新</param>
        </member>
        <member name="M:Tunynet.UI.NavigationService.DeleteInitialNavigation(System.Int32,System.Boolean)">
            <summary>
            删除初始化导航
            </summary>
            <remarks>
            对于单实例的呈现区域必须设置forceOwnerUpdate=true
            </remarks>
            <param name="navigationId">导航Id</param>
            <param name="forceOwnerDelete">是否强制呈现区域实例Owner删除</param>
            <exception cref="T:System.ArgumentNullException">initialNavigation为空时</exception>
            <exception cref="T:System.ApplicationException">initialNavigation被锁定时</exception>
        </member>
        <member name="M:Tunynet.UI.NavigationService.GetInitialNavigation(System.Int32)">
            <summary>
            在后台管理呈现区域默认导航时，获取InitialNavigation
            </summary>        
            <param name="navigationId">导航Id</param>
            <returns>返回navigationId对应的初始化导航实体</returns>
        </member>
        <member name="M:Tunynet.UI.NavigationService.GetRootInitialNavigation(System.String)">
            <summary>
            获取呈现区域第一级导航初始化数据
            </summary>
            <param name="presentAreaKey">呈现区域标识</param>
        </member>
        <member name="M:Tunynet.UI.NavigationService.GetDescendants(Tunynet.UI.InitialNavigation)">
            <summary>
            获取parentInitialNavigation的后代
            </summary>
            <param name="parentInitialNavigation">父InitialNavigation</param>
            <returns>返回parentInitialNavigation的所有后代</returns>
        </member>
        <member name="M:Tunynet.UI.NavigationService.RecursiveGetChildren(System.Collections.Generic.IEnumerable{Tunynet.UI.InitialNavigation},Tunynet.UI.InitialNavigation,System.Collections.Generic.List{Tunynet.UI.InitialNavigation}@)">
            <summary>
            递归获取parentInitialNavigation所有子InitialNavigation
            </summary>
        </member>
        <member name="M:Tunynet.UI.NavigationService.GetInitialNavigations(System.String)">
            <summary>
            获取所有呈现区域的导航初始化数据
            </summary>
            <param name="presentAreaKey">呈现区域标识</param>
        </member>
        <member name="M:Tunynet.UI.NavigationService.CreatePresentAreaNavigation(Tunynet.UI.PresentAreaNavigation)">
            <summary>
            添加呈现区域实例导航
            </summary>
            <param name="presentAreaNavigation">PresentAreaNavigation</param>
            <exception cref="T:System.ArgumentNullException">presentAreaNavigation为空时</exception>
            <exception cref="T:System.ArgumentException">presentAreaNavigation的NavigationType不是<see cref="T:Tunynet.UI.NavigationType"/>.AddedByOwner时</exception>
            <exception cref="T:System.ArgumentException">该PresentAreaNavigation此呈现区域实例已经创建时</exception>
            <returns>返回创建的PresentAreaNavigation的Id</returns>
        </member>
        <member name="M:Tunynet.UI.NavigationService.UpdatePresentAreaNavigation(Tunynet.UI.PresentAreaNavigation)">
            <summary>
            更新导航
            </summary>
            <param name="presentAreaNavigation">PresentAreaNavigation</param>
        </member>
        <member name="M:Tunynet.UI.NavigationService.DeletePresentAreaNavigation(System.Int64)">
            <summary>
            删除导航
            </summary>
            <param name="id">PresentAreaNavigation实体Id</param>
        </member>
        <member name="M:Tunynet.UI.NavigationService.InstallPresentAreaNavigationsOfApplication(System.String,System.Int64,System.Int32)">
            <summary>
            在呈现区域实例添加应用的导航
            </summary>
            <remarks>
            在呈现区域实例添加应用时调用
            </remarks>
            <param name="presentAreaKey">呈现区域标识</param>
            <param name="ownerId">呈现区域实例OwnerId</param>
            <param name="applicationId">应用Id</param>
            <returns>返回安装的PresentAreaNavigation的Id集合</returns>
        </member>
        <member name="M:Tunynet.UI.NavigationService.UnInstallPresentAreaNavigationsOfApplication(System.String,System.Int64,System.Int32)">
            <summary>
            在呈现区域实例卸载应用的导航
            </summary>
            <remarks>
            在呈现区域实例卸载应用时调用
            </remarks>
            <param name="presentAreaKey">呈现区域标识</param>
            <param name="ownerId">呈现区域实例OwnerId</param>
            <param name="applicationId">应用Id</param>
        </member>
        <member name="M:Tunynet.UI.NavigationService.InitializePresentAreaNavigationsOfPresentAreaOwner(System.String,System.Int64)">
            <summary>
            创建呈现区域实例时初始化导航（不包括应用的导航）
            </summary>
            <param name="presentAreaKey">呈现区域标识</param>
            <param name="ownerId">呈现区域实例OwnerId</param>
        </member>
        <member name="M:Tunynet.UI.NavigationService.ClearPresentAreaNavigations(System.String,System.Int64)">
            <summary>
            清除删除呈现区域实例的所有导航
            </summary>
            <param name="presentAreaKey">呈现区域标识</param>
            <param name="ownerId">呈现区域实例OwnerId</param>
        </member>
        <member name="M:Tunynet.UI.NavigationService.ResetPresentAreaNavigations(System.String,System.Int64)">
            <summary>
            重置呈现区域实例的导航
            </summary>
            <param name="presentAreaKey">呈现区域标识</param>
            <param name="ownerId">呈现区域实例OwnerId</param>
        </member>
        <member name="M:Tunynet.UI.NavigationService.GetPresentAreaNavigation(System.Int64)">
            <summary>
            获取PresentAreaNavigation
            </summary>        
            <param name="id">PresentAreaNavigation主键</param>
            <returns>返回id对应的PresentAreaNavigation</returns>
        </member>
        <member name="M:Tunynet.UI.NavigationService.GetRootPresentAreaNavigations(System.String,System.Int64)">
            <summary>
            获取呈现区域实例的第一级PresentAreaNavigation
            </summary>
            <param name="presentAreaKey">呈现区域标识</param>
            <param name="ownerId">呈现区域实例OwnerId</param>
            <returns>返回呈现区域实例的所有导航集合</returns>
        </member>
        <member name="M:Tunynet.UI.NavigationService.GetDescendants(Tunynet.UI.PresentAreaNavigation)">
            <summary>
            获取parentPresentAreaNavigation的后代
            </summary>
            <param name="parentPresentAreaNavigation">PresentAreaNavigation</param>
            <returns>返回parentPresentAreaNavigation的所有后代集合</returns>
        </member>
        <member name="M:Tunynet.UI.NavigationService.RecursiveGetChildren(System.Collections.Generic.IEnumerable{Tunynet.UI.PresentAreaNavigation},Tunynet.UI.PresentAreaNavigation,System.Collections.Generic.List{Tunynet.UI.PresentAreaNavigation}@)">
            <summary>
            递归获取parentInitialNavigation所有子InitialNavigation
            </summary>
        </member>
        <member name="M:Tunynet.UI.NavigationService.GetPresentAreaNavigations(System.String,System.Int64)">
            <summary>
            获取呈现区域实例的所有PresentAreaNavigation
            </summary>
            <param name="presentAreaKey">呈现区域标识</param>
            <param name="ownerId">呈现区域实例OwnerId</param>
            <returns>返回呈现区域实例的导航集合</returns>
        </member>
        <member name="M:Tunynet.UI.NavigationService.DeletePresentAreaNavigation(Tunynet.UI.PresentAreaNavigation)">
            <summary>
            删除导航
            </summary>
        </member>
        <member name="M:Tunynet.UI.NavigationService.GetCommonOperations(System.Int64)">
            <summary>
            获取常用操作
            </summary>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.UI.NavigationService.GetCommonOperation(System.Int32,System.Int64)">
            <summary>
            获取常用操作单个实体
            </summary>
            <param name="navigationId">导航Id</param>
            <param name="userId">用户Id</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.UI.NavigationService.ClearUserCommonOperations(System.Int64)">
            <summary>
            清除该用户的所有常用操作
            </summary>
            <param name="userId">用户Id</param>
        </member>
        <member name="M:Tunynet.UI.NavigationService.AddCommonOperations(System.Int64,System.Collections.Generic.IEnumerable{Tunynet.UI.CommonOperation})">
            <summary>
            更新常用操作
            </summary>
            <param name="userId">用户Id</param>
            <param name="commonOperations">常用操作集合</param>
        </member>
        <member name="M:Tunynet.UI.NavigationService.SearchOperations(System.String)">
            <summary>
            功能搜索
            </summary>
            <param name="keyword">关键字</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.UI.NavigationService.GenerateDynamicNavigationId(System.Object)">
            <summary>
            根据对象Id生成动态导航Id
            </summary>
            <param name="objectId">对象Id</param>
            <returns>生成的导航Id</returns>
        </member>
        <member name="M:Tunynet.UI.NavigationService.ParseNavigation(Tunynet.UI.PresentAreaNavigation)">
            <summary>
            把PresentAreaNavigation解析成Navigation
            </summary>
            <remarks>
            NavigationType = NavigationType.Application的PresentAreaNavigation需要与相应的InitialNavigation合并
            </remarks>
            <param name="presentAreaNavigation">PresentAreaNavigation</param>
        </member>
        <member name="M:Tunynet.UI.NavigationService.ParseNavigation(Tunynet.UI.InitialNavigation)">
            <summary>
            把InitialNavigation解析成Navigation
            </summary>
            <param name="initialNavigation">InitialNavigation</param>
        </member>
        <member name="M:Tunynet.UI.NavigationService.GetCacheKey_NavigationOfPresentAreaOwner(System.String,System.Int64)">
            <summary>
            获取用于呈现的呈现区域实例导航的CacheKey
            </summary>
        </member>
        <member name="T:Tunynet.UI.NavigationType">
            <summary>
            导航类型
            </summary>
        </member>
        <member name="F:Tunynet.UI.NavigationType.Application">
            <summary>
            来源于Application
            </summary>
        </member>
        <member name="F:Tunynet.UI.NavigationType.PresentAreaInitial">
            <summary>
            呈现区域初始化的导航
            </summary>
        </member>
        <member name="F:Tunynet.UI.NavigationType.AddedByOwner">
            <summary>
            呈现区域Owner新增的导航
            </summary>
        </member>
        <member name="T:Tunynet.UI.InitialNavigation">
            <summary>
            初始化导航实体
            </summary>
        </member>
        <member name="M:Tunynet.UI.InitialNavigation.AsPresentAreaNavigation">
            <summary>
            InitialNavigation转换成PresentAreaNavigation
            </summary>
        </member>
        <member name="P:Tunynet.UI.InitialNavigation.NavigationId">
             <summary>
            NavigationId
             </summary>
        </member>
        <member name="P:Tunynet.UI.InitialNavigation.ParentNavigationId">
             <summary>
            ParentNavigationId
             </summary>
        </member>
        <member name="P:Tunynet.UI.InitialNavigation.Depth">
             <summary>
            深度（从上到下以0开始）
             </summary>
        </member>
        <member name="P:Tunynet.UI.InitialNavigation.PresentAreaKey">
             <summary>
            呈现区域标识
             </summary>
        </member>
        <member name="P:Tunynet.UI.InitialNavigation.ApplicationId">
             <summary>
            ApplicationId
             </summary>
        </member>
        <member name="P:Tunynet.UI.InitialNavigation.NavigationType">
             <summary>
            导航类型
             </summary>
        </member>
        <member name="P:Tunynet.UI.InitialNavigation.NavigationText">
             <summary>
            导航文字
             </summary>
        </member>
        <member name="P:Tunynet.UI.InitialNavigation.ResourceName">
             <summary>
            导航文字资源名称（如果同时设置NavigationText则以NavigationText优先）
             </summary>
        </member>
        <member name="P:Tunynet.UI.InitialNavigation.NavigationUrl">
             <summary>
            导航url， 如果是来源于应用,并且该字段为空,则根据UrlRouteName获取 
             </summary>
        </member>
        <member name="P:Tunynet.UI.InitialNavigation.UrlRouteName">
             <summary>
            应用导航路由规则名称 将会根据该规则名称获取应用导航地址
             </summary>
        </member>
        <member name="P:Tunynet.UI.InitialNavigation.RouteDataName">
             <summary>
            路由数据名称(Url中包含的路由数据)
             </summary>
        </member>
        <member name="P:Tunynet.UI.InitialNavigation.IconName">
            <summary>
            内置图标名称
            </summary>
        </member>
        <member name="P:Tunynet.UI.InitialNavigation.ImageUrl">
             <summary>
            菜单文字旁边的图标url
             </summary>
        </member>
        <member name="P:Tunynet.UI.InitialNavigation.NavigationTarget">
             <summary>
            是新开窗口还是在当前窗口（默认:_self）
             </summary>
        </member>
        <member name="P:Tunynet.UI.InitialNavigation.DisplayOrder">
             <summary>
            排序序号
             </summary>
        </member>
        <member name="P:Tunynet.UI.InitialNavigation.OnlyOwnerVisible">
             <summary>
            是否仅拥有者可见
             </summary>
        </member>
        <member name="P:Tunynet.UI.InitialNavigation.IsLocked">
             <summary>
            是否锁定
             </summary>
        </member>
        <member name="P:Tunynet.UI.InitialNavigation.IsEnabled">
             <summary>
            是否启用
             </summary>
        </member>
        <member name="P:Tunynet.UI.InitialNavigation.Children">
            <summary>
            子导航列表
            </summary>
        </member>
        <member name="T:Tunynet.UI.PresentAreaNavigation">
            <summary>
            呈现区域导航实体
            </summary>
        </member>
        <member name="P:Tunynet.UI.PresentAreaNavigation.Id">
             <summary>
            Id
             </summary>
        </member>
        <member name="P:Tunynet.UI.PresentAreaNavigation.NavigationId">
             <summary>
            NavigationId
             </summary>
        </member>
        <member name="P:Tunynet.UI.PresentAreaNavigation.ParentNavigationId">
             <summary>
            ParentNavigationId
             </summary>
        </member>
        <member name="P:Tunynet.UI.PresentAreaNavigation.Depth">
             <summary>
            深度（从上到下以0开始）
             </summary>
        </member>
        <member name="P:Tunynet.UI.PresentAreaNavigation.PresentAreaKey">
             <summary>
            呈现区域标识
             </summary>
        </member>
        <member name="P:Tunynet.UI.PresentAreaNavigation.ApplicationId">
             <summary>
            ApplicationId
             </summary>
        </member>
        <member name="P:Tunynet.UI.PresentAreaNavigation.OwnerId">
             <summary>
            呈现区域实例OwnerId
             </summary>
        </member>
        <member name="P:Tunynet.UI.PresentAreaNavigation.NavigationType">
             <summary>
            导航类型
             </summary>
        </member>
        <member name="P:Tunynet.UI.PresentAreaNavigation.NavigationText">
             <summary>
            导航文字
             </summary>
        </member>
        <member name="P:Tunynet.UI.PresentAreaNavigation.ResourceName">
             <summary>
            导航文字资源名称（如果同时设置NavigationText则以NavigationText优先）
             </summary>
        </member>
        <member name="P:Tunynet.UI.PresentAreaNavigation.NavigationUrl">
             <summary>
            导航url
             </summary>
        </member>
        <member name="P:Tunynet.UI.PresentAreaNavigation.UrlRouteName">
             <summary>
            应用导航路由规则名称
             </summary>
        </member>
        <member name="P:Tunynet.UI.PresentAreaNavigation.RouteDataName">
             <summary>
            路由数据名称(Url中包含的路由数据)
             </summary>
        </member>
        <member name="P:Tunynet.UI.PresentAreaNavigation.IconName">
            <summary>
            内置图标名称
            </summary>
        </member>
        <member name="P:Tunynet.UI.PresentAreaNavigation.ImageUrl">
             <summary>
            菜单文字旁边的图标url
             </summary>
        </member>
        <member name="P:Tunynet.UI.PresentAreaNavigation.NavigationTarget">
             <summary>
            是新开窗口还是在当前窗口（默认:_self）
             </summary>
        </member>
        <member name="P:Tunynet.UI.PresentAreaNavigation.DisplayOrder">
             <summary>
            排序序号
             </summary>
        </member>
        <member name="P:Tunynet.UI.PresentAreaNavigation.OnlyOwnerVisible">
             <summary>
            是否仅拥有者可见
             </summary>
        </member>
        <member name="P:Tunynet.UI.PresentAreaNavigation.IsLocked">
             <summary>
            是否锁定
             </summary>
        </member>
        <member name="P:Tunynet.UI.PresentAreaNavigation.IsEnabled">
             <summary>
            是否启用
             </summary>
        </member>
        <member name="T:Tunynet.UI.CommonOperationRepository">
            <summary>
            常用操作数据访问
            </summary>
        </member>
        <member name="T:Tunynet.UI.ICommonOperationRepository">
            <summary>
            CommonOperationRepository仓储接口
            </summary>
        </member>
        <member name="M:Tunynet.UI.ICommonOperationRepository.ClearUserCommonOperations(System.Int64)">
            <summary>
            清除该用户的所有常用操作
            </summary>
            <param name="userId">用户Id</param>
        </member>
        <member name="M:Tunynet.UI.ICommonOperationRepository.GetCommonOperation(System.Int32,System.Int64)">
            <summary>
            获取常用操作单个实体
            </summary>
            <param name="navigationId">导航Id</param>
            <param name="userId">用户Id</param>
        </member>
        <member name="M:Tunynet.UI.CommonOperationRepository.ClearUserCommonOperations(System.Int64)">
            <summary>
            清除用户的常用操作
            </summary>
            <param name="userId">用户ID</param>
        </member>
        <member name="M:Tunynet.UI.CommonOperationRepository.GetCommonOperation(System.Int32,System.Int64)">
            <summary>
            获取常用操作
            </summary>
            <param name="navigationId"></param>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="T:Tunynet.UI.IInitialNavigationRepository">
            <summary>
            InitialNavigationRepository仓储接口
            </summary>
        </member>
        <member name="M:Tunynet.UI.IInitialNavigationRepository.GetCommonOperations(System.Int64)">
            <summary>
            获取常用操作
            </summary>
            <param name="userId">用户Id</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.UI.IInitialNavigationRepository.SearchOperations(System.String)">
            <summary>
            功能搜索
            </summary>
            <param name="keyword">关键字</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.UI.InitialNavigationRepository.GetCommonOperations(System.Int64)">
            <summary>
            获取常用操作
            </summary>
            <param name="userId">用户Id</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.UI.InitialNavigationRepository.SearchOperations(System.String)">
            <summary>
            功能搜索
            </summary>
            <param name="keyword">关键字</param>
            <returns></returns>
        </member>
        <member name="T:Tunynet.UI.IPresentAreaNavigationRepository">
            <summary>
            PresentAreaNavigation仓储接口
            </summary>
        </member>
        <member name="M:Tunynet.UI.IPresentAreaNavigationRepository.GetNavigations(System.String,System.Int64)">
            <summary>
            获取呈现区域实例的所有PresentAreaNavigation
            </summary>
            <param name="presentAreaKey">呈现区域标识</param>
            <param name="ownerId">呈现区域实例OwnerId</param>
        </member>
        <member name="M:Tunynet.UI.IPresentAreaNavigationRepository.ForceOwnerCreate(Tunynet.UI.InitialNavigation)">
            <summary>
            强制所有呈现区域实例Owner安装导航
            </summary>
            <param name="initialNavigation">初始化导航实体</param>
        </member>
        <member name="M:Tunynet.UI.IPresentAreaNavigationRepository.ForceOwnerUpdate(Tunynet.UI.InitialNavigation)">
            <summary>
            强制所有呈现区域实例Owner更新导航
            </summary>
            <param name="initialNavigation">初始化导航实体</param>
        </member>
        <member name="M:Tunynet.UI.IPresentAreaNavigationRepository.ForceOwnerDelete(System.Collections.Generic.IEnumerable{Tunynet.UI.InitialNavigation})">
            <summary>
            强制所有呈现区域实例Owner卸载导航
            </summary>
            <param name="initialNavigations">初始化导航实体集合</param>
        </member>
        <member name="M:Tunynet.UI.IPresentAreaNavigationRepository.ClearOwnerNavigations(System.String,System.Int64)">
            <summary>
            清除呈现区域实例Owner的所有导航
            </summary>
            <param name="presentAreaKey">呈现区域标识</param>
            <param name="ownerId">呈现区域实体OwnerId</param>
        </member>
        <member name="T:Tunynet.UI.PresentAreaNavigationRepository">
            <summary>
            PresentAreaNavigation仓储实现
            </summary>
        </member>
        <member name="M:Tunynet.UI.PresentAreaNavigationRepository.GetNavigations(System.String,System.Int64)">
            <summary>
            获取呈现区域实例的所有PresentAreaNavigation
            </summary>
            <param name="presentAreaKey">呈现区域标识</param>
            <param name="ownerId">呈现区域实例OwnerId</param>
        </member>
        <member name="M:Tunynet.UI.PresentAreaNavigationRepository.ForceOwnerCreate(Tunynet.UI.InitialNavigation)">
            <summary>
            强制所有呈现区域实例Owner安装导航
            </summary>
            <param name="initialNavigation">初始化导航实体</param>
        </member>
        <member name="M:Tunynet.UI.PresentAreaNavigationRepository.ForceOwnerUpdate(Tunynet.UI.InitialNavigation)">
            <summary>
            强制所有呈现区域实例Owner更新导航
            </summary>
            <param name="initialNavigation">初始化导航实体</param>
        </member>
        <member name="M:Tunynet.UI.PresentAreaNavigationRepository.ForceOwnerDelete(System.Collections.Generic.IEnumerable{Tunynet.UI.InitialNavigation})">
            <summary>
            强制所有呈现区域实例Owner卸载导航
            </summary>
            <param name="initialNavigations">初始化导航实体集合</param>
        </member>
        <member name="M:Tunynet.UI.PresentAreaNavigationRepository.ClearOwnerNavigations(System.String,System.Int64)">
            <summary>
            清除呈现区域实例Owner的所有导航
            </summary>
            <param name="presentAreaKey">呈现区域标识</param>
            <param name="ownerId">呈现区域实体OwnerId</param>
        </member>
        <member name="T:Tunynet.UI.IThemeResolver">
            <summary>
            皮肤解析程序，用于获取当前皮肤及加载皮肤的css
            </summary>
        </member>
        <member name="M:Tunynet.UI.IThemeResolver.GetRequestTheme(System.Web.Routing.RequestContext)">
            <summary>
            获取请求页面使用的皮肤
            </summary>
            <param name="controllerContext"><see cref="T:System.Web.Routing.RequestContext"/></param>
        </member>
        <member name="M:Tunynet.UI.IThemeResolver.IncludeStyle(System.Web.Routing.RequestContext)">
            <summary>
            加载皮肤的css
            </summary>
            <param name="controllerContext"><see cref="T:System.Web.Routing.RequestContext"/></param>
        </member>
        <member name="M:Tunynet.UI.IThemeResolver.Validate(System.Int64)">
            <summary>
            验证当前用户是否修改皮肤的权限
            </summary>
            <param name="ownerId"></param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.UI.IThemeResolver.GetThemeAppearance(System.Int64)">
            <summary>
            获取拥有者当前选中的皮肤
            </summary>
            <param name="ownerId">拥有者Id（如：用户Id、群组Id）</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.UI.IThemeResolver.ChangeThemeAppearance(System.Int64,System.Boolean,System.String)">
            <summary>
            更新皮肤
            </summary>
            <param name="ownerId">拥有者Id（如：用户Id、群组Id）</param>
            <param name="isUseCustomStyle">是否使用自定义皮肤</param>
            <param name="themeAppearance">themeKey与appearanceKey用逗号关联</param>
        </member>
        <member name="T:Tunynet.UI.Theme">
            <summary>
            主题实体
            </summary>
        </member>
        <member name="M:Tunynet.UI.Theme.New(System.String,System.String)">
            <summary>
            新建实体时使用
            </summary>
        </member>
        <member name="M:Tunynet.UI.Theme.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Tunynet.UI.Theme.#ctor(System.Xml.Linq.XElement,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="xElement">XElement</param>
            <param name="themeKey">themeKey</param>
        </member>
        <member name="P:Tunynet.UI.Theme.Id">
            <summary>
            Id(格式：PresentAreaKey,ThemeKey)
            </summary>
        </member>
        <member name="P:Tunynet.UI.Theme.PresentAreaKey">
            <summary>
            PresentAreaKey
            </summary>
        </member>
        <member name="P:Tunynet.UI.Theme.ThemeKey">
            <summary>
            ThemeKey
            </summary>
        </member>
        <member name="P:Tunynet.UI.Theme.Parent">
            <summary>
            父主题ThemeKey
            </summary>
        </member>
        <member name="P:Tunynet.UI.Theme.Version">
            <summary>
            版本号
            </summary>
        </member>
        <member name="T:Tunynet.UI.ThemeAppearance">
            <summary>
            外观实体
            </summary>
        </member>
        <member name="M:Tunynet.UI.ThemeAppearance.New(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            新建实体时使用
            </summary>
            <param name="presentAreaKey"></param>
            <param name="themeKey"></param>
            <param name="appearanceKey"></param>
            <param name="name"></param>
            <param name="previewImage"></param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.UI.ThemeAppearance.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Tunynet.UI.ThemeAppearance.#ctor(System.Xml.Linq.XElement,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="xElement">XElement</param>
            <param name="appearanceKey">appearanceKey</param>
        </member>
        <member name="P:Tunynet.UI.ThemeAppearance.Id">
            <summary>
            Id（格式：PresentAreaKey,ThemeKey,AppearanceKey）
            </summary>
        </member>
        <member name="P:Tunynet.UI.ThemeAppearance.PresentAreaKey">
            <summary>
            PresentAreaKey
            </summary>
        </member>
        <member name="P:Tunynet.UI.ThemeAppearance.ThemeKey">
            <summary>
            ThemeKey
            </summary>
        </member>
        <member name="P:Tunynet.UI.ThemeAppearance.AppearanceKey">
            <summary>
            AppearanceKey
            </summary>
        </member>
        <member name="P:Tunynet.UI.ThemeAppearance.Name">
            <summary>
            外观名称
            </summary>
        </member>
        <member name="P:Tunynet.UI.ThemeAppearance.PreviewImage">
            <summary>
            皮肤预览图片
            </summary>
        </member>
        <member name="P:Tunynet.UI.ThemeAppearance.PreviewLargeImage">
            <summary>
            皮肤大预览图片
            </summary>
        </member>
        <member name="P:Tunynet.UI.ThemeAppearance.Description">
            <summary>
            皮肤描述
            </summary>
        </member>
        <member name="P:Tunynet.UI.ThemeAppearance.Tags">
            <summary>
            标签（多个标签用逗号分隔）
            </summary>
        </member>
        <member name="P:Tunynet.UI.ThemeAppearance.Author">
            <summary>
            皮肤作者
            </summary>
        </member>
        <member name="P:Tunynet.UI.ThemeAppearance.Copyright">
            <summary>
            版权声明
            </summary>
        </member>
        <member name="P:Tunynet.UI.ThemeAppearance.LastModified">
            <summary>
            皮肤最后更新日期
            </summary>
        </member>
        <member name="P:Tunynet.UI.ThemeAppearance.Version">
            <summary>
            版本号
            </summary>
        </member>
        <member name="P:Tunynet.UI.ThemeAppearance.ForProductVersion">
            <summary>
            适用产品版本号
            </summary>
        </member>
        <member name="P:Tunynet.UI.ThemeAppearance.DateCreated">
            <summary>
            皮肤安装日期
            </summary>
        </member>
        <member name="P:Tunynet.UI.ThemeAppearance.IsEnabled">
            <summary>
            皮肤是否启用
            </summary>
        </member>
        <member name="P:Tunynet.UI.ThemeAppearance.DisplayOrder">
            <summary>
            排列顺序
            </summary>
        </member>
        <member name="P:Tunynet.UI.ThemeAppearance.UserCount">
            <summary>
            使用人数
            </summary>
        </member>
        <member name="P:Tunynet.UI.ThemeAppearance.Roles">
            <summary>
            允许使用的角色名称 多个角色用’,’分隔 
            </summary>
        </member>
        <member name="P:Tunynet.UI.ThemeAppearance.RequiredRank">
            <summary>
            允许的最小等级(用户等级或群组等级)
            </summary>
        </member>
        <member name="T:Tunynet.UI.ThemedAttribute">
            <summary>
            用于controller的Theme相关属性标注
            </summary>
        </member>
        <member name="M:Tunynet.UI.ThemedAttribute.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="presentAreaKey">呈现区域标识</param>
        </member>
        <member name="M:Tunynet.UI.ThemedAttribute.OnResultExecuting(System.Web.Mvc.ResultExecutingContext)">
            <summary>
            加载皮肤css文件及根据需要重设站点logo
            </summary>
            <param name="filterContext"><see cref="T:System.Web.Mvc.ResultExecutingContext"/></param>
        </member>
        <member name="P:Tunynet.UI.ThemedAttribute.PresentAreaKey">
            <summary>
            呈现区域标识
            </summary>        
        </member>
        <member name="P:Tunynet.UI.ThemedAttribute.IsApplication">
            <summary>
            是否属于应用模块
            </summary>
        </member>
        <member name="P:Tunynet.UI.ThemedAttribute.PresentAreaService">
            <summary>
            PresentAreaService
            </summary>
        </member>
        <member name="T:Tunynet.UI.ThemedRazorView">
            <summary>
            重写RazorView用于支持皮肤机制
            </summary>
        </member>
        <member name="M:Tunynet.UI.ThemedRazorView.#ctor(System.Web.Mvc.ControllerContext,System.String,System.String,System.Boolean,System.String,System.Func{Tunynet.UI.ThemeAppearance,System.String,System.String,System.String},Tunynet.UI.ThemeAppearance,System.Web.Mvc.IViewPageActivator)">
            <summary>
            构造函数
            </summary>
            <param name="controllerContext"></param>
            <param name="viewPath"></param>
            <param name="layoutPath"></param>
            <param name="isPartialView"></param>
            <param name="applicationKey"></param>
            <param name="findLayoutPathOfThemeDelegate"></param>
            <param name="themeAppearance"></param>
            <param name="viewPageActivator"></param>
        </member>
        <member name="F:Tunynet.UI.ThemedRazorView.FindLayoutPathOfThemeDelegate">
            <summary>
            利用视图引擎定位layout的委托
            </summary>
        </member>
        <member name="M:Tunynet.UI.ThemedRazorView.RenderView(System.Web.Mvc.ViewContext,System.IO.TextWriter,System.Object)">
            <summary>
            呈现View
            </summary>
            <param name="viewContext"></param>
            <param name="writer"></param>
            <param name="instance"></param>
        </member>
        <member name="P:Tunynet.UI.ThemedRazorView.OverridenLayoutPath">
            <summary>
            从Controller/Action设置的Layout（已经经过视图引擎定位）
            </summary>
        </member>
        <member name="P:Tunynet.UI.ThemedRazorView.ThemeAppearance">
            <summary>
            当前页面的ThemeAppearance
            </summary>
        </member>
        <member name="P:Tunynet.UI.ThemedRazorView.IsPartialView">
            <summary>
            是否局部视图
            </summary>
        </member>
        <member name="P:Tunynet.UI.ThemedRazorView.ApplicationKey">
            <summary>
            应用模块标识
            </summary>
        </member>
        <member name="T:Tunynet.UI.ThemedViewEngine">
            <summary>
            支持皮肤机制的视图引擎
            </summary>
        </member>
        <member name="M:Tunynet.UI.ThemedViewEngine.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Tunynet.UI.ThemedViewEngine.#ctor(System.Web.Mvc.IViewPageActivator)">
            <summary>
            构造函数
            </summary>
            <param name="viewPageActivator"><see cref="T:System.Web.Mvc.IViewPageActivator"/></param>
        </member>
        <member name="M:Tunynet.UI.ThemedViewEngine.FindPartialView(System.Web.Mvc.ControllerContext,System.String,System.Boolean)">
            <summary>
            重写FindPartialView
            </summary>
            <param name="controllerContext"></param>
            <param name="partialViewName"></param>
            <param name="useCache"></param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.UI.ThemedViewEngine.FindView(System.Web.Mvc.ControllerContext,System.String,System.String,System.Boolean)">
            <summary>
            重写FindView
            </summary>
            <param name="controllerContext"></param>
            <param name="viewName"></param>
            <param name="masterName"></param>
            <param name="useCache"></param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.UI.ThemedViewEngine.CreatePartialView(System.Web.Mvc.ControllerContext,System.String)">
            <summary>
            重写CreatePartialView
            </summary>
            <param name="controllerContext"></param>
            <param name="partialPath"></param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.UI.ThemedViewEngine.CreateView(System.Web.Mvc.ControllerContext,System.String,System.String)">
            <summary>
            重写CreateView
            </summary>
            <param name="controllerContext"></param>
            <param name="viewPath"></param>
            <param name="masterPath"></param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.UI.ThemedViewEngine.GetPresentAreaKeyAndIsApplicationFromThemedAttribute(System.Web.Mvc.ControllerContext,System.String@,System.Boolean@)">
            <summary>
            从ThemedAttribute获取PresentAreaKey及IsApplication
            </summary>
            <param name="controllerContext"><see cref="T:System.Web.Mvc.ControllerContext"/></param>
        </member>
        <member name="M:Tunynet.UI.ThemedViewEngine.GetViewPathOfApplication(System.String,System.String,System.String)">
            <summary>
            获取应用模块中的ViewPath
            </summary>
            <param name="viewName"></param>
            <param name="controllerName"></param>
            <param name="areaName">与ApplicationKey相同</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.UI.ThemedViewEngine.GetViewPathOfTheme(Tunynet.UI.ThemeAppearance,System.String,System.String)">
            <summary>
            获取应用模块中的ViewPath
            </summary>
            <remarks>
            应用模块以外的功能View定位忽略Area
            </remarks>
            <param name="themeAppearance"></param>
            <param name="viewName"></param>
            <param name="controllerName"></param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.UI.ThemedViewEngine.GetLayoutPathOfTheme(Tunynet.UI.ThemeAppearance,System.String,System.String)">
            <summary>
            获取Layout具体地址
            </summary>
            <param name="themeAppearance"></param>
            <param name="layoutName">布局文件名称不要带.cshtml</param>
            <param name="applicationKey">应用模块标识</param>
        </member>
        <member name="M:Tunynet.UI.ThemedViewEngine.GetPathFromSpecificName(System.String)">
            <summary>
            检测绝对虚拟路径的ViewName是否存在
            </summary>
        </member>
        <member name="M:Tunynet.UI.ThemedViewEngine.IsSpecificPath(System.String)">
            <summary>
            是否属于绝对虚拟路径（以'~'或'/'开头）
            </summary>
        </member>
        <member name="M:Tunynet.UI.ThemedViewEngine.GetAreaName(System.Web.Routing.RouteData)">
            <summary>
            从路由数据获取AreaName
            </summary>
            <param name="routeData"></param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.UI.ThemedViewEngine.GetAreaName(System.Web.Routing.RouteBase)">
            <summary>
            从路由数据获取AreaName
            </summary>
            <param name="route"><see cref="T:System.Web.Routing.RouteBase"/></param>
            <returns>返回路由中的AreaName，如果无AreaName则返回null</returns>
        </member>
        <member name="P:Tunynet.UI.ThemedViewEngine.ThemeService">
            <summary>
            ThemeService
            </summary>
        </member>
        <member name="T:Tunynet.UI.ThemedWebViewPage">
            <summary>
            重写WebViewPage用于支持皮肤机制
            </summary>
        </member>
        <member name="F:Tunynet.UI.ThemedWebViewPage.FindLayoutPathOfThemeDelegate">
            <summary>
            利用视图引擎定位layout的委托
            </summary>
        </member>
        <member name="M:Tunynet.UI.ThemedWebViewPage.ExecutePageHierarchy">
            <summary>
            重写基类的方法用于实现View中设置layout也可以使用视图引擎定位
            </summary>
        </member>
        <member name="P:Tunynet.UI.ThemedWebViewPage.OverridenLayoutPath">
            <summary>
            从Controller/Action设置的Layout（已经经过视图引擎定位）
            </summary>
        </member>
        <member name="P:Tunynet.UI.ThemedWebViewPage.ThemeAppearance">
            <summary>
            当前页面的ThemeAppearance
            </summary>
        </member>
        <member name="P:Tunynet.UI.ThemedWebViewPage.IsPartialView">
            <summary>
            是否局部视图
            </summary>
        </member>
        <member name="P:Tunynet.UI.ThemedWebViewPage.ApplicationKey">
            <summary>
            应用模块标识
            </summary>
        </member>
        <member name="T:Tunynet.UI.ThemedWebViewPage`1">
            <summary>
            重写WebViewPage用于支持皮肤机制
            </summary>
        </member>
        <member name="M:Tunynet.UI.ThemedWebViewPage`1.InitHelpers">
            <summary>
            InitHelpers
            </summary>
        </member>
        <member name="M:Tunynet.UI.ThemedWebViewPage`1.SetViewData(System.Web.Mvc.ViewDataDictionary)">
            <summary>
            SetViewData
            </summary>
            <param name="viewData"></param>
        </member>
        <member name="P:Tunynet.UI.ThemedWebViewPage`1.Ajax">
            <summary>
            AjaxHelper
            </summary>
        </member>
        <member name="P:Tunynet.UI.ThemedWebViewPage`1.Html">
            <summary>
            HtmlHelper
            </summary>
        </member>
        <member name="P:Tunynet.UI.ThemedWebViewPage`1.Model">
            <summary>
            Model
            </summary>
        </member>
        <member name="P:Tunynet.UI.ThemedWebViewPage`1.ViewData">
            <summary>
            ViewData
            </summary>
        </member>
        <member name="T:Tunynet.UI.ThemeService">
            <summary>
            皮肤业务逻辑类
            </summary>
        </member>
        <member name="M:Tunynet.UI.ThemeService.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Tunynet.UI.ThemeService.#ctor(Tunynet.Repositories.IRepository{Tunynet.UI.Theme},Tunynet.Repositories.IRepository{Tunynet.UI.ThemeAppearance})">
            <summary>
            构造函数（主要用于测试用例）
            </summary>
        </member>
        <member name="M:Tunynet.UI.ThemeService.GetTheme(System.String)">
            <summary>
            获取Theme
            </summary>
            <param name="id">presentAreaKey与themeKey用逗号关联</param>
        </member>
        <member name="M:Tunynet.UI.ThemeService.GetTheme(System.String,System.String)">
            <summary>
            获取ThemeAppearance
            </summary>
            <param name="presentAreaKey">呈现区域标识</param>
            <param name="themeKey">主题标识</param>        
        </member>
        <member name="M:Tunynet.UI.ThemeService.ExtractThemeAppearance(System.String,System.String,System.IO.Stream)">
            <summary>
            提取皮肤
            </summary>
            <param name="presentAreaKey">呈现区域</param>
            <param name="fileName">皮肤文件名</param>
            <param name="fileStream">皮肤文件流</param>
        </member>
        <member name="M:Tunynet.UI.ThemeService.SaveThemeAppearancePackage(System.String,System.IO.Stream)">
            <summary>
            保存皮肤
            </summary>
            <param name="fileFullName">皮肤文件名</param>
            <param name="fileStream">皮肤文件流</param>
        </member>
        <member name="M:Tunynet.UI.ThemeService.DeleteThemeAppearance(System.String,System.String)">
            <summary>
            删除ThemeAppearance
            </summary>
            <param name="presentAreaKey">呈现区域标识</param>
            <param name="themeAndAppearance">themeKey与appearanceKey用逗号关联</param>
        </member>
        <member name="M:Tunynet.UI.ThemeService.SetIsEnabled(System.String,System.String,System.Boolean)">
            <summary>
            设置启用禁用状态
            </summary>
            <param name="presentAreaKey">呈现区域标识</param>
            <param name="themeAndAppearance">themeKey与appearanceKey用逗号关联</param>
        </member>
        <member name="M:Tunynet.UI.ThemeService.ChangeThemeAppearanceUserCount(System.String,System.String,System.String)">
            <summary>
            调整外观皮肤使用次数
            </summary>
            <param name="presentAreaKey">呈现区域</param>
            <param name="oldThemeAndAppearance">旧外观皮肤Key（若是新增用户或群组，则传空）</param>
            <param name="newThemeAndAppearance">新外观皮肤Key（若是删除用户或群组，则传空）</param>
        </member>
        <member name="M:Tunynet.UI.ThemeService.ChangeDisplayOrder(System.String,System.String)">
            <summary>
            变更外观的排列顺序
            </summary>
            <param name="appearanceId">待调整的Id</param>
            <param name="referenceAppearanceId">参照Id</param>        
        </member>
        <member name="M:Tunynet.UI.ThemeService.GetThemeAppearance(System.String,System.String)">
            <summary>
            获取ThemeAppearance
            </summary>
            <param name="presentAreaKey">呈现区域标识</param>
            <param name="themeAndAppearance">themeKey与appearanceKey用逗号关联</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.UI.ThemeService.GetThemeAppearance(System.String,System.String,System.String)">
            <summary>
            获取ThemeAppearance
            </summary>
            <param name="presentAreaKey">呈现区域标识</param>
            <param name="themeKey">主题标识</param>
            <param name="appearanceKey">外观标识</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.UI.ThemeService.GetThemeAppearances(System.String,System.Nullable{System.Boolean})">
            <summary>
            获取呈现区域下的ThemeAppearance
            </summary>
            <param name="presentAreaKey">呈现区域标识</param>
            <param name="isEnabled">ThemeAppearance是否启用</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.UI.ThemeService.RegisterThemeResolver(System.String,Tunynet.UI.IThemeResolver)">
            <summary>
            注册ThemeResolver
            </summary>
            <param name="presentAreaKey">呈现区域标识</param>
            <param name="themeResolver"><see cref="T:Tunynet.UI.IThemeResolver"/></param>
        </member>
        <member name="M:Tunynet.UI.ThemeService.GetRequestTheme(System.String,System.Web.Routing.RequestContext)">
            <summary>
            获取请求页面需要的Theme
            </summary>
            <param name="presentAreaKey">呈现区域标识</param>
            <param name="controllerContext"><see cref="T:System.Web.Routing.RequestContext"/></param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.UI.ThemeService.IncludeStyle(System.String,System.Web.Routing.RequestContext)">
            <summary>
            加载皮肤的css
            </summary>
            <param name="presentAreaKey">呈现区域标识</param>
            <param name="controllerContext"><see cref="T:System.Web.Routing.RequestContext"/></param>
        </member>
        <member name="M:Tunynet.UI.ThemeService.Validate(System.String,System.Int64)">
            <summary>
            验证当前用户是否修改皮肤的权限
            </summary>
            <param name="presentAreaKey">呈现区域标识</param>
            <param name="ownerId">拥有者Id（如：用户Id、群组Id）</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.UI.ThemeService.GetThemeAppearance(System.String,System.Int64)">
            <summary>
            获取用户当前选中的皮肤
            </summary>
            <param name="presentAreaKey">呈现区域标识</param>
            <param name="ownerId">拥有者Id（如：用户Id、群组Id）</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.UI.ThemeService.ChangeThemeAppearance(System.String,System.Int64,System.Boolean,System.String)">
            <summary>
            更新皮肤
            </summary>
            <param name="presentAreaKey">呈现区域Key</param>
            <param name="ownerId">拥有者Id（如：用户Id、群组Id）</param>
            <param name="isUseCustomStyle">是否使用自定义皮肤</param>
            <param name="themeAppearance">themeKey与appearanceKey用逗号关联</param>
        </member>
        <member name="T:Tunynet.Common.Configuration.OwnerDataSettings">
            <summary>
            用户数据配置类
            </summary>
        </member>
        <member name="M:Tunynet.Common.Configuration.OwnerDataSettings.GetDataKeys(System.String)">
            <summary>
            获取注册的DataKey
            </summary>
            <param name="tenantTypeId">租户类型Id</param>
        </member>
        <member name="M:Tunynet.Common.Configuration.OwnerDataSettings.RegisterStatisticsDataKeys(System.String,System.String[])">
             <summary>
             注册用户统计内容数的DataKey
             </summary>
             <param name="tenantTypeId">租户类型Id</param>
            <param name="dataKeys">需要统计的数据DataKey</param>
        </member>
        <member name="M:Tunynet.Common.Configuration.OwnerDataSettings.RegisterStatisticsDataKeys(System.Collections.Generic.List{System.String},System.String[])">
             <summary>
             注册用户统计内容数的DataKey
             </summary>
             <param name="tenantTypeIds">租户类型Id集合</param>
            <param name="dataKeys">需要统计的数据DataKey</param>
        </member>
        <member name="T:Tunynet.Common.Repositories.IOwnerDataRepository">
            <summary>
            OwnerData数据访问接口
            </summary>
        </member>
        <member name="M:Tunynet.Common.Repositories.IOwnerDataRepository.Change(System.Int64,System.String,System.String,System.Int64)">
            <summary>
            变更系统数据
            </summary>
            <param name="ownerId">ownerId</param>
            <param name="tenantTypeId">租户类型</param>
            <param name="dataKey">数据标识</param>
            <param name="value">待变更的数值</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.IOwnerDataRepository.Change(System.Int64,System.String,System.String,System.Decimal)">
            <summary>
            变更系统数据
            </summary>
            <param name="ownerId">ownerId</param>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="dataKey">数据标识</param>
            <param name="value">待变更的数值</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.IOwnerDataRepository.Change(System.Int64,System.String,System.String,System.String)">
            <summary>
            变更用户数据
            </summary>
            <param name="ownerId">用户Id</param>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="dataKey">数据标识</param>
            <param name="value">待变更的值</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.IOwnerDataRepository.Get(System.Int64,System.String,System.String)">
            <summary>
            获取OwnerData
            </summary>
            <param name="ownerId">用户Id</param>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="dataKey">数据标识</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.IOwnerDataRepository.GetAll(System.Int64,System.String)">
            <summary>
            获取DataKey对应的值
            </summary>
            <param name="ownerId">用户Id</param>
            <param name="tenantTypeId">租户类型Id</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.IOwnerDataRepository.GetPagingOwnerIds(System.String,System.String,System.Int32,System.Nullable{Tunynet.Common.OwnerData_SortBy})">
            <summary>
            获取用户Id分页数据
            </summary>
            <param name="dataKey">dataKey</param>
            <param name="pageIndex">页码</param>
            <param name="sortBy">排序字段</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.IOwnerDataRepository.GetTopOwnerIds(System.String,System.String,System.Int32,System.Nullable{Tunynet.Common.OwnerData_SortBy})">
            <summary>
            获取前N个用户Id数据
            </summary>
            <param name="dataKey">dataKey</param>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="topNumber">获取记录的个数</param>
            <param name="sortBy">排序字段</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.IOwnerDataRepository.ClearOwnerData(System.Int64,System.String)">
            <summary>
            清除指定用户的用户数据
            </summary>
            <param name="ownerId">用户Id</param>
            <param name="tenantTypeId">租户类型Id</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.IOwnerDataRepository.Gets(System.Int64,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            批量获取拥有者的数据统计
            </summary>
            <param name="ownerId"></param>
            <param name="dataKeys"></param>
            <returns></returns>
        </member>
        <member name="T:Tunynet.Common.Repositories.OwnerDataRepository">
            <summary>
            用户数据Repository
            </summary>
        </member>
        <member name="M:Tunynet.Common.Repositories.OwnerDataRepository.Change(System.Int64,System.String,System.String,System.Int64)">
            <summary>
            变更系统数据
            </summary>
            <param name="ownerId">ownerId</param>
            <param name="tenantTypeId">租户类型</param>
            <param name="dataKey">数据标识</param>
            <param name="value">待变更的数值</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.OwnerDataRepository.Change(System.Int64,System.String,System.String,System.Decimal)">
            <summary>
            变更系统数据
            </summary>
            <param name="ownerId">ownerId</param>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="dataKey">数据标识</param>
            <param name="value">待变更的数值</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.OwnerDataRepository.Change(System.Int64,System.String,System.String,System.String)">
            <summary>
            变更用户数据
            </summary>
            <param name="ownerId">用户Id</param>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="dataKey">数据标识</param>
            <param name="value">待变更的值</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.OwnerDataRepository.Get(System.Int64,System.String,System.String)">
            <summary>
            获取OwnerData
            </summary>
            <param name="ownerId">用户Id</param>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="dataKey">数据标识</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.OwnerDataRepository.GetAll(System.Int64,System.String)">
            <summary>
            获取DataKey对应的值
            </summary>
            <param name="ownerId">用户Id</param>
            <param name="tenantTypeId">租户类型Id</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.OwnerDataRepository.GetPagingOwnerIds(System.String,System.String,System.Int32,System.Nullable{Tunynet.Common.OwnerData_SortBy})">
            <summary>
            获取用户Id分页数据
            </summary>
            <param name="dataKey">dataKey</param>
            <param name="pageIndex">页码</param>
            <param name="sortBy">排序字段</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.OwnerDataRepository.GetTopOwnerIds(System.String,System.String,System.Int32,System.Nullable{Tunynet.Common.OwnerData_SortBy})">
            <summary>
            获取前N个用户Id数据
            </summary>
            <param name="dataKey">dataKey</param>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="topNumber">获取记录的个数</param>
            <param name="sortBy">排序字段</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.OwnerDataRepository.Gets(System.Int64,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            批量获取拥有者的数据统计
            </summary>
            <param name="ownerId"></param>
            <param name="dataKeys"></param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.OwnerDataRepository.ClearOwnerData(System.Int64,System.String)">
            <summary>
            清除指定用户的用户数据
            </summary>
            <param name="ownerId">用户Id</param>
            <param name="tenantTypeId">租户类型Id</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.OwnerDataRepository.GetCacheKey_GetOwnerData(System.Int64,System.String,System.String)">
            <summary>
            获取OwnerData的CacheKey
            </summary>
            <param name="ownerId">用户Id</param>
            <param name="dataKey">数据标识</param>
            <param name="tenantTypeId">租户类型Id</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.OwnerDataRepository.GetCacheKey_GetAllOwnerData(System.Int64,System.String)">
            <summary>
            获取所有OwnerData的CacheKey
            </summary>
            <param name="ownerId">用户Id</param>
            <param name="tenantTypeId">租户类型Id</param>
        </member>
        <member name="T:Tunynet.Common.OwnerData">
            <summary>
            用户数据实体类
            </summary>
        </member>
        <member name="M:Tunynet.Common.OwnerData.New">
            <summary>
            新建实体时使用
            </summary>
        </member>
        <member name="P:Tunynet.Common.OwnerData.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:Tunynet.Common.OwnerData.OwnerId">
            <summary>
            UserId
            </summary>
        </member>
        <member name="P:Tunynet.Common.OwnerData.TenantTypeId">
            <summary>
            租户类型Id
            </summary>
        </member>
        <member name="P:Tunynet.Common.OwnerData.Datakey">
            <summary>
            数据键值（要求在用户的DataKey中唯一）
            </summary>
        </member>
        <member name="P:Tunynet.Common.OwnerData.LongValue">
            <summary>
            long数据值
            </summary>
        </member>
        <member name="P:Tunynet.Common.OwnerData.DecimalValue">
            <summary>
            decimal数据值
            </summary>
        </member>
        <member name="P:Tunynet.Common.OwnerData.StringValue">
            <summary>
            字符串数据值
            </summary>
        </member>
        <member name="T:Tunynet.Common.OwnerDataKeys">
            <summary>
            拥有者数据标识
            </summary>
        </member>
        <member name="M:Tunynet.Common.OwnerDataKeys.Instance">
            <summary>
            获取单例
            </summary>
            <returns></returns>
        </member>
        <member name="T:Tunynet.Common.OwnerDataService">
            <summary>
            用户数据业务逻辑类
            </summary>
        </member>
        <member name="M:Tunynet.Common.OwnerDataService.#ctor(System.String)">
            <summary>
            构造器
            </summary>
            <param name="tenantTypeId">租户类型Id</param>
        </member>
        <member name="M:Tunynet.Common.OwnerDataService.#ctor(System.String,Tunynet.Common.Repositories.IOwnerDataRepository)">
            <summary>
            构造器
            </summary>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="ownerDataRepository">用户数据仓储</param>
        </member>
        <member name="M:Tunynet.Common.OwnerDataService.Change(System.Int64,System.String,System.Int64)">
            <summary>
            变更用户数据
            </summary>
            <param name="ownerId">用户Id</param>
            <param name="dataKey">数据标识</param>
            <param name="value">待变更的数值</param>
        </member>
        <member name="M:Tunynet.Common.OwnerDataService.Change(System.Int64,System.String,System.Decimal)">
            <summary>
            变更用户数据
            </summary>
            <param name="ownerId">用户Id</param>
            <param name="dataKey">数据标识</param>
            <param name="value">待变更的数值</param>
        </member>
        <member name="M:Tunynet.Common.OwnerDataService.Change(System.Int64,System.String,System.String)">
            <summary>
            变更用户数据
            </summary>
            <param name="ownerId">用户Id</param>
            <param name="dataKey">数据标识</param>
            <param name="value">待变更的值</param>
        </member>
        <member name="M:Tunynet.Common.OwnerDataService.Get(System.Int64,System.String)">
            <summary>
            获取DataKey对应的长整形
            </summary>
            <param name="ownerId">用户Id</param>
            <param name="dataKey">DataKey</param>
            <returns>dataKey不存在时返回0</returns>
        </member>
        <member name="M:Tunynet.Common.OwnerDataService.GetLong(System.Int64,System.String)">
            <summary>
            获取DataKey对应的长整形
            </summary>
            <param name="ownerId">用户Id</param>
            <param name="dataKey">DataKey</param>
            <returns>dataKey不存在时返回0</returns>
        </member>
        <member name="M:Tunynet.Common.OwnerDataService.GetDecimal(System.Int64,System.String)">
            <summary>
            获取DataKey对应的Decimal
            </summary>
            <param name="ownerId">用户Id</param>
            <param name="dataKey">DataKey</param>
            <returns>dataKey不存在时返回0</returns>
        </member>
        <member name="M:Tunynet.Common.OwnerDataService.GetString(System.Int64,System.String)">
            <summary>
            获取DataKey对应的String
            </summary>
            <param name="ownerId">用户Id</param>
            <param name="dataKey">DataKey</param>
            <returns>dataKey不存在时返回空字符串</returns>
        </member>
        <member name="M:Tunynet.Common.OwnerDataService.GetTotalCount(System.Collections.Generic.IEnumerable{System.String},System.Int64)">
            <summary>
            获取多个数据的总计数
            </summary>
            <param name="dataKeys">需要获取统计计数的DataKeys</param>
            <param name="ownerId">用户Id</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.OwnerDataService.GetTopOwnerIds(System.String,System.Int32,System.Nullable{Tunynet.Common.OwnerData_SortBy})">
            <summary>
            获取前N个用户Id数据
            </summary>
            <param name="dataKey">dataKey</param>
            <param name="topNumber">获取记录的个数</param>
            <param name="sortBy">排序字段</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.OwnerDataService.GetPagingOwnerIds(System.String,System.Int32,System.Nullable{Tunynet.Common.OwnerData_SortBy})">
            <summary>
            获取用户Id分页数据
            </summary>
            <param name="dataKey">dataKey</param>
            <param name="pageIndex">页码</param>
            <param name="sortBy">排序字段</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.OwnerDataService.ClearOwnerData(System.Int64)">
            <summary>
            清除指定用户的用户数据
            </summary>
            <param name="ownerId">用户Id</param>
        </member>
        <member name="M:Tunynet.Common.OwnerDataService.Gets(System.Int64,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            批量获取拥有者的数据统计
            </summary>
            <param name="ownerId"></param>
            <param name="dataKeys"></param>
            <returns></returns>
        </member>
        <member name="T:Tunynet.Common.AccountBinding">
            <summary>
            账号绑定实体类
            </summary>
        </member>
        <member name="M:Tunynet.Common.AccountBinding.New">
            <summary>
            创建账号绑定
            </summary>
            <param name="user"></param>
        </member>
        <member name="P:Tunynet.Common.AccountBinding.Id">
             <summary>
            主键标识
             </summary>
        </member>
        <member name="P:Tunynet.Common.AccountBinding.UserId">
             <summary>
            用户Id
             </summary>
        </member>
        <member name="P:Tunynet.Common.AccountBinding.AccountTypeKey">
             <summary>
            第三方账号类型
             </summary>
        </member>
        <member name="P:Tunynet.Common.AccountBinding.Identification">
             <summary>
            第三方账号标识
             </summary>
        </member>
        <member name="P:Tunynet.Common.AccountBinding.AccessToken">
             <summary>
            oauth授权凭证加密串
             </summary>
        </member>
        <member name="P:Tunynet.Common.AccountBinding.ExpiredDate">
            <summary>
            AccessToken过期时间
            </summary>
        </member>
        <member name="T:Tunynet.Common.AccountBindingService">
            <summary>
            账号绑定业务逻辑类
            </summary>
        </member>
        <member name="M:Tunynet.Common.AccountBindingService.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Tunynet.Common.AccountBindingService.#ctor(Tunynet.Common.Repositories.AccountBindingRepository)">
            <summary>
            构造函数
            </summary>
            <param name="repository"></param>
        </member>
        <member name="M:Tunynet.Common.AccountBindingService.CreateAccountBinding(Tunynet.Common.AccountBinding)">
            <summary>
            创建第三方账号绑定
            </summary>
            <param name="account"></param>     
        </member>
        <member name="M:Tunynet.Common.AccountBindingService.UpdateAccessToken(System.Int64,System.String,System.String,System.String,System.Int32)">
            <summary>
            更新授权凭据
            </summary>
            <param name="userId"></param>
            <param name="accountTypeKey"></param>
            <param name="identification"></param>
            <param name="accessToken"></param>
        </member>
        <member name="M:Tunynet.Common.AccountBindingService.DeleteAccountBinding(System.Int64,System.String)">
            <summary>
            删除第三方账号绑定
            </summary>
            <param name="userId"></param>
            <param name="accountTypeKey">第三方账号类型Key</param>
        </member>
        <member name="M:Tunynet.Common.AccountBindingService.GetAccountBinding(System.Int64,System.String)">
            <summary>
            获取单个第三方账号绑定
            </summary>
            <param name="userId">用户Id</param>
            <param name="accountTypeKey">第三方账号类型Key</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.AccountBindingService.GetAccountBindings(System.Int64)">
            <summary>
            获取某用户的所有第三方账号绑定
            </summary>
            <param name="userId"></param>
            <returns>若没有，则返回空集合</returns>
        </member>
        <member name="M:Tunynet.Common.AccountBindingService.GetUserId(System.String,System.String)">
            <summary>
            获取用户Id
            </summary>
            <param name="accountTypeKey">第三方账号类型Key</param>
            <param name="Identification">第三方账号标识</param>
            <returns>用户Id</returns>
        </member>
        <member name="M:Tunynet.Common.AccountBindingService.UpdateAccountType(Tunynet.Common.AccountType)">
            <summary>
            更新第三方账号类型
            </summary>
            <param name="accountType"></param>
        </member>
        <member name="M:Tunynet.Common.AccountBindingService.GetAccountType(System.String)">
            <summary>
            获取第三方账号类型
            </summary>
            <param name="accountTypeKey"></param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.AccountBindingService.GetAccountTypes(System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            获取所有第三方账号类型
            </summary>
            <returns>若没有，则返回空集合</returns>
        </member>
        <member name="T:Tunynet.Common.AccountType">
            <summary>
            第三方账号类型
            </summary>
        </member>
        <member name="M:Tunynet.Common.AccountType.New">
            <summary>
            创建第三方账号类型
            </summary>
            <param name="user"></param>
        </member>
        <member name="P:Tunynet.Common.AccountType.AccountTypeKey">
             <summary>
            第三方账号类型标识
             </summary>
        </member>
        <member name="P:Tunynet.Common.AccountType.ThirdAccountGetterClassType">
            <summary>
            第三方账号获取器实现类Type值（如：Spacebuilder.Group.GroupConfig,Spacebuilder.Group）
            </summary>
        </member>
        <member name="P:Tunynet.Common.AccountType.AppKey">
             <summary>
            网站接入应用标识
             </summary>
        </member>
        <member name="P:Tunynet.Common.AccountType.AppSecret">
             <summary>
            网站接入应用加密串
             </summary>
        </member>
        <member name="P:Tunynet.Common.AccountType.IsSync">
             <summary>
            是否同步发布微博
             </summary>
        </member>
        <member name="P:Tunynet.Common.AccountType.IsShareMicroBlog">
             <summary>
            绑定成功时是否分享一条微博
             </summary>
        </member>
        <member name="P:Tunynet.Common.AccountType.IsFollowMicroBlog">
             <summary>
            是否关注指定微博
             </summary>
        </member>
        <member name="P:Tunynet.Common.AccountType.OfficialMicroBlogAccount">
             <summary>
            官方微博账号
             </summary>
        </member>
        <member name="P:Tunynet.Common.AccountType.IsEnabled">
             <summary>
            是否启用
             </summary>
        </member>
        <member name="T:Tunynet.Common.AccountTypeKeys">
            <summary>
            第三方账号类型标识
            </summary>
        </member>
        <member name="M:Tunynet.Common.AccountTypeKeys.QQ">
            <summary>
            QQ
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.AccountTypeKeys.SinaWeibo">
            <summary>
            新浪微博
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.AccountTypeKeys.Renren">
            <summary>
            人人
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.IAccountBindingRepository.CreateAccountBinding(Tunynet.Common.AccountBinding)">
            <summary>
            创建第三方账号绑定
            </summary>
            <param name="account"></param>     
        </member>
        <member name="M:Tunynet.Common.Repositories.IAccountBindingRepository.DeleteAccountBinding(System.Int64,System.String)">
            <summary>
            删除第三方账号绑定
            </summary>
            <param name="userId"></param>
            <param name="accountTypeKey">第三方账号类型Key</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.IAccountBindingRepository.GetAccountBinding(System.Int64,System.String)">
            <summary>
            获取单个第三方账号绑定
            </summary>
            <param name="userId">用户Id</param>
            <param name="accountTypeKey">第三方账号类型Key</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.IAccountBindingRepository.GetAccountBindings(System.Int64)">
            <summary>
            获取某用户的所有第三方账号绑定
            </summary>
            <param name="userId"></param>
            <returns>若没有，则返回空集合</returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.IAccountBindingRepository.GetUserId(System.String,System.String)">
            <summary>
            获取用户Id
            </summary>
            <param name="accountTypeKey">第三方账号类型Key</param>
            <param name="Identification">第三方账号标识</param>
            <returns>用户Id</returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.IAccountBindingRepository.UpdateAccessToken(System.Int64,System.String,System.String,System.String,System.Int32)">
            <summary>
            更新授权凭据
            </summary>
            <param name="userId"></param>
            <param name="accountTypeKey"></param>
            <param name="identification"></param>
            <param name="accessToken"></param>
            <param name="expires_in"></param>
        </member>
        <member name="M:Tunynet.Common.Repositories.AccountBindingRepository.CreateAccountBinding(Tunynet.Common.AccountBinding)">
            <summary>
            创建第三方账号绑定
            </summary>
            <param name="account"></param>     
        </member>
        <member name="M:Tunynet.Common.Repositories.AccountBindingRepository.UpdateAccessToken(System.Int64,System.String,System.String,System.String,System.Int32)">
            <summary>
            更新授权凭据
            </summary>
            <param name="userId"></param>
            <param name="accountTypeKey"></param>
            <param name="identification"></param>
            <param name="accessToken"></param>
        </member>
        <member name="M:Tunynet.Common.Repositories.AccountBindingRepository.DeleteAccountBinding(System.Int64,System.String)">
            <summary>
            删除第三方账号绑定
            </summary>
            <param name="userId"></param>
            <param name="accountTypeKey">第三方账号类型Key</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.AccountBindingRepository.GetAccountBinding(System.Int64,System.String)">
            <summary>
            获取单个第三方账号绑定
            </summary>
            <param name="userId">用户Id</param>
            <param name="accountTypeKey">第三方账号类型Key</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.AccountBindingRepository.GetAccountBindings(System.Int64)">
            <summary>
            获取某用户的所有第三方账号绑定
            </summary>
            <param name="userId"></param>
            <returns>若没有，则返回空集合</returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.AccountBindingRepository.GetUserId(System.String,System.String)">
            <summary>
            获取用户Id
            </summary>
            <param name="accountTypeKey">第三方账号类型Key</param>
            <param name="Identification">第三方账号标识</param>
            <returns>用户Id</returns>
        </member>
        <member name="T:Tunynet.Common.ChangePointsEventArgs">
            <summary>
            用户更改积分的参数
            </summary>
        </member>
        <member name="M:Tunynet.Common.ChangePointsEventArgs.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            更新积分
            </summary>
            <param name="experiencePoints">经验积分</param>
            <param name="reputationPoints">威望积分</param>
            <param name="tradePoints">交易积分</param>
            <param name="tradePoints2">交易积分2</param>
            <param name="tradePoints3">交易积分3</param>
            <param name="tradePoints4">交易积分4</param>
        </member>
        <member name="M:Tunynet.Common.ChangePointsEventArgs.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            更新积分
            </summary>
            <param name="experiencePoints">经验积分</param>
            <param name="reputationPoints">威望积分</param>
            <param name="tradePoints">交易积分</param>
            <param name="tradePoints2">交易积分2</param>
            <param name="tradePoints3">交易积分3</param>
            <param name="tradePoints4">交易积分4</param>
            <param name="eventOperationType">事件类型</param>
        </member>
        <member name="F:Tunynet.Common.ChangePointsEventArgs.experiencePoints">
            <summary>
            经验值
            </summary>
        </member>
        <member name="F:Tunynet.Common.ChangePointsEventArgs.reputationPoints">
            <summary>
            威望积分
            </summary>
        </member>
        <member name="F:Tunynet.Common.ChangePointsEventArgs.tradePoints">
            <summary>
            交易积分
            </summary>
        </member>
        <member name="F:Tunynet.Common.ChangePointsEventArgs.tradePoints2">
            <summary>
            交易积分2
            </summary>
        </member>
        <member name="F:Tunynet.Common.ChangePointsEventArgs.tradePoints3">
            <summary>
            交易积分3
            </summary>
        </member>
        <member name="F:Tunynet.Common.ChangePointsEventArgs.tradePoints4">
            <summary>
            交易积分4
            </summary>
        </member>
        <member name="P:Tunynet.Common.ChangePointsEventArgs.ExperiencePoints">
            <summary>
            经验值
            </summary>
        </member>
        <member name="P:Tunynet.Common.ChangePointsEventArgs.ReputationPoints">
            <summary>
            威望积分
            </summary>
        </member>
        <member name="P:Tunynet.Common.ChangePointsEventArgs.TradePoints">
            <summary>
            交易积分
            </summary>
        </member>
        <member name="P:Tunynet.Common.ChangePointsEventArgs.TradePoints2">
            <summary>
            交易积分2
            </summary>
        </member>
        <member name="P:Tunynet.Common.ChangePointsEventArgs.TradePoints3">
            <summary>
            交易积分3
            </summary>
        </member>
        <member name="P:Tunynet.Common.ChangePointsEventArgs.TradePoints4">
            <summary>
            交易积分4
            </summary>
        </member>
        <member name="T:Tunynet.Common.RewardAndPunishmentUserEventArgs">
            <summary>
            用户更改积分的参数
            </summary>
        </member>
        <member name="M:Tunynet.Common.RewardAndPunishmentUserEventArgs.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            更新积分
            </summary>
            <param name="experiencePoints">经验积分</param>
            <param name="reputationPoints">威望积分</param>
            <param name="tradePoints">交易积分</param>
            <param name="tradePoints2">交易积分2</param>
            <param name="tradePoints3">交易积分3</param>
            <param name="tradePoints4">交易积分4</param>
        </member>
        <member name="M:Tunynet.Common.RewardAndPunishmentUserEventArgs.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            更新积分
            </summary>
            <param name="experiencePoints">经验积分</param>
            <param name="reputationPoints">威望积分</param>
            <param name="tradePoints">交易积分</param>
            <param name="tradePoints2">交易积分2</param>
            <param name="tradePoints3">交易积分3</param>
            <param name="tradePoints4">交易积分4</param>
            <param name="eventOperationType">事件类型</param>
        </member>
        <member name="F:Tunynet.Common.RewardAndPunishmentUserEventArgs.experiencePoints">
            <summary>
            经验值
            </summary>
        </member>
        <member name="F:Tunynet.Common.RewardAndPunishmentUserEventArgs.reputationPoints">
            <summary>
            威望积分
            </summary>
        </member>
        <member name="F:Tunynet.Common.RewardAndPunishmentUserEventArgs.tradePoints">
            <summary>
            交易积分
            </summary>
        </member>
        <member name="F:Tunynet.Common.RewardAndPunishmentUserEventArgs.tradePoints2">
            <summary>
            交易积分2
            </summary>
        </member>
        <member name="F:Tunynet.Common.RewardAndPunishmentUserEventArgs.tradePoints3">
            <summary>
            交易积分3
            </summary>
        </member>
        <member name="F:Tunynet.Common.RewardAndPunishmentUserEventArgs.tradePoints4">
            <summary>
            交易积分4
            </summary>
        </member>
        <member name="P:Tunynet.Common.RewardAndPunishmentUserEventArgs.ExperiencePoints">
            <summary>
            经验值
            </summary>
        </member>
        <member name="P:Tunynet.Common.RewardAndPunishmentUserEventArgs.ReputationPoints">
            <summary>
            威望积分
            </summary>
        </member>
        <member name="P:Tunynet.Common.RewardAndPunishmentUserEventArgs.TradePoints">
            <summary>
            交易积分
            </summary>
        </member>
        <member name="P:Tunynet.Common.RewardAndPunishmentUserEventArgs.TradePoints2">
            <summary>
            交易积分2
            </summary>
        </member>
        <member name="P:Tunynet.Common.RewardAndPunishmentUserEventArgs.TradePoints3">
            <summary>
            交易积分3
            </summary>
        </member>
        <member name="P:Tunynet.Common.RewardAndPunishmentUserEventArgs.TradePoints4">
            <summary>
            交易积分4
            </summary>
        </member>
        <member name="T:Tunynet.Common.Configuration.UserSettings">
            <summary>
            用户相关设置
            </summary>
        </member>
        <member name="P:Tunynet.Common.Configuration.UserSettings.RegistrationMode">
            <summary>
            用户注册方式设置
            </summary>
        </member>
        <member name="P:Tunynet.Common.Configuration.UserSettings.AccountActivation">
            <summary>
            账户激活方法
            </summary>
        </member>
        <member name="P:Tunynet.Common.Configuration.UserSettings.MinUserNameLength">
            <summary>
            用户名最短长度
            </summary>
        </member>
        <member name="P:Tunynet.Common.Configuration.UserSettings.MaxUserNameLength">
            <summary>
            用户名的最大长度
            </summary>
        </member>
        <member name="P:Tunynet.Common.Configuration.UserSettings.UserNameRegex">
            <summary>
            用户名验证正则表达式
            </summary>
        </member>
        <member name="P:Tunynet.Common.Configuration.UserSettings.NickNameRegex">
            <summary>
            昵称的正则
            </summary>
        </member>
        <member name="P:Tunynet.Common.Configuration.UserSettings.MinPasswordLength">
            <summary>
            密码最小长度
            </summary>
        </member>
        <member name="P:Tunynet.Common.Configuration.UserSettings.MinRequiredNonAlphanumericCharacters">
            <summary>
            密码中包含的最少特殊字符数
            </summary>
        </member>
        <member name="P:Tunynet.Common.Configuration.UserSettings.EmailRegex">
            <summary>
            Email验证正则表达式
            </summary>
        </member>
        <member name="P:Tunynet.Common.Configuration.UserSettings.EnableTrackAnonymous">
            <summary>
            是否启用匿名用户跟踪
            </summary>
        </member>
        <member name="P:Tunynet.Common.Configuration.UserSettings.UserOnlineTimeWindow">
            <summary>
            指定用户在最近一次活动时间之后多长时间视为在线的分钟数
            </summary>
        </member>
        <member name="P:Tunynet.Common.Configuration.UserSettings.EnableNotActivatedUsersToLogin">
            <summary>
            允许未激活的用户登录
            </summary>
        </member>
        <member name="P:Tunynet.Common.Configuration.UserSettings.RequiresUniqueMobile">
            <summary>
            用户注册时是否允许手机号重复
            </summary>
        </member>
        <member name="P:Tunynet.Common.Configuration.UserSettings.UserPasswordFormat">
            <summary>
            用户密码加密方式
            </summary>
        </member>
        <member name="P:Tunynet.Common.Configuration.UserSettings.EnableNickname">
            <summary>
            是否启用昵称
            </summary>
        </member>
        <member name="P:Tunynet.Common.Configuration.UserSettings.DisplayNameType">
            <summary>
            用户对外显示哪个名称（如果未启用昵称，则该选项无需设置）
            </summary>
        </member>
        <member name="P:Tunynet.Common.Configuration.UserSettings.AutomaticModerated">
            <summary>
            新注册用户是否自动处于管制状态
            </summary>
        </member>
        <member name="P:Tunynet.Common.Configuration.UserSettings.NoModeratedUserPoint">
            <summary>
            用户自动接触管制状态所需的积分（用户综合积分）
            </summary>
        </member>
        <member name="P:Tunynet.Common.Configuration.UserSettings.DisallowedUserNames">
            <summary>
            不允许使用的用户名
            </summary>
            <remarks>
            多个用户名之间用逗号分割
            </remarks>
        </member>
        <member name="P:Tunynet.Common.Configuration.UserSettings.MyHomePageAsSiteEntry">
            <summary>
            我的首页作为站点入口
            </summary>
            <remarks>
            登录成功后是否跳转到我的首页
            </remarks>
        </member>
        <member name="P:Tunynet.Common.Configuration.UserSettings.SuperAdministratorRoleName">
            <summary>
            超级管理员角色名称
            </summary>
        </member>
        <member name="P:Tunynet.Common.Configuration.UserSettings.AnonymousRoleName">
            <summary>
            匿名用户角色名称
            </summary>
        </member>
        <member name="P:Tunynet.Common.Configuration.UserSettings.EnableAudit">
            <summary>
            是否启用人工审核
            </summary>
        </member>
        <member name="P:Tunynet.Common.Configuration.UserSettings.NoAuditedRoleNames">
            <summary>
            不需要审核的角色集合
            </summary>
        </member>
        <member name="P:Tunynet.Common.Configuration.UserSettings.MinNoAuditedUserRank">
            <summary>
            最小不需要审核的用户等级
            </summary>
        </member>
        <member name="T:Tunynet.Common.CreateUserEventArgs">
            <summary>
            创建用户事件参数
            </summary>
        </member>
        <member name="M:Tunynet.Common.CreateUserEventArgs.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="password">用户密码</param>
        </member>
        <member name="P:Tunynet.Common.CreateUserEventArgs.Password">
            <summary>
            用户密码
            </summary>
        </member>
        <member name="T:Tunynet.Common.DeleteUserEventArgs">
            <summary>
            删除用户事件参数
            </summary>
        </member>
        <member name="M:Tunynet.Common.DeleteUserEventArgs.#ctor(System.String,System.Boolean)">
            <summary>
            构造函数
            </summary>
            <param name="takeOverUserName">用于接管删除用户时不能删除的内容(例如：用户创建的群组)</param>
            <param name="takeOverAll">是否接管被删除用户的所有内容</param>
        </member>
        <member name="P:Tunynet.Common.DeleteUserEventArgs.TakeOverUserName">
            <summary>
            用于接管删除用户时不能删除的内容(例如：用户创建的群组)
            </summary>
        </member>
        <member name="P:Tunynet.Common.DeleteUserEventArgs.TakeOverAll">
            <summary>
            是否接管被删除用户的所有内容
            </summary>
        </member>
        <member name="T:Tunynet.Common.IAuthenticationService">
            <summary>
            用于身份认证的接口
            </summary>
            <remarks>实例的生命周期为每HttpRequest</remarks>
        </member>
        <member name="M:Tunynet.Common.IAuthenticationService.SignIn(Tunynet.Common.IUser,System.Boolean)">
            <summary>
            登录
            </summary>
            <param name="user">登录的用户</param>
            <param name="rememberPassword">是否记住密码</param>
        </member>
        <member name="M:Tunynet.Common.IAuthenticationService.SignOut">
            <summary>
            注销
            </summary>
        </member>
        <member name="M:Tunynet.Common.IAuthenticationService.GetAuthenticatedUser">
            <summary>
            获取当前登录的用户
            </summary>
            <returns>
            当前用户未通过认证则返回null
            </returns>
        </member>
        <member name="T:Tunynet.Common.IMembershipService">
            <summary>
            用户账户业务逻辑接口（使用单点登录时需替换具体实现）
            </summary>
        </member>
        <member name="M:Tunynet.Common.IMembershipService.CreateUser(Tunynet.Common.IUser,System.String,Tunynet.Common.UserCreateStatus@)">
            <summary>
            创建用户
            </summary>
            <param name="user">待创建的用户</param>
            <param name="password">密码</param>
            <param name="userCreateStatus">用户账号创建状态</param>
            <returns>创建成功返回IUser，创建失败返回null</returns>
        </member>
        <member name="M:Tunynet.Common.IMembershipService.CreateUser(Tunynet.Common.IUser,System.String,System.String,System.String,System.Boolean,Tunynet.Common.UserCreateStatus@)">
            <summary>
            创建用户
            </summary>
            <param name="user">待创建的用户</param>
            <param name="password">密码</param>
            <param name="passwordQuestion">密码问题</param>
            <param name="passwordAnswer">密码答案</param>
            <param name="ignoreDisallowedUsername">是否忽略禁用的用户名称</param>
            <param name="userCreateStatus">用户账号创建状态</param>
            <returns>创建成功返回IUser，创建失败返回null</returns>
        </member>
        <member name="M:Tunynet.Common.IMembershipService.DeleteUser(System.Int64,System.String,System.Boolean)">
            <summary>
            删除用户
            </summary>
            <param name="userId">用户Id</param>
            <param name="takeOverUserName">用于接管删除用户时不能删除的内容(例如：用户创建的群组)</param>
            <param name="isTakeOver">是否接管被删除用户可被接管的内容</param>
            <returns><see cref="T:Tunynet.Common.UserDeleteStatus"/></returns>
        </member>
        <member name="M:Tunynet.Common.IMembershipService.UpdateUser(Tunynet.Common.IUser)">
            <summary>
            更新用户
            </summary>
            <param name="user"></param>
        </member>
        <member name="M:Tunynet.Common.IMembershipService.ActivateUsers(System.Collections.Generic.IEnumerable{System.Int64},System.Boolean)">
            <summary>
            批量激活用户
            </summary>
            <param name="userIds">用户Id集合</param>
            <param name="isActivated">激活状态</param>
        </member>
        <member name="M:Tunynet.Common.IMembershipService.ChangePassword(System.String,System.String,System.String)">
            <summary>
            更新密码（需要验证当前密码）
            </summary>
            <param name="username">用户名</param>
            <param name="password">当前密码</param>
            <param name="newPassword">新密码</param>
            <returns>更新成功返回true，否则返回false</returns>
        </member>
        <member name="M:Tunynet.Common.IMembershipService.ResetPassword(System.String,System.String)">
            <summary>
            重设密码（无需验证当前密码，供管理员或忘记密码时使用）
            </summary>
            <param name="username">用户名</param>
            <param name="newPassword">新密码</param>
            <returns>更新成功返回true，否则返回false</returns>
        </member>
        <member name="M:Tunynet.Common.IMembershipService.ValidateUser(System.String,System.String)">
            <summary>
            验证提供的用户名和密码是否匹配
            </summary>
            <param name="username">用户名</param>
            <param name="password">密码</param>
            <returns>返回<see cref="T:Tunynet.Common.UserLoginStatus"/></returns>
        </member>
        <member name="M:Tunynet.Common.IMembershipService.SendRecoverPasswordEmail(System.String,System.String)">
            <summary>
            发送获取密码Email
            </summary>
            <remarks>
            由具体实现类来决定是否发送之前是否验证accountEmail与username的匹配性
            </remarks>
            <param name="accountEmail">账号密码</param>
            <param name="username">用户名</param>
            <returns>发送成功返回true，否则返回false</returns>
        </member>
        <member name="T:Tunynet.Common.IUser">
            <summary>
            用户实体接口
            </summary>
        </member>
        <member name="P:Tunynet.Common.IUser.UserId">
            <summary>
            用户Id
            </summary>
        </member>
        <member name="P:Tunynet.Common.IUser.UserName">
            <summary>
            用户名
            </summary>
        </member>
        <member name="P:Tunynet.Common.IUser.UserType">
            <summary>
            用户类型
            </summary>
        </member>
        <member name="P:Tunynet.Common.IUser.AccountEmail">
            <summary>
            账号邮箱
            </summary>
        </member>
        <member name="P:Tunynet.Common.IUser.IsEmailVerified">
            <summary>
            账号邮箱是否通过验证
            </summary>
        </member>
        <member name="P:Tunynet.Common.IUser.AccountMobile">
            <summary>
            账号手机号码
            </summary>
        </member>
        <member name="P:Tunynet.Common.IUser.IsMobileVerified">
            <summary>
            手机号码是否通过验证
            </summary>
        </member>
        <member name="P:Tunynet.Common.IUser.TrueName">
            <summary>
            真实姓名(或名称)
            </summary>
        </member>
        <member name="P:Tunynet.Common.IUser.NickName">
            <summary>
            昵称
            </summary>
        </member>
        <member name="P:Tunynet.Common.IUser.ForceLogin">
            <summary>
            是否强制用户登录
            </summary>
        </member>
        <member name="P:Tunynet.Common.IUser.IsActivated">
            <summary>
            账号是否激活
            </summary>
        </member>
        <member name="P:Tunynet.Common.IUser.DateCreated">
            <summary>
            创建日期
            </summary>
        </member>
        <member name="P:Tunynet.Common.IUser.LastActivityTime">
            <summary>
            上传活动时间
            </summary>
        </member>
        <member name="P:Tunynet.Common.IUser.LastAction">
            <summary>
            上次操作
            </summary>
        </member>
        <member name="P:Tunynet.Common.IUser.IpCreated">
            <summary>
            注册用户时IP地址
            </summary>
        </member>
        <member name="P:Tunynet.Common.IUser.IpLastActivity">
            <summary>
            上次操作时IP地址 
            </summary>
        </member>
        <member name="P:Tunynet.Common.IUser.IsBanned">
            <summary>
            是否被封禁
            </summary>
        </member>
        <member name="P:Tunynet.Common.IUser.IsModerated">
            <summary>
            是否被管制
            </summary>
        </member>
        <member name="P:Tunynet.Common.IUser.DisplayName">
            <summary>
            对外显示名称
            </summary>
        </member>
        <member name="P:Tunynet.Common.IUser.Avatar">
            <summary>
            头像(存储相对路径)
            </summary>
        </member>
        <member name="P:Tunynet.Common.IUser.HasAvatar">
            <summary>
            是否有头像
            </summary>
        </member>
        <member name="P:Tunynet.Common.IUser.ExperiencePoints">
            <summary>
            经验积分值
            </summary>
        </member>
        <member name="P:Tunynet.Common.IUser.ReputationPoints">
            <summary>
            威望积分值
            </summary>
        </member>
        <member name="P:Tunynet.Common.IUser.TradePoints">
            <summary>
            交易积分值
            </summary>
        </member>
        <member name="P:Tunynet.Common.IUser.TradePoints2">
            <summary>
            交易积分值2
            </summary>
        </member>
        <member name="P:Tunynet.Common.IUser.TradePoints3">
            <summary>
            交易积分值3
            </summary>
        </member>
        <member name="P:Tunynet.Common.IUser.TradePoints4">
            <summary>
            交易积分值4
            </summary>
        </member>
        <member name="P:Tunynet.Common.IUser.Rank">
            <summary>
            用户等级
            </summary>
        </member>
        <member name="P:Tunynet.Common.IUser.FrozenTradePoints">
            <summary>
            冻结的交易积分
            </summary>
        </member>
        <member name="T:Tunynet.Common.IUserService">
            <summary>
            用户业务逻辑接口
            </summary>
        </member>
        <member name="M:Tunynet.Common.IUserService.BanUser(System.Int64,System.DateTime,System.String)">
            <summary>
            封禁用户
            </summary>
            <param name="userId">用户Id</param>
            <param name="banDeadline">封禁截止日期</param>
            <param name="banReason">封禁原因</param>
        </member>
        <member name="M:Tunynet.Common.IUserService.UnbanUser(System.Int64)">
            <summary>
            解禁用户
            </summary>
            <param name="userId">用户Id</param>
        </member>
        <member name="M:Tunynet.Common.IUserService.SetModeratedStatus(System.Collections.Generic.IEnumerable{System.Int64},System.Boolean)">
            <summary>
            设置用户管制状态
            </summary>
            <param name="userIds">用户Id集合</param>
            <param name="isModerated">是否被管制</param>
        </member>
        <member name="M:Tunynet.Common.IUserService.ChangePoints(System.Int64,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            变更用户积分
            </summary>
            <param name="userId">用户Id</param>
            <param name="experiencePoints">经验积分值</param>
            <param name="reputationPoints">威望积分值</param>
            <param name="tradePoints">交易积分值</param>
            <param name="tradePoints2">交易积分值2</param>
            <param name="tradePoints3">交易积分值3</param>
            <param name="tradePoints4">交易积分值4</param>
        </member>
        <member name="M:Tunynet.Common.IUserService.FreezeTradePoints(System.Int64,System.Int32)">
            <summary>
            冻结交易积分
            </summary>
            <param name="userId">用户Id</param>
            <param name="tradePoints">交易积分值</param>
        </member>
        <member name="M:Tunynet.Common.IUserService.UnfreezeTradePoints(System.Int64,System.Int32)">
            <summary>
            解除冻结交易积分
            </summary>
            <param name="userId">用户Id</param>
            <param name="tradePoints">交易积分值</param>
        </member>
        <member name="M:Tunynet.Common.IUserService.ReduceFrozenTradePoints(System.Int64,System.Int32)">
            <summary>
            减少冻结的交易积分（完成交易时使用）
            </summary>
            <param name="userId">用户Id</param>
            <param name="frozenTradePoints">需减少的冻结交易积分值</param>
        </member>
        <member name="M:Tunynet.Common.IUserService.UpdateRank(System.Int64,System.Int32)">
            <summary>
            更新用户等级
            </summary>
            <param name="userId">用户Id</param>
            <param name="rank">更新后的等级</param>
        </member>
        <member name="M:Tunynet.Common.IUserService.GetUserByNickName(System.String)">
            <summary>
            根据用户昵称获取用户
            </summary>
            <param name="nickName"></param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.IUserService.GetUser(System.Int64)">
            <summary>
            获取用户
            </summary>
            <param name="userId">用户ID</param>
        </member>
        <member name="M:Tunynet.Common.IUserService.GetUser(System.String)">
            <summary>
            获取用户
            </summary>
            <param name="userName">用户名</param>
        </member>
        <member name="M:Tunynet.Common.IUserService.FindUserByEmail(System.String)">
            <summary>
            根据账号邮箱获取用户
            </summary>
            <param name="accountEmail">账号邮箱</param>
        </member>
        <member name="M:Tunynet.Common.IUserService.FindUserByMobile(System.String)">
            <summary>
            根据手机号获取用户
            </summary>
            <param name="accountMobile">手机号</param>
        </member>
        <member name="M:Tunynet.Common.IUserService.GetUsers(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            依据UserId集合组装IUser集合
            </summary>
            <param name="userIds">用户Id集合</param>
            <returns></returns>
        </member>
        <member name="T:Tunynet.Common.UpdateRankEventArgs">
            <summary>
            更新用户等级
            </summary>
        </member>
        <member name="M:Tunynet.Common.UpdateRankEventArgs.#ctor(System.Int32)">
            <summary>
            更新用户等级
            </summary>
            <param name="rank"></param>
        </member>
        <member name="M:Tunynet.Common.UpdateRankEventArgs.#ctor(System.Int32,System.String)">
            <summary>
            更新用户等级
            </summary>
            <param name="rank"></param>
        </member>
        <member name="P:Tunynet.Common.UpdateRankEventArgs.Rank">
            <summary>
            用户等级
            </summary>
        </member>
        <member name="T:Tunynet.Common.RegistrationMode">
            <summary>
            注册方式
            </summary>
        </member>
        <member name="F:Tunynet.Common.RegistrationMode.All">
            <summary>
            允许所有途径的注册
            </summary>
        </member>
        <member name="F:Tunynet.Common.RegistrationMode.Invitation">
            <summary>
            仅允许通过邀请注册
            </summary>
        </member>
        <member name="F:Tunynet.Common.RegistrationMode.Disabled">
            <summary>
            禁止注册
            </summary>
        </member>
        <member name="T:Tunynet.Common.AccountActivation">
            <summary>
            帐号激活方式
            </summary>
        </member>
        <member name="F:Tunynet.Common.AccountActivation.Automatic">
            <summary>
            用户注册时自动激活
            </summary>
        </member>
        <member name="F:Tunynet.Common.AccountActivation.Email">
            <summary>
            通过验证Email激活
            </summary>
        </member>
        <member name="F:Tunynet.Common.AccountActivation.SMS">
            <summary>
            通过手机短信激活
            </summary>
        </member>
        <member name="F:Tunynet.Common.AccountActivation.Administrator">
            <summary>
            管理员激活
            </summary>
        </member>
        <member name="T:Tunynet.Common.UserPasswordFormat">
            <summary>
            用户密码存储格式
            </summary>
        </member>
        <member name="F:Tunynet.Common.UserPasswordFormat.Clear">
            <summary>
            密码未加密
            </summary>
        </member>
        <member name="F:Tunynet.Common.UserPasswordFormat.MD5">
            <summary>
            标准MD5加密
            </summary>
        </member>
        <member name="T:Tunynet.Common.DisplayNameType">
            <summary>
            用什么名称作为用户的DisplayName对外显示
            </summary>
        </member>
        <member name="F:Tunynet.Common.DisplayNameType.NicknameFirst">
            <summary>
            首先采用昵称作为DisplayName，如果昵称不存在则用真实姓名作为DisplayName，如果真实姓名也不存在则用UserName作为DisplayName
            </summary>
        </member>
        <member name="F:Tunynet.Common.DisplayNameType.TrueNameFirst">
            <summary>
            首先采用真实姓名作为DisplayName，如果真实姓名不存在则用昵称作为DisplayName，如果昵称也不存在则用UserName作为DisplayName
            </summary>
        </member>
        <member name="T:Tunynet.Common.UserCreateStatus">
            <summary>    
            用于创建用户账号时的返回值
            </summary>
        </member>
        <member name="F:Tunynet.Common.UserCreateStatus.UnknownFailure">
            <summary>
            未知错误
            </summary>
        </member>
        <member name="F:Tunynet.Common.UserCreateStatus.Created">
            <summary>
            创建成功
            </summary>
        </member>
        <member name="F:Tunynet.Common.UserCreateStatus.DuplicateUsername">
            <summary>
            用户名重复
            </summary>
        </member>
        <member name="F:Tunynet.Common.UserCreateStatus.DuplicateEmailAddress">
            <summary>
            Email重复
            </summary>
        </member>
        <member name="F:Tunynet.Common.UserCreateStatus.DuplicateMobile">
            <summary>
            手机号重复
            </summary>
        </member>
        <member name="F:Tunynet.Common.UserCreateStatus.DisallowedUsername">
            <summary>
            不允许的用户名
            </summary>
        </member>
        <member name="F:Tunynet.Common.UserCreateStatus.InvalidQuestionAnswer">
            <summary>
            不合法的密码提示问题/答案
            </summary>
        </member>
        <member name="F:Tunynet.Common.UserCreateStatus.InvalidPassword">
            <summary>
            不合法的密码
            </summary>
        </member>
        <member name="T:Tunynet.Common.UserDeleteStatus">
            <summary>
            删除用户时的返回状态
            </summary>
        </member>
        <member name="F:Tunynet.Common.UserDeleteStatus.Deleted">
            <summary>
            删除成功
            </summary>
        </member>
        <member name="F:Tunynet.Common.UserDeleteStatus.InvalidTakeOverUsername">
            <summary>
            接管被删除用户内容的用户名不存在
            </summary>
        </member>
        <member name="F:Tunynet.Common.UserDeleteStatus.DeletingUserNotFound">
            <summary>
            待删除的用户不存在
            </summary>
        </member>
        <member name="F:Tunynet.Common.UserDeleteStatus.UnknownFailure">
            <summary>
            未知错误
            </summary>
        </member>
        <member name="T:Tunynet.Common.UserLoginStatus">
            <summary>
            用户登录状态
            </summary>
        </member>
        <member name="F:Tunynet.Common.UserLoginStatus.Success">
            <summary>
            通过身份验证，登录成功
            </summary>
        </member>
        <member name="F:Tunynet.Common.UserLoginStatus.InvalidCredentials">
            <summary>
            用户名、密码不匹配
            </summary>
        </member>
        <member name="F:Tunynet.Common.UserLoginStatus.NotActivated">
            <summary>
            帐户未激活
            </summary>
        </member>
        <member name="F:Tunynet.Common.UserLoginStatus.Banned">
            <summary>
            帐户被封禁
            </summary>
        </member>
        <member name="F:Tunynet.Common.UserLoginStatus.UnknownError">
            <summary>
            未知错误
            </summary>
        </member>
        <member name="T:Tunynet.Common.AtUserEntity">
            <summary>
            用户关联实体类
            </summary>
        </member>
        <member name="M:Tunynet.Common.AtUserEntity.New">
            <summary>
            新建实体时使用
            </summary>
        </member>
        <member name="P:Tunynet.Common.AtUserEntity.Id">
            <summary>
            标识列
            </summary>
        </member>
        <member name="P:Tunynet.Common.AtUserEntity.TenantTypeId">
             <summary>
            租户类型Id
             </summary>
        </member>
        <member name="P:Tunynet.Common.AtUserEntity.UserId">
             <summary>
            关联的用户名
             </summary>
        </member>
        <member name="P:Tunynet.Common.AtUserEntity.AssociateId">
             <summary>
            关联项Id
             </summary>
        </member>
        <member name="T:Tunynet.Common.AtUserEventArgs">
            <summary>
            AtUser事件参数
            </summary>
        </member>
        <member name="M:Tunynet.Common.AtUserEventArgs.#ctor(System.Int64,System.String,System.Int64)">
            <summary>
            构造函数
            </summary>
            <param name="userId">用户Id</param>
            <param name="tenantTypeId">租户类型</param>
            <param name="associateId">关联项Id</param>
            <param name="associateSubject">关联项标题</param>
        </member>
        <member name="P:Tunynet.Common.AtUserEventArgs.UserId">
            <summary>
            用户密码
            </summary>
        </member>
        <member name="P:Tunynet.Common.AtUserEventArgs.TenantTypeId">
            <summary>
            租户类型
            </summary>
        </member>
        <member name="P:Tunynet.Common.AtUserEventArgs.AssociateId">
            <summary>
            关联项Id
            </summary>
        </member>
        <member name="T:Tunynet.Common.AtUserService">
            <summary>
            用户关联业务逻辑类
            </summary>
        </member>
        <member name="M:Tunynet.Common.AtUserService.#ctor(System.String)">
            <summary>
            构造器
            </summary>
            <param name="tenantTypeId">租户类型Id</param>
        </member>
        <member name="M:Tunynet.Common.AtUserService.#ctor(System.String,Tunynet.Common.Repositories.IAtUserRepository)">
            <summary>
            构造器
            </summary>
            <param name="atUserRepository">atUser仓储</param>
            <param name="tenantTypeId">租户类型Id</param>
        </member>
        <member name="M:Tunynet.Common.AtUserService.BatchCreateAtUser(System.Collections.Generic.List{System.Int64},System.Int64,System.Int64,System.String)">
            <summary>
            批量创建At用户
            </summary>
            <param name="userIds">用户Id集合</param>
            <param name="associateId">关联项Id</param>
            <param name="userId">添加at的用户Id</param>
            <param name="associateSubject">关联项标题</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.AtUserService.ClearAtUsers(System.Int64)">
            <summary>
            清除关注用户
            </summary>
            <param name="associateId">关联项Id</param>
        </member>
        <member name="M:Tunynet.Common.AtUserService.GetPagingAssociateIds(System.Int64,System.Int32)">
            <summary>
            获取用户关联内容的Id分页集合
            </summary>
            <param name="userId">关联用户Id</param>
            <param name="pageIndex">页码</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.AtUserService.GetAtUserIds(System.Int64)">
            <summary>
            获取用户关联内容的用户Id集合
            </summary>
            <param name="associateId">关联项Id</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.AtUserService.ResolveBodyForEdit(System.String,System.Int64,System.Int64)">
            <summary>
            解析内容用于创建AtUser
            </summary>
            <param name="body">待解析的内容</param>
            <param name="userId">内容作者UserId</param>
            <param name="associateId">关联项Id</param>
        </member>
        <member name="M:Tunynet.Common.AtUserService.ResolveBodyForDetail(System.String,System.Int64,System.Int64,System.Func{System.String,System.String,System.String})">
            <summary>
            解析内容中的AtUser用户展示展示
            </summary>
            <param name="body">待解析的内容</param>
            <param name="associateId">关联项Id</param>
            <param name="userId">关联项作者Id</param>
            <param name="TagGenerate">用户生成对应标签的方法</param>
        </member>
        <member name="T:Tunynet.Common.AtUserAssociatedUrlGetterFactory">
            <summary>
            评论URL获取器工厂
            </summary>
        </member>
        <member name="M:Tunynet.Common.AtUserAssociatedUrlGetterFactory.Get(System.String)">
            <summary>
            依据tenantTypeId获取IAtUserAssociatedUrlGetter
            </summary>
            <returns></returns>
        </member>
        <member name="T:Tunynet.Common.IAtUserAssociatedUrlGetter">
            <summary>
            AtUser关联项Url获取器
            </summary>
        </member>
        <member name="M:Tunynet.Common.IAtUserAssociatedUrlGetter.GetAssociatedInfo(System.Int64,System.String)">
            <summary>
            获取关联项信息
            </summary>
            <param name="associateId">关联项Id</param>
            <param name="tenantTypeId">租户类型Id</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.IAtUserAssociatedUrlGetter.GetOwner">
            <summary>
            获取所属对象名称（例如：日志）
            </summary>
            <remarks>没有任何所属时返回空</remarks>
            <returns></returns>
        </member>
        <member name="P:Tunynet.Common.IAtUserAssociatedUrlGetter.TenantTypeId">
            <summary>
            租户类型Id
            </summary>
        </member>
        <member name="T:Tunynet.Common.Repositories.AtUserRepository">
            <summary>
            @用户Repository
            </summary>
        </member>
        <member name="T:Tunynet.Common.Repositories.IAtUserRepository">
            <summary>
            @用户Repository接口
            </summary>
        </member>
        <member name="M:Tunynet.Common.Repositories.IAtUserRepository.BatchCreateAtUser(System.Collections.Generic.List{System.Int64},System.Int64,System.String)">
            <summary>
            批量创建At用户
            </summary>
            <param name="userIds">用户Id集合</param>
            <param name="associateId">关联项Id</param>
            <param name="tenantTypeId">租户类型Id</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.IAtUserRepository.GetPagingAssociateIds(System.Int64,System.String,System.Int32)">
            <summary>
            获取用户关联内容的Id分页集合
            </summary>
            <param name="userId">关联用户Id</param>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="pageIndex">页码</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.IAtUserRepository.GetAtUserIds(System.Int64,System.String)">
            <summary>
            获取用户关联内容的用户名集合
            </summary>
            <param name="associateId">关联项Id</param>
            <param name="tenantTypeId">租户类型Id</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.IAtUserRepository.ClearAtUsers(System.Int64,System.String)">
            <summary>
            清除关注用户
            </summary>
            <param name="associateId">关联项Id</param>
            <param name="tenantTypeId">租户类型Id</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.AtUserRepository.BatchCreateAtUser(System.Collections.Generic.List{System.Int64},System.Int64,System.String)">
            <summary>
            批量创建At用户
            </summary>
            <param name="userIds">用户Id集合</param>
            <param name="associateId">关联项Id</param>
            <param name="tenantTypeId">租户类型Id</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.AtUserRepository.GetPagingAssociateIds(System.Int64,System.String,System.Int32)">
            <summary>
            获取用户关联内容的Id分页集合
            </summary>
            <param name="userId">用户Id</param>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="pageIndex">页码</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.AtUserRepository.GetAtUserIds(System.Int64,System.String)">
            <summary>
            获取用户关联内容的用户名集合
            </summary>
            <param name="associateId">关联项Id</param>
            <param name="tenantTypeId">租户类型Id</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.AtUserRepository.DeleteTrashDatas">
            <summary>
            删除垃圾数据
            </summary>
        </member>
        <member name="M:Tunynet.Common.Repositories.AtUserRepository.ClearAtUsers(System.Int64,System.String)">
            <summary>
            清除关注用户
            </summary>
            <param name="associateId">关联项Id</param>
            <param name="tenantTypeId">租户类型Id</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.AtUserRepository.GetCacheKey_AllAtUserIds(System.Int64,System.String)">
            <summary>
            获取全部提到用户名CacheKey
            </summary>
            <param name="associateId">关联项Id</param>
            <param name="tenantTypeId">租户类型Id</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.AtUserRepository.GetCacheKey_AtUserAssociateIds(System.Int64,System.String)">
            <summary>
            获取全部收藏CacheKey
            </summary>
            <param name="userId">At用户Id</param>
            <param name="tenantTypeId">租户类型Id</param>
            <returns></returns>
        </member>
        <member name="T:Tunynet.Common.BatchFollowEventArgs">
            <summary>
            收藏自定义事件
            </summary>
        </member>
        <member name="M:Tunynet.Common.BatchFollowEventArgs.#ctor(System.String,System.Int64)">
            <summary>
            构造器
            </summary>
            <param name="eventOperationType">事件操作类型</param>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="ownerId">收藏用户Id</param>
        </member>
        <member name="P:Tunynet.Common.BatchFollowEventArgs.UserId">
             <summary>
            用户Id 
             </summary>
        </member>
        <member name="T:Tunynet.Common.FollowEntity">
            <summary>
            关注用户实体类
            </summary>
        </member>
        <member name="M:Tunynet.Common.FollowEntity.New">
            <summary>
            新建实体时使用
            </summary>
        </member>
        <member name="P:Tunynet.Common.FollowEntity.Id">
             <summary>
            Id
             </summary>
        </member>
        <member name="P:Tunynet.Common.FollowEntity.UserId">
             <summary>
            关注用户Id
             </summary>
        </member>
        <member name="P:Tunynet.Common.FollowEntity.FollowedUserId">
             <summary>
            被关注用户Id
             </summary>
        </member>
        <member name="P:Tunynet.Common.FollowEntity.NoteName">
             <summary>
            备注名称
             </summary>
        </member>
        <member name="P:Tunynet.Common.FollowEntity.IsQuietly">
             <summary>
            是否为悄悄关注
             </summary>
        </member>
        <member name="P:Tunynet.Common.FollowEntity.IsMutual">
             <summary>
            是否为互相关注
             </summary>
        </member>
        <member name="P:Tunynet.Common.FollowEntity.IsNewFollower">
             <summary>
            是否为新增粉丝
             </summary>
        </member>
        <member name="P:Tunynet.Common.FollowEntity.DateCreated">
            <summary>
            创建时间
            </summary>
        </member>
        <member name="P:Tunynet.Common.FollowEntity.LastContactDate">
            <summary>
            最后联系时间
            </summary>
        </member>
        <member name="T:Tunynet.Common.Follow_SortBy">
            <summary>
            关注用户查询条件
            </summary>
        </member>
        <member name="F:Tunynet.Common.Follow_SortBy.DateCreated_Desc">
            <summary>
            关注时间
            </summary>
        </member>
        <member name="F:Tunynet.Common.Follow_SortBy.LastContent_Desc">
            <summary>
            内容最后更新时间
            </summary>
        </member>
        <member name="F:Tunynet.Common.Follow_SortBy.FollowerCount_Desc">
            <summary>
            粉丝数
            </summary>
        </member>
        <member name="F:Tunynet.Common.Follow_SortBy.LastContact_Desc">
            <summary>
            最后联系时间
            </summary>
        </member>
        <member name="T:Tunynet.Common.FollowSpecifyGroupIds">
            <summary>
            关注特殊分组Id
            </summary>
        </member>
        <member name="F:Tunynet.Common.FollowSpecifyGroupIds.UnGrouped">
            <summary>
            未分组
            </summary>
        </member>
        <member name="F:Tunynet.Common.FollowSpecifyGroupIds.All">
            <summary>
            所有分组
            </summary>
        </member>
        <member name="F:Tunynet.Common.FollowSpecifyGroupIds.Mutual">
            <summary>
            相互关注
            </summary>        
        </member>
        <member name="F:Tunynet.Common.FollowSpecifyGroupIds.Quietly">
            <summary>
            悄悄关注
            </summary>
        </member>
        <member name="T:Tunynet.Common.FollowService">
            <summary>
            关注用户业务逻辑类
            </summary>
        </member>
        <member name="M:Tunynet.Common.FollowService.#ctor">
            <summary>
            构造器
            </summary>
        </member>
        <member name="M:Tunynet.Common.FollowService.#ctor(Tunynet.Common.Repositories.IFollowRepository)">
            <summary>
            构造器
            </summary>
            <param name="followRepository">follow仓储</param>
        </member>
        <member name="M:Tunynet.Common.FollowService.Follow(System.Int64,System.Int64,System.Boolean)">
            <summary>
            关注用户
            </summary>
            <param name="userId">用户Id</param>
            <param name="followUserId">被关注用户Id</param>
            <param name="isQuietly">是否悄悄关注</param>
        </member>
        <member name="M:Tunynet.Common.FollowService.BatchFollow(System.Int64,System.Collections.Generic.IList{System.Int64},System.Boolean)">
            <summary>
            关注用户
            </summary>
            <param name="userId">用户Id</param>
            <param name="followedUserIds">被关注用户Id集合</param>
            <param name="isQuietly">是否悄悄关注</param>
        </member>
        <member name="M:Tunynet.Common.FollowService.Update(Tunynet.Common.FollowEntity)">
            <summary>
            更新关注实体
            </summary>
            <param name="follow">关注用户实体</param>
        </member>
        <member name="M:Tunynet.Common.FollowService.IsFollowed(System.Int64,System.Int64)">
            <summary>
            判断是否关注了被判定用户
            </summary>
            <param name="userId">用户Id</param>
            <param name="toUserId">被判定用户Id</param>
            <returns>true-关注,false-没关注</returns>
        </member>
        <member name="M:Tunynet.Common.FollowService.IsFollowed(System.Int64,System.Int64,System.Collections.Generic.IEnumerable{System.String}@)">
            <summary>
            判断是否关注了被判定用户
            </summary>
            <param name="userId">用户Id</param>
            <param name="toUserId">被判定用户Id</param>
            <param name="groupNames">被关注用户所属分组</param>
            <returns>true-关注,false-没关注</returns>
        </member>
        <member name="M:Tunynet.Common.FollowService.IsFollowed(System.Int64,System.Int64,System.Boolean@)">
            <summary>
            判断是否关注了被判定用户
            </summary>
            <param name="userId">用户Id</param>
            <param name="toUserId">被判定用户Id</param>
            <param name="isQuietly">是否去为悄悄关注</param>
            <returns>true-关注,false-没关注</returns>
        </member>
        <member name="M:Tunynet.Common.FollowService.IsMutualFollowed(System.Int64,System.Int64)">
            <summary>
            是否为双向关注
            </summary>
            <param name="userId">用户Id</param>
            <param name="toUserId">被判定用户Id</param>
            <returns>true-关注,false-没关注</returns>
        </member>
        <member name="M:Tunynet.Common.FollowService.CancelFollow(System.Int64,System.Int64)">
            <summary>
            取消关注
            </summary>
            <param name="userId">用户Id</param>
            <param name="followedUserId">被关注用户Id</param>
        </member>
        <member name="M:Tunynet.Common.FollowService.GetNewFollowerCount(System.Int64)">
            <summary>
            获取用户的最新粉丝数
            </summary>
            <remarks>用于新增粉丝提醒</remarks>
            <param name="userId">用户Id</param>
        </member>
        <member name="M:Tunynet.Common.FollowService.ClearNewFollowerCount(System.Int64)">
             <summary>
             清除最新用户统计
             </summary>
             <remarks>用于清空提醒信息</remarks>
            <param name="userId">用户Id</param>
             <returns></returns>
        </member>
        <member name="M:Tunynet.Common.FollowService.RemoveFollower(System.Int64,System.Int64)">
            <summary>
            移除用户的粉丝
            </summary>
            <param name="userId">用户Id</param>
            <param name="followerUserId">粉丝的用户Id</param>
        </member>
        <member name="M:Tunynet.Common.FollowService.Get(System.Int64,System.Int64)">
            <summary>
            获取关注信息实体
            </summary>
            <param name="userId">用户Id</param>
            <param name="followedUserId">被关注用户Id</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.FollowService.GetNoteName(System.Int64,System.Int64)">
            <summary>
            获取用户的备注名称
            </summary>
            <param name="userId">用户Id</param>
            <param name="followedUserId">被关注用户Id</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.FollowService.GetTopFollowedUserIds(System.Int64,System.Int32,System.Nullable{System.Int64},System.Nullable{Tunynet.Common.Follow_SortBy})">
            <summary>
            获取关注用户Id列表
            </summary>
            <param name="userId">用户Id</param>
            <param name="topNumber">需要获取的记录数</param>
            <param name="groupId">群组Id</param>
            <param name="sortBy">排序规则</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.FollowService.GetPortionFollowedUserIds(System.Int64,System.Nullable{System.Int64},System.Nullable{Tunynet.Common.Follow_SortBy})">
            <summary>
            获取部分关注用户Id列表（前1000条）
            </summary>
            <param name="userId">用户Id</param>
            <param name="groupId">群组Id</param>
            <param name="sortBy">排序规则</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.FollowService.GetFollowedUserIds(System.Int64,System.Nullable{System.Int64},System.Nullable{Tunynet.Common.Follow_SortBy},System.Int32)">
             <summary>
             获取关注用户Id列表
             </summary>
             <param name="userId">用户Id</param>
             <param name="groupId"><para>用户分组Id</para><remarks>groupId为0时获取未分组的用户，为null时获取所有用户</remarks></param>
             <param name="sortBy">排序条件</param>
             <param name="pageIndex">页码</param>
            <remarks>
            groupId为null 则排序sortBy才生效
             </remarks>
        </member>
        <member name="M:Tunynet.Common.FollowService.GetTopFollows(System.Int64,System.Int32,System.Nullable{System.Int64},System.Nullable{Tunynet.Common.Follow_SortBy})">
            <summary>
            获取前N个关注实体集合
            </summary>
            <param name="userId">用户Id</param>
            <param name="topNumber">需要获取的记录数</param>
            <param name="groupId">群组Id</param>
            <param name="sortBy">排序规则</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.FollowService.GetFollows(System.Int64,System.Nullable{System.Int64},System.Nullable{Tunynet.Common.Follow_SortBy})">
            <summary>
            获取关注实体集合
            </summary>
            <param name="userId">用户Id</param>
            <param name="groupId">群组Id</param>
            <param name="sortBy">排序规则</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.FollowService.GetFollowIdsForAt(System.String,System.Int64,System.Nullable{Tunynet.Common.Follow_SortBy})">
            <summary>
            查询关注的用户Id（用于@用户）
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.FollowService.GetFollows(System.Int64,System.Nullable{System.Int64},System.Nullable{Tunynet.Common.Follow_SortBy},System.Int32)">
            <summary>
            获取关注实体分页集合
            </summary>
            <param name="userId">用户Id</param>
            <param name="groupId">群组Id</param>
            <param name="sortBy">排序规则</param>
            <param name="pageIndex">页码</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.FollowService.GetFollowerUserIds(System.Int64,Tunynet.Common.Follow_SortBy,System.Int32)">
            <summary>
            获取粉丝Id列表
            </summary>
            <param name="userId">用户Id</param>
            <param name="sortBy">查询条件</param>
            <param name="pageIndex">页码</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.FollowService.GetRecentFollowerUserIds(System.DateTime)">
            <summary>
            获取某个时间之后新增的粉丝Id列表，用于全文检索的定时任务
            </summary>
            <param name="lastStart">上次任务的开始时间</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.FollowService.GetFollowedUsers(System.Collections.Generic.IEnumerable{System.Int64})">
             <summary>
             批量获取关注用户Id列表，用于全文检索
             </summary>
             <param name="userIds">用户Id列表</param>
            <remarks>默认isQuietly为0，即不查询悄悄关注的</remarks>
        </member>
        <member name="M:Tunynet.Common.FollowService.GetTopFollowerUserIds(System.Int64,Tunynet.Common.Follow_SortBy,System.Int32)">
            <summary>
            获取粉丝Id列表
            </summary>
            <param name="userId">用户Id</param>
            <param name="sortBy">查询条件</param>
            <param name="topNumber">要获取的数据记录数</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.FollowService.GetTopFollowedUserIdsFromUser(System.Int64,System.Int64,System.Int32)">
            <summary>
            根据被浏览用户获取我的关注用户中关注他的用户Id列表
            </summary>
            <param name="userId">用户Id</param>
            <param name="toUserId">被浏览用户Id</param>
            <param name="topNumber">要获取的数据记录数</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.FollowService.GetTopFollowedUserIdsFromUser(System.Int64,System.Int64,System.Int32,System.Int32)">
            <summary>
            根据被浏览用户获取我的关注用户中关注他的用户Id列表
            </summary>
            <param name="userId">用户Id</param>
            <param name="toUserId">被浏览用户Id</param>
            <param name="pageSize"></param>
            <param name="pageIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.FollowService.GetTopFollowedUserIdsOfFollowers(System.Int64,System.Int64,System.Int32)">
            <summary>
            获取用户粉丝的关注
            </summary>
            <param name="userId">空间主人用户Id</param>
            <param name="visitorId">访问者用户Id（用来排除当前访问者与访问者的关注用户）</param>
            <param name="topNumber">要获取的数据记录数</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.FollowService.GetTopFollowedUserIdsOfFollowers(System.Int64,System.Int64,System.Int32,System.Int32)">
            <summary>
             获取用户粉丝的关注
            </summary>
            <param name="userId"></param>
            <param name="visitorId"></param>
            <param name="topNumber"></param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.FollowService.GetTogetherFollowedUserIds(System.Int64,System.Int64,System.Int32)">
            <summary>
            获取用户与被浏览用户的共同关注用户Id列表
            </summary>
            <param name="userId">用户Id</param>
            <param name="toUserId">被判定用户Id</param>
            <param name="topNumber">获取数据的条数</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.FollowService.GetTogetherFollowedUserIds(System.Int64,System.Int64,System.Int32,System.Int32)">
            <summary>
            获取用户与被浏览用户的共同关注用户Id列表
            </summary>
            <param name="userId">用户Id</param>
            <param name="toUserId">被判定用户Id</param>
            <param name="pageSize"></param>
            <param name="pageIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.FollowService.CleanByUser(System.Int64)">
            <summary>
            清除用户关注
            </summary>
            <param name="userId">用户Id</param>
        </member>
        <member name="T:Tunynet.Common.Repositories.FollowRepository">
            <summary>
            关注用户Repository
            </summary>
        </member>
        <member name="T:Tunynet.Common.Repositories.IFollowRepository">
            <summary>
            关注用户数据访问接口
            </summary>
        </member>
        <member name="M:Tunynet.Common.Repositories.IFollowRepository.Follow(System.Int64,System.Int64,System.Boolean)">
            <summary>
            关注用户
            </summary>
            <param name="userId">用户Id</param>
            <param name="followedUserId">被操作用户Id</param>
            <param name="isQuietly">是否悄悄关注</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.IFollowRepository.IsFollowed(System.Int64,System.Int64)">
            <summary>
            判断是否关注了被判定用户
            </summary>
            <param name="userId">用户Id</param>
            <param name="toUserId">被判定用户Id</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.IFollowRepository.IsMutualFollowed(System.Int64,System.Int64)">
            <summary>
            是否为双向关注
            </summary>
            <param name="userId">用户Id</param>
            <param name="toUserId">被判定用户Id</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.IFollowRepository.CancelFollow(System.Int64,System.Int64)">
            <summary>
            取消关注
            </summary>
            <param name="userId">用户Id</param>
            <param name="followedUserId">被操作用户Id</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.IFollowRepository.GetNewFollowerCount(System.Int64)">
            <summary>
            获取用户的最新粉丝数
            </summary>
            <param name="userId">用户Id</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.IFollowRepository.ClearNewFollowerCount(System.Int64)">
             <summary>
             清除最新用户统计
             </summary>
            <param name="userId">用户Id</param>
             <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.IFollowRepository.RemoveFollower(System.Int64,System.Int64)">
            <summary>
            移除用户的粉丝
            </summary>
            <param name="userId">用户Id</param>
            <param name="followerUserId">粉丝的用户Id</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.IFollowRepository.Get(System.Int64,System.Int64)">
            <summary>
            获取关注用户实体
            </summary>
            <param name="userId">用户Id</param>
            <param name="followedUserId">被操作用户Id</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.IFollowRepository.CleanByUser(System.Int64)">
             <summary>
            清除用户所用的关注
             </summary>
             <param name="userId">用户Id</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.IFollowRepository.GetNoteName(System.Int64,System.Int64)">
            <summary>
            获取用户的备注名称
            </summary>
            <param name="userId">用户Id</param>
            <param name="followedUserId">被关注用户Id</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.IFollowRepository.GetFollowedUserIds(System.Int64,System.Nullable{System.Int64},System.Nullable{Tunynet.Common.Follow_SortBy},System.Int32)">
            <summary>
            获取关注用户Id列表
            </summary>
            <param name="userId">用户Id</param>
            <param name="groupId"><para>用户分组Id</para><remarks>groupId为0时获取未分组的用户，为null时获取所有用户</remarks></param>
            <param name="sortBy">排序条件</param>
            <param name="pageIndex">页码</param>
            <remarks>
            groupId为null 则排序sortBy才生效
            </remarks>
        </member>
        <member name="M:Tunynet.Common.Repositories.IFollowRepository.GetTopFollowedUserIds(System.Int64,System.Int32,System.Nullable{System.Int64},System.Nullable{Tunynet.Common.Follow_SortBy})">
            <summary>
            获取前N条关注用户Id列表
            </summary>
            <param name="userId">用户Id</param>
            <param name="topNumber">需要获取的记录数</param>
            <param name="groupId">分组Id</param>
            <param name="sortBy">排序方式</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.IFollowRepository.GetPortionFollowedUserIds(System.Int64,System.Nullable{System.Int64},System.Nullable{Tunynet.Common.Follow_SortBy})">
            <summary>
            获取部分关注用户Id列表
            </summary>
            <remarks>获取全部关注用户的UserId</remarks>
            <param name="userId">用户Id</param>
            <param name="groupId">分组Id</param>
            <param name="sortBy">排序方式</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.IFollowRepository.GetTopFollowIds(System.Int64,System.Int32,System.Nullable{System.Int64},System.Nullable{Tunynet.Common.Follow_SortBy})">
            <summary>
            获取前N条关注Id列表
            </summary>
            <param name="userId">用户Id</param>
            <param name="topNumber">需要获取的记录数</param>
            <param name="groupId">分组Id</param>
            <param name="sortBy">排序方式</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.IFollowRepository.GetFollowIds(System.Int64,System.Nullable{System.Int64},System.Nullable{Tunynet.Common.Follow_SortBy})">
            <summary>
            获取关注Id列表
            </summary>
            <param name="userId">用户Id</param>
            <param name="groupId">分组Id</param>
            <param name="sortBy">排序方式</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.IFollowRepository.GetFollowIdsForAt(System.String,System.Int64,System.Nullable{Tunynet.Common.Follow_SortBy})">
            <summary>
            查询关注的用户Id（用于@用户）
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.IFollowRepository.GetFollows(System.Int64,System.Nullable{System.Int64},System.Nullable{Tunynet.Common.Follow_SortBy},System.Int32)">
             <summary>
             获取关注Id分页列表
             </summary>
             <param name="userId">用户Id</param>
             <param name="groupId">用户分组Id</param>
             <param name="sortBy">排序条件</param>
             <param name="pageIndex">页码</param>
            <remarks> 
            默认isQuietly为 false (groupId isMutual isMutual)三者参数为互斥关系，
            当isQuietly为false并且groupId为null 则排序sortBy才生效
             </remarks>
        </member>
        <!-- 对于成员“M:Tunynet.Common.Repositories.IFollowRepository.GetTopFollowedUserIdsFromUser(System.Int64,System.Int64,System.Int32,System.Int32)”忽略有格式错误的 XML 注释 -->
        <member name="M:Tunynet.Common.Repositories.IFollowRepository.GetTopFollowedUserIdsOfFollowers(System.Int64,System.Int64,System.Int32,System.Int32)">
             <summary>
             获取用户粉丝的关注
             </summary>
             <param name="userId">用户Id</param>
             <param name="visitorId">访问者用户Id（用来排除当前访问者与访问者的关注用户）</param>
            <param name="pageSize"></param>
            <param name="pageIndex"></param>
             <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.IFollowRepository.GetTogetherFollowedUserIds(System.Int64,System.Int64,System.Int32,System.Int32)">
            <summary>
            获取用户与被浏览用户的共同关注用户Id列表
            </summary>
            <param name="userId">用户Id</param>
            <param name="toUserId">被判定用户Id</param>
            <param name="topNumber">获取的数据条数</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.IFollowRepository.GetFollowerUserIds(System.Int64,Tunynet.Common.Follow_SortBy,System.Int32)">
            <summary>
            获取粉丝Id列表
            </summary>
            <param name="userId">用户Id</param>
            <param name="sortBy">查询条件</param>
            <param name="pageIndex">页码</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.IFollowRepository.GetRecentFollowerUserIds(System.DateTime)">
            <summary>
            获取某个时间之后新增的粉丝Id列表，用于全文检索的定时任务
            </summary>
            <param name="lastStart">上次任务的开始时间</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.IFollowRepository.GetTopFollowerUserIds(System.Int64,Tunynet.Common.Follow_SortBy,System.Int32)">
            <summary>
            获取粉丝列表
            </summary>
            <param name="userId">用户Id</param>
            <param name="sortBy">查询条件</param>
            <param name="topNumber">要获取的数据记录数</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.IFollowRepository.GetFollowedUsers(System.Collections.Generic.IEnumerable{System.Int64})">
             <summary>
             批量获取关注用户列表，用于全文检索
             </summary>
             <param name="userIds">用户Id列表</param>
            <remarks>默认isQuietly为0，即不查询悄悄关注的</remarks>
        </member>
        <member name="M:Tunynet.Common.Repositories.FollowRepository.Update(Tunynet.Common.FollowEntity)">
            <summary>
            把实体follow更新到数据库
            </summary>
            <param name="follow"></param>
        </member>
        <member name="M:Tunynet.Common.Repositories.FollowRepository.Follow(System.Int64,System.Int64,System.Boolean)">
            <summary>
            关注用户
            </summary>
            <param name="userId">用户Id</param>
            <param name="followedUserId">被关注用户Id</param>
            <param name="isQuietly">是否悄悄关注</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.FollowRepository.IsFollowed(System.Int64,System.Int64)">
            <summary>
            判断是否关注了被判定用户
            </summary>
            <param name="userId">用户Id</param>
            <param name="toUserId">被判定用户Id</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.FollowRepository.IsMutualFollowed(System.Int64,System.Int64)">
            <summary>
            是否为双向关注
            </summary>
            <param name="userId">用户Id</param>
            <param name="toUserId">被判定用户Id</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.FollowRepository.CancelFollow(System.Int64,System.Int64)">
            <summary>
            取消关注
            </summary>
            <param name="userId">用户Id</param>
            <param name="followedUserId">被关注用户Id</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.FollowRepository.GetNewFollowerCount(System.Int64)">
            <summary>
            获取用户的最新粉丝数
            </summary>
            <param name="userId">用户Id</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.FollowRepository.ClearNewFollowerCount(System.Int64)">
             <summary>
             清除最新用户统计
             </summary>
            <param name="userId">用户Id</param>
             <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.FollowRepository.RemoveFollower(System.Int64,System.Int64)">
            <summary>
            移除用户的粉丝
            </summary>
            <param name="userId">用户Id</param>
            <param name="followerUserId">粉丝的用户Id</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.FollowRepository.Get(System.Int64,System.Int64)">
            <summary>
            获取关注用户实体
            </summary>
            <param name="userId">用户Id</param>
            <param name="followedUserId">被操作用户Id</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.FollowRepository.GetNoteName(System.Int64,System.Int64)">
            <summary>
            获取用户的备注名称
            </summary>
            <param name="userId">用户Id</param>
            <param name="followedUserId">被关注用户Id</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.FollowRepository.GetTopFollowedUserIds(System.Int64,System.Int32,System.Nullable{System.Int64},System.Nullable{Tunynet.Common.Follow_SortBy})">
            <summary>
            获取前N条关注用户Id列表
            </summary>
            <param name="userId">用户Id</param>
            <param name="topNumber">需要获取的记录数</param>
            <param name="groupId">分组Id</param>
            <param name="sortBy">排序方式</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.FollowRepository.GetPortionFollowedUserIds(System.Int64,System.Nullable{System.Int64},System.Nullable{Tunynet.Common.Follow_SortBy})">
            <summary>
            获取关注用户Id列表
            </summary>
            <param name="userId">用户Id</param>
            <param name="groupId">分组Id</param>
            <param name="sortBy">排序方式</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.FollowRepository.GetFollowedUserIds(System.Int64,System.Nullable{System.Int64},System.Nullable{Tunynet.Common.Follow_SortBy},System.Int32)">
             <summary>
             获取关注用户Id列表
             </summary>
             <param name="userId">用户Id</param>
             <param name="groupId">用户分组Id</param>
             <param name="sortBy">排序条件</param>
             <param name="pageIndex">页码</param>
            <remarks> 默认isQuietly为 false (groupId isMutual isMutual)三者参数为互斥关系，
             当isQuietly为false并且groupId为null 则排序sortBy才生效</remarks>
        </member>
        <member name="M:Tunynet.Common.Repositories.FollowRepository.GetFollowedUsers(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            批量获取关注用户列表，用于全文检索
            </summary>
            <param name="userIds">用户Id列表</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.FollowRepository.GetTopFollowIds(System.Int64,System.Int32,System.Nullable{System.Int64},System.Nullable{Tunynet.Common.Follow_SortBy})">
            <summary>
            获取前N条关注Id列表
            </summary>
            <param name="userId">用户Id</param>
            <param name="topNumber">需要获取的记录数</param>
            <param name="groupId">分组Id</param>
            <param name="sortBy">排序方式</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.FollowRepository.GetFollowIds(System.Int64,System.Nullable{System.Int64},System.Nullable{Tunynet.Common.Follow_SortBy})">
            <summary>
            获取关注Id列表
            </summary>
            <param name="userId">用户Id</param>
            <param name="groupId">分组Id</param>
            <param name="sortBy">排序方式</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.FollowRepository.GetFollowIdsForAt(System.String,System.Int64,System.Nullable{Tunynet.Common.Follow_SortBy})">
            <summary>
            查询关注的用户列表（用于@用户）
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.FollowRepository.GetFollows(System.Int64,System.Nullable{System.Int64},System.Nullable{Tunynet.Common.Follow_SortBy},System.Int32)">
             <summary>
             获取关注Id分页列表
             </summary>
             <param name="userId">用户Id</param>
             <param name="groupId">用户分组Id</param>
             <param name="sortBy">排序条件</param>
             <param name="pageIndex">页码</param>
            <remarks> 
            默认isQuietly为 false (groupId isMutual isMutual)三者参数为互斥关系，
            当isQuietly为false并且groupId为null 则排序sortBy才生效
             </remarks>
        </member>
        <member name="M:Tunynet.Common.Repositories.FollowRepository.GetTopFollowedUserIdsFromUser(System.Int64,System.Int64,System.Int32,System.Int32)">
            <summary>
            根据被浏览用户获取我的关注用户中关注他的用户
            </summary>
            <param name="userId">用户Id</param>
            <param name="toUserId">被浏览用户Id</param>
            <param name="topNumber">要获取的数据记录数</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.FollowRepository.GetTopFollowedUserIdsOfFollowers(System.Int64,System.Int64,System.Int32,System.Int32)">
            <summary>
            获取用户粉丝的关注
            </summary>
            <param name="userId">用户Id</param>
            <param name="visitorId">访问者用户Id（用来排除当前访问者与访问者的关注用户）</param>
            <param name="pageSize"></param>
            <param name="pageIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.FollowRepository.GetTogetherFollowedUserIds(System.Int64,System.Int64,System.Int32,System.Int32)">
            <summary>
            获取用户与被浏览用户的共同关注用户Id列表
            </summary>
            <param name="userId">用户Id</param>
            <param name="toUserId">被浏览用户Id</param>
            <param name="pageSize"></param>
            <param name="pageIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.FollowRepository.GetFollowerUserIds(System.Int64,Tunynet.Common.Follow_SortBy,System.Int32)">
            <summary>
            获取粉丝Id列表
            </summary>
            <param name="userId">用户Id</param>
            <param name="sortBy">查询条件</param>
            <param name="pageIndex">页码</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.FollowRepository.GetRecentFollowerUserIds(System.DateTime)">
            <summary>
            获取某个时间之后新增的粉丝Id列表，用于全文检索的定时任务
            </summary>
            <param name="lastStart">上次任务的开始时间</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.FollowRepository.GetTopFollowerUserIds(System.Int64,Tunynet.Common.Follow_SortBy,System.Int32)">
            <summary>
            获取粉丝列表
            </summary>
            <param name="userId">用户Id</param>
            <param name="sortBy">查询条件</param>
            <param name="topNumber">要获取的数据记录数</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.FollowRepository.CleanByUser(System.Int64)">
             <summary>
            清除用户所用的关注
             </summary>
             <param name="userId">用户Id</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.FollowRepository.UpdateLastContactDate(System.Int64,System.Collections.Generic.List{System.Int64})">
            <summary>
            批量更新最后联系时间
            </summary>
            <param name="userId"></param>
            <param name="FollowedUserIds"></param>
        </member>
        <member name="M:Tunynet.Common.Repositories.FollowRepository.GenerateSql_FollowedIds(System.Int64,System.Int64)">
            <summary>
            获取用户粉丝的关注的SQL
            </summary>
            <param name="userId">用户Id</param>
            <param name="visitorId">访问者用户Id（用来排除当前访问者与访问者的关注用户）</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.FollowRepository.GetFollowerUserIdsFromCache(System.Int64,Tunynet.Common.Follow_SortBy,PetaPoco.Sql)">
             <summary>
            从缓存中获取粉丝列表
             </summary>
             <param name="userId">用户Id</param>
             <param name="sortBy">排序类型</param>
             <param name="sql">sql语句</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.FollowRepository.GenerateSql_FollowerIds(System.Int64,Tunynet.Common.Follow_SortBy)">
            <summary>
               获取粉丝列表的SQL
            </summary>
            <param name="userId">用户Id</param>
            <param name="sortBy">排序类型</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.FollowRepository.GetCacheKey_GetTopFollowedUserIds(System.Int64,System.Nullable{System.Int64},System.Nullable{Tunynet.Common.Follow_SortBy})">
            <summary>
            获取关注用户Id的列表缓存CacheKey
            </summary>
            <param name="userId">用户Id</param>
            <param name="groupId">用户分组Id</param>
            <param name="sortBy">排序方式</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.FollowRepository.GetCacheKey_GetTopFollowIds(System.Int64,System.Nullable{System.Int64},System.Nullable{Tunynet.Common.Follow_SortBy})">
            <summary>
            获取关注用Id的列表缓存CacheKey
            </summary>
            <param name="userId">用户Id</param>
            <param name="groupId">用户分组Id</param>
            <param name="sortBy">排序方式</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.FollowRepository.GetCacheKey_GetFollowIdsForAt(System.String,System.Int64,System.Nullable{Tunynet.Common.Follow_SortBy})">
            <summary>
            获取关注用户Id的列表缓存CacheKey(用于@)
            </summary>
            <param name="userId">用户Id</param>
            <param name="groupId">用户分组Id</param>
            <param name="sortBy">排序方式</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.FollowRepository.GetCacheKey_FollowUserIds(System.Int64)">
            <summary>
            获取关注的CacheKey
            </summary>
        </member>
        <member name="M:Tunynet.Common.Repositories.FollowRepository.GetCacheKey_FollowerCount(System.Int64)">
            <summary>
            获取最新粉丝数的CacheKey
            <param name="userId">用户Id</param>
            </summary>
        </member>
        <member name="M:Tunynet.Common.Repositories.FollowRepository.GetCacheKey_GetTopFollowedIdsFromUser(System.Int64,System.Int64)">
            <summary>
            获取关注列表的我关注的也关注缓存
            </summary>
            <param name="userId">用户Id</param>
            <param name="toUserId">被浏览用户Id</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.FollowRepository.GetCacheKey_Follow(System.Int64,System.Int64)">
            <summary>
            获取关注实体的CacheKey
            </summary>
            <param name="userId">s\用户Id</param>
            <param name="toUserId">被关注用户Id</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.FollowRepository.GetCacheKey_GetTogetherFollowedIds(System.Int64,System.Int64)">
            <summary>
            获取共同关注列表缓存
            </summary>
            <param name="userId">用户Id</param>
            <param name="toUserId">被浏览用户Id</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.FollowRepository.GetCacheKey_GetTopFollowedIdsOfFollowers(System.Int64)">
            <summary>
            获取粉丝的关注的列表缓存CacheKey
            </summary>
            <param name="userId">用户Id</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.FollowRepository.GetCacheKey_IsMutualFollowed(System.Int64)">
            <summary>
            获取是否双向关注的缓存CacheKey
            </summary>
            <param name="userId">用户Id</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.FollowRepository.GetCacheKey_GetFollowedIds(System.Int64,System.Nullable{System.Int64},System.Nullable{Tunynet.Common.Follow_SortBy})">
            <summary>
            获取关注的列表缓存
            </summary>
            <param name="userId">用户Id</param>
            <param name="groupId">分组Id</param>
            <param name="sortBy">排序类型</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.FollowRepository.GetCacheKey_GetFollowedUserIds(System.Int64,System.Nullable{System.Int64},System.Nullable{Tunynet.Common.Follow_SortBy})">
            <summary>
            获取关注用户的列表缓存
            </summary>
            <param name="userId">用户Id</param>
            <param name="groupId">分组Id</param>
            <param name="sortBy">排序类型</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.FollowRepository.GetCacheKey_GetFollowerIds(System.Int64,Tunynet.Common.Follow_SortBy)">
            <summary>
            获取粉丝Id列表缓存
            </summary>
            <param name="userId">用户Id</param>
            <param name="sortBy">排序类型</param>
        </member>
        <member name="P:Tunynet.Common.Repositories.FollowRepository.CacheablePageCount">
            <summary>
            可缓存的列表缓存页数
            </summary>
        </member>
        <member name="T:Tunynet.Common.UserExtensionByFollow">
            <summary>
            为IUser扩展与关注用户相关的功能
            </summary>
        </member>
        <member name="M:Tunynet.Common.UserExtensionByFollow.IsFollowed(Tunynet.Common.IUser,System.Int64)">
            <summary>
            判断用户是否关注了某个用户
            </summary>
            <param name="user"><see cref="T:Tunynet.Common.IUser"/></param>
            <param name="toUserId">待检测用户Id</param>
            <returns></returns>
        </member>
        <member name="T:Tunynet.Common.OnlineUser">
            <summary>
            在线用户实体类
            </summary>
        </member>
        <member name="M:Tunynet.Common.OnlineUser.New(Tunynet.Common.IUser)">
            <summary>
            依据登录用户创建OnlineUser
            </summary>
            <param name="user"></param>
        </member>
        <member name="M:Tunynet.Common.OnlineUser.NewAnonymous(System.String)">
            <summary>
            依据匿名登录用户创建OnlineUser
            </summary>
            <param name="userName"></param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.OnlineUser.New">
            <summary>
            新建实体时使用
            </summary>
        </member>
        <member name="P:Tunynet.Common.OnlineUser.Id">
             <summary>
            Id
             </summary>
        </member>
        <member name="P:Tunynet.Common.OnlineUser.UserId">
             <summary>
            用户Id
             </summary>
        </member>
        <member name="P:Tunynet.Common.OnlineUser.UserName">
             <summary>
            用户名
             </summary>
        </member>
        <member name="P:Tunynet.Common.OnlineUser.DisplayName">
             <summary>
            对外显示的名称
             </summary>
        </member>
        <member name="P:Tunynet.Common.OnlineUser.LastActivityTime">
             <summary>
            上次活动时间
             </summary>
        </member>
        <member name="P:Tunynet.Common.OnlineUser.LastAction">
             <summary>
            上次操作
             </summary>
        </member>
        <member name="P:Tunynet.Common.OnlineUser.Ip">
             <summary>
            IP
             </summary>
        </member>
        <member name="P:Tunynet.Common.OnlineUser.DateCreated">
             <summary>
            创建时间
             </summary>
        </member>
        <member name="T:Tunynet.Common.OnlineUserService">
            <summary>
            在线用户业务逻辑类
            </summary>
        </member>
        <member name="M:Tunynet.Common.OnlineUserService.#ctor">
            <summary>
            构造器
            </summary>
        </member>
        <member name="M:Tunynet.Common.OnlineUserService.#ctor(Tunynet.Common.Repositories.IOnlineUserRepository,Tunynet.Common.Repositories.IOnlineUserStatisticRepository)">
            <summary>
            构造器
            </summary>
            <param name="onlineUserRepository"></param>
            <param name="onlineUserStatisticRepository"></param>
        </member>
        <member name="M:Tunynet.Common.OnlineUserService.TrackUser(Tunynet.Common.IUser)">
            <summary>
            跟踪登录用户
            </summary>
            <param name="user"></param>
        </member>
        <member name="M:Tunynet.Common.OnlineUserService.TrackAnonymous(System.String)">
            <summary>
            跟踪匿名用户
            </summary>
            <param name="userName"></param>
        </member>
        <member name="M:Tunynet.Common.OnlineUserService.Offline(System.String)">
            <summary>
            用户离线（注销时调用）
            </summary>
            <param name="userName"></param>
        </member>
        <member name="M:Tunynet.Common.OnlineUserService.GetLoggedUsers">
            <summary>
            获取在线登录用户列表
            </summary>
            <remarks>key=UserName,value=OnlineUser</remarks>
        </member>
        <member name="M:Tunynet.Common.OnlineUserService.IsOnline(System.String)">
            <summary>
            判断用户是否在线
            </summary>
            <param name="userName"></param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.OnlineUserService.GetAnonymousUsers">
            <summary>
            获取匿名登录用户列表
            </summary>
            <remarks>key=UserName,value=OnlineUser</remarks>
        </member>
        <member name="M:Tunynet.Common.OnlineUserService.GetLoggedUserCount">
            <summary>
            获取在线用户用户数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.OnlineUserService.GetAnonymousCount">
            <summary>
            获取在线匿名用户数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.OnlineUserService.Refresh">
            <summary>
            刷新数据库
            </summary>
            <remarks>
            通过Task调用
            </remarks>
        </member>
        <member name="M:Tunynet.Common.OnlineUserService.GetHighest">
            <summary>
            获取历史最高在线记录
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.OnlineUserService.GetOnlineUserStatistics(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            获取在线用户统计记录
            </summary>
            <param name="startDate">开始时间</param>
            <param name="endDate">截止时间</param>
            <returns></returns>
        </member>
        <member name="T:Tunynet.Common.OnlineUserStatistic">
            <summary>
            在线用户实体类
            </summary>
        </member>
        <member name="M:Tunynet.Common.OnlineUserStatistic.New">
            <summary>
            新建实体时使用
            </summary>
        </member>
        <member name="P:Tunynet.Common.OnlineUserStatistic.Id">
             <summary>
            Id
             </summary>
        </member>
        <member name="P:Tunynet.Common.OnlineUserStatistic.LoggedUserCount">
             <summary>
            在线登录用户数
             </summary>
        </member>
        <member name="P:Tunynet.Common.OnlineUserStatistic.AnonymousCount">
             <summary>
            在线匿名用户数
             </summary>
        </member>
        <member name="P:Tunynet.Common.OnlineUserStatistic.UserCount">
             <summary>
            在线用户数
             </summary>
        </member>
        <member name="P:Tunynet.Common.OnlineUserStatistic.DateCreated">
             <summary>
            创建时间
             </summary>
        </member>
        <member name="M:Tunynet.Common.Repositories.IOnlineUserRepository.Offline(System.String)">
            <summary>
            用户离线（注销时调用）
            </summary>
            <param name="userName"></param>
        </member>
        <member name="M:Tunynet.Common.Repositories.IOnlineUserRepository.GetLoggedUsers">
            <summary>
            获取在线登录用户列表
            </summary>
            <remarks>key=UserName,value=OnlineUser</remarks>
        </member>
        <member name="M:Tunynet.Common.Repositories.IOnlineUserRepository.GetAnonymousUsers">
            <summary>
            获取匿名登录用户列表
            </summary>
            <remarks>key=UserName,value=OnlineUser</remarks>
        </member>
        <member name="M:Tunynet.Common.Repositories.IOnlineUserRepository.Refresh(System.Collections.Concurrent.ConcurrentDictionary{System.String,Tunynet.Common.OnlineUser})">
            <summary>
            刷新数据库
            </summary>
            <remarks>
            通过Task调用
            </remarks>
        </member>
        <member name="M:Tunynet.Common.Repositories.IOnlineUserStatisticRepository.GetHighest">
            <summary>
            获取历史最高在线记录
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.IOnlineUserStatisticRepository.GetOnlineUserStatistics(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            获取在线用户统计记录
            </summary>
            <param name="startDate">开始时间</param>
            <param name="endDate">截止时间</param>
            <returns></returns>
        </member>
        <member name="T:Tunynet.Common.Repositories.OnlineUserRepository">
            <summary>
            在线用户Repository
            </summary>
        </member>
        <member name="M:Tunynet.Common.Repositories.OnlineUserRepository.Offline(System.String)">
            <summary>
            用户离线（注销时调用）
            </summary>
            <param name="userName"></param>
        </member>
        <member name="M:Tunynet.Common.Repositories.OnlineUserRepository.GetLoggedUsers">
            <summary>
            获取在线登录用户列表
            </summary>
            <remarks>key=UserName,value=OnlineUser</remarks>
        </member>
        <member name="M:Tunynet.Common.Repositories.OnlineUserRepository.GetAnonymousUsers">
            <summary>
            获取匿名登录用户列表
            </summary>
            <remarks>key=UserName,value=OnlineUser</remarks>
        </member>
        <member name="M:Tunynet.Common.Repositories.OnlineUserRepository.Refresh(System.Collections.Concurrent.ConcurrentDictionary{System.String,Tunynet.Common.OnlineUser})">
            <summary>
            刷新数据库
            </summary>
            <remarks>
            通过Task调用
            </remarks>
        </member>
        <member name="M:Tunynet.Common.Repositories.OnlineUserRepository.GetCacheKey_AnonymousUsers">
            <summary>
            获取在线匿名用户CacheKey
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.OnlineUserRepository.GetCacheKey_LoggedUsers">
            <summary>
            获取在线登录用户CacheKey
            </summary>
            <returns></returns>
        </member>
        <member name="T:Tunynet.Common.Repositories.OnlineUserStatisticRepository">
            <summary>
            在线用户统计数据访问
            </summary>
        </member>
        <member name="M:Tunynet.Common.Repositories.OnlineUserStatisticRepository.GetHighest">
            <summary>
            获取历史最高在线记录
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.OnlineUserStatisticRepository.GetOnlineUserStatistics(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            获取在线用户统计记录
            </summary>
            <param name="startDate">开始时间</param>
            <param name="endDate">截止时间</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.OnlineUserStatisticRepository.GetCacheKey_Highest">
            <summary>
            获取历史最高在线记录CachKey
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.OnlineUserStatisticRepository.GetCacheKey_OnlineUserStatistics(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            获取在线用户统计记录CacheKey
            </summary>
            <param name="startDate"></param>
            <param name="endDate"></param>
            <returns></returns>
        </member>
        <member name="T:Tunynet.Common.Tasks.OnlineUserTask">
            <summary>
            在线用户定期执行任务
            </summary>
            <remarks>
            分布式部署时，要求每个web服务器都要部署，不允许集中部署
            建议每5分钟执行一次
            </remarks>
        </member>
        <member name="M:Tunynet.Common.Tasks.OnlineUserTask.Execute(Tunynet.Tasks.TaskDetail)">
            <summary>
            任务执行的内容
            </summary>
            <param name="taskDetail">任务配置状态信息</param>
        </member>
        <member name="T:Tunynet.Common.OwnerDataGetterFactory">
            <summary>
            评论URL获取器工厂
            </summary>
        </member>
        <member name="M:Tunynet.Common.OwnerDataGetterFactory.Get(System.String)">
            <summary>
            依据tenantTypeId获取OwnerDatalGetterFactory
            </summary>
            <returns></returns>
        </member>
        <member name="T:Tunynet.Common.IOwnerDataGetter">
            <summary>
            OwnerData数据访问接口
            </summary>
        </member>
        <member name="M:Tunynet.Common.IOwnerDataGetter.GetDataUrl(System.String,System.Nullable{System.Int64})">
            <summary>
            链接数据地址
            </summary>
            <param name="ownerId"></param>
            <returns></returns>
        </member>
        <member name="P:Tunynet.Common.IOwnerDataGetter.ApplicationId">
            <summary>
            应用Id
            </summary>
        </member>
        <member name="P:Tunynet.Common.IOwnerDataGetter.DataKey">
            <summary>
            DataKey
            </summary>
        </member>
        <member name="P:Tunynet.Common.IOwnerDataGetter.DataName">
            <summary>
            要显示的名称
            </summary>
        </member>
        <member name="T:Tunynet.Common.Configuration.PointSettings">
            <summary>
            积分设置
            </summary>
        </member>
        <member name="M:Tunynet.Common.Configuration.PointSettings.CalculateIntegratedPoint(System.Int32,System.Int32)">
            <summary>
            计算用户综合积分
            </summary>
            <param name="experiencePoints">经验</param>
            <param name="reputationPoints">威望</param>
            <returns>计算后的综合积分</returns>
        </member>
        <member name="P:Tunynet.Common.Configuration.PointSettings.ExperiencePointsCoefficient">
            <summary>
            经验系数
            </summary>
        </member>
        <member name="P:Tunynet.Common.Configuration.PointSettings.ReputationPointsCoefficient">
            <summary>
            威望系数
            </summary>
        </member>
        <member name="P:Tunynet.Common.Configuration.PointSettings.TransactionTax">
            <summary>
            交易税（0-100）
            </summary>
        </member>
        <member name="P:Tunynet.Common.Configuration.PointSettings.UserIntegratedPointRuleText">
            <summary>
            显示用户综合积分规则文字描述
            </summary>
            <example>经验*1 + 威望*2</example>
        </member>
        <member name="T:Tunynet.Common.PointCategory">
            <summary>
            积分类型实体类
            </summary>
        </member>
        <member name="M:Tunynet.Common.PointCategory.New">
            <summary>
            新建实体时使用
            </summary>
        </member>
        <member name="P:Tunynet.Common.PointCategory.CategoryKey">
             <summary>
            积分类型标识
             </summary>
        </member>
        <member name="P:Tunynet.Common.PointCategory.CategoryName">
             <summary>
            类型名称
             </summary>
        </member>
        <member name="P:Tunynet.Common.PointCategory.Unit">
             <summary>
            单位名称
             </summary>
        </member>
        <member name="P:Tunynet.Common.PointCategory.QuotaPerDay">
             <summary>
            每人每日该类限额（0表示无限制）
             </summary>
        </member>
        <member name="P:Tunynet.Common.PointCategory.Description">
             <summary>
            描述
             </summary>
        </member>
        <member name="P:Tunynet.Common.PointCategory.DisplayOrder">
             <summary>
            排序序号
             </summary>
        </member>
        <member name="T:Tunynet.Common.PointCategoryKeys">
            <summary>
            积分类型配置类（便于使用PointCategoryKey）
            </summary>
        </member>
        <member name="M:Tunynet.Common.PointCategoryKeys.Instance">
            <summary>
            获取该类的单例
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.PointCategoryKeys.ExperiencePoints">
            <summary>
            经验
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.PointCategoryKeys.ReputationPoints">
            <summary>
            威望
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.PointCategoryKeys.TradePoints">
            <summary>
            金币
            </summary>
            <returns></returns>
        </member>
        <member name="T:Tunynet.Common.PointItem">
            <summary>
            积分项目实体类
            </summary>
        </member>
        <member name="M:Tunynet.Common.PointItem.New">
            <summary>
            新建实体时使用
            </summary>
        </member>
        <member name="P:Tunynet.Common.PointItem.ItemKey">
             <summary>
            积分项目标识
             </summary>
        </member>
        <member name="P:Tunynet.Common.PointItem.ApplicationId">
             <summary>
            应用程序Id
             </summary>
        </member>
        <member name="P:Tunynet.Common.PointItem.ItemName">
             <summary>
            项目名称
             </summary>
        </member>
        <member name="P:Tunynet.Common.PointItem.DisplayOrder">
             <summary>
            排序序号
             </summary>
        </member>
        <member name="P:Tunynet.Common.PointItem.ExperiencePoints">
             <summary>
            经验积分值
             </summary>
        </member>
        <member name="P:Tunynet.Common.PointItem.ReputationPoints">
             <summary>
            威望积分值
             </summary>
        </member>
        <member name="P:Tunynet.Common.PointItem.TradePoints">
             <summary>
            交易积分值
             </summary>
        </member>
        <member name="P:Tunynet.Common.PointItem.TradePoints2">
             <summary>
            交易积分值2
             </summary>
        </member>
        <member name="P:Tunynet.Common.PointItem.TradePoints3">
             <summary>
            交易积分值3
             </summary>
        </member>
        <member name="P:Tunynet.Common.PointItem.TradePoints4">
             <summary>
            交易积分值4
             </summary>
        </member>
        <member name="P:Tunynet.Common.PointItem.Description">
             <summary>
            描述
             </summary>
        </member>
        <member name="P:Tunynet.Common.PointItem.NeedPointMessage">
            <summary>
            需要提示
            </summary>
        </member>
        <member name="T:Tunynet.Common.PointItemKeys">
            <summary>
            积分类型配置类（便于使用PointItemKey）
            </summary>
            <remarks>
            各Application应该对该配置类的方法进行扩展
            </remarks>
        </member>
        <member name="M:Tunynet.Common.PointItemKeys.Instance">
            <summary>
            获取该类的单例
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.PointItemKeys.Register">
            <summary>
            注册
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.PointItemKeys.FirstUploadAvatar">
            <summary>
            首次上传头像
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.PointItemKeys.InviteUserRegister">
            <summary>
            邀请用户注册
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.PointItemKeys.FreeModeratedUser">
            <summary>
            被邀请用户解管制
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.PointItemKeys.DeleteInvitedUser">
            <summary>
            被邀请用户删除
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.PointItemKeys.FollowUser">
            <summary>
            关注用户
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.PointItemKeys.CancelFollowUser">
            <summary>
            取消关注用户
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.PointItemKeys.RecommendUser">
            <summary>
            用户被推荐
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.PointItemKeys.RecommendContent">
            <summary>
            内容被推荐
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.PointItemKeys.EssentialContent">
            <summary>
            内容被加精
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.PointItemKeys.StickyContent">
            <summary>
            内容被置顶
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.PointItemKeys.CreateComment">
            <summary>
            发表评论
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.PointItemKeys.DeleteComment">
            <summary>
            删除评论
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.PointItemKeys.CreateEvaluation">
            <summary>
            发表评价
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.PointItemKeys.CancelEvaluation">
            <summary>
            取消评价
            </summary>
            <returns></returns>
        </member>
        <member name="T:Tunynet.Common.PointRecord">
            <summary>
            积分纪录实体类
            </summary>
        </member>
        <member name="M:Tunynet.Common.PointRecord.#ctor">
            <summary>
            无参构造器
            </summary>
        </member>
        <member name="M:Tunynet.Common.PointRecord.#ctor(System.Int64,Tunynet.Common.PointItem,System.String)">
            <summary>
            带参构造器
            </summary>
            <param name="userId"></param>
            <param name="pointItem"></param>
            <param name="description"></param>
        </member>
        <member name="M:Tunynet.Common.PointRecord.New">
            <summary>
            新建实体时使用
            </summary>
        </member>
        <member name="P:Tunynet.Common.PointRecord.RecordId">
             <summary>
            RecordId
             </summary>
        </member>
        <member name="P:Tunynet.Common.PointRecord.UserId">
             <summary>
            用户Id
             </summary>
        </member>
        <member name="P:Tunynet.Common.PointRecord.PointItemName">
             <summary>
            积分项目名称
             </summary>
        </member>
        <member name="P:Tunynet.Common.PointRecord.Description">
             <summary>
            积分描述
             </summary>
        </member>
        <member name="P:Tunynet.Common.PointRecord.ExperiencePoints">
             <summary>
            经验积分值
             </summary>
        </member>
        <member name="P:Tunynet.Common.PointRecord.ReputationPoints">
             <summary>
            威望积分值
             </summary>
        </member>
        <member name="P:Tunynet.Common.PointRecord.TradePoints">
             <summary>
            交易积分值
             </summary>
        </member>
        <member name="P:Tunynet.Common.PointRecord.TradePoints2">
             <summary>
            交易积分值2
             </summary>
        </member>
        <member name="P:Tunynet.Common.PointRecord.TradePoints3">
             <summary>
            交易积分值3
             </summary>
        </member>
        <member name="P:Tunynet.Common.PointRecord.TradePoints4">
             <summary>
            交易积分值4
             </summary>
        </member>
        <member name="P:Tunynet.Common.PointRecord.IsIncome">
             <summary>
            是否是收入
             </summary>
        </member>
        <member name="P:Tunynet.Common.PointRecord.DateCreated">
             <summary>
            创建时间
             </summary>
        </member>
        <member name="T:Tunynet.Common.PointService">
            <summary>
            积分业务逻辑类
            </summary>
        </member>
        <member name="M:Tunynet.Common.PointService.#ctor">
            <summary>
            构造器
            </summary>
        </member>
        <member name="M:Tunynet.Common.PointService.#ctor(Tunynet.Repositories.IRepository{Tunynet.Common.PointCategory},Tunynet.Common.Repositories.IPointItemRepository,Tunynet.Common.Repositories.IPointRecordRepository,Tunynet.Common.Repositories.IPointStatisticRepository)">
            <summary>
            构造器
            </summary>
            <param name="pointCategoryRepository">积分分类仓储</param>
            <param name="pointItemRepository"></param>
            <param name="pointRecordRepository"></param>
            <param name="pointStatisticRepository"></param>
        </member>
        <member name="M:Tunynet.Common.PointService.GenerateByRole(System.Int64,System.String,System.String,System.Boolean)">
            <summary>
            依据规则增减积分
            </summary>
            <param name="userId">增减积分的UserId</param>
            <param name="pointItemKey">积分项目标识</param>
            <param name="description">积分记录描述</param>
            <param name="needPointMessage">是否需要积分提醒</param>
        </member>
        <member name="M:Tunynet.Common.PointService.Trade(System.Int64,System.Int64,System.Int32,System.String,System.Boolean)">
            <summary>
            积分交易
            </summary>
            <param name="payerUserId">支付积分人UserId</param>
            <param name="payeeUserId">接收积分人UserId</param>
            <param name="points">交易积分额</param>
            <param name="description">交易描述</param>
            <param name="isImmediate">是否即时交易</param>
            <param name="needPointMessage">是否需要积分提醒</param>
        </member>
        <member name="M:Tunynet.Common.PointService.TradeToSystem(System.Int64,System.Int32,System.String,System.Boolean)">
            <summary>
            用户和系统进行积分交易（例如：用户购买邀请码，礼品兑换）
            </summary>
            <param name="payerUserId">支付积分人UserId</param>
            <param name="points">交易积分额</param>
            <param name="description">交易描述</param>
            <param name="isImmediate">是否即时交易</param>
        </member>
        <member name="M:Tunynet.Common.PointService.Reward(System.Int64,System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            奖惩用户
            </summary>
            <param name="userId">被奖惩用户</param>
            <param name="experiencePoints">经验</param>
            <param name="reputationPoints">威望</param>
            <param name="tradePoints">金币</param>
            <param name="description">奖惩理由</param>
        </member>
        <member name="M:Tunynet.Common.PointService.CreateRecord(System.Int64,System.String,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            创建积分记录
            </summary>
            <param name="record"></param>
        </member>
        <member name="M:Tunynet.Common.PointService.CleanPointRecords(System.Int32,System.Boolean)">
            <summary>
             清理积分记录
            </summary>
            <param name="beforeDays">清理beforeDays天以前的积分记录</param>
            <param name="cleanSystemPointRecords">是否也删除系统积分记录</param>
        </member>
        <member name="M:Tunynet.Common.PointService.GetPointRecords(System.Nullable{System.Int64},System.Nullable{System.Boolean},System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Int32,System.Int32)">
            <summary>
            查询用户积分记录
            </summary>
            <param name="userId">用户Id<remarks>系统积分的UserId=0</remarks></param>
            <param name="isIncome">是不是收入的积分</param>
            <param name="pointItemName">积分项目名称</param>
            <param name="startDate">开始时间</param>
            <param name="endDate">截止时间</param>
            <param name="pageSize">页码尺寸</param>
            <param name="pageIndex">当前页码</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.PointService.CleanPointStatistics(System.Int32)">
            <summary>
            删除beforeDays天以前的积分统计
            </summary>
            <param name="beforeDays">天数</param>
            <returns>清除的记录数</returns>
        </member>
        <member name="M:Tunynet.Common.PointService.GetUserLastestRecord(System.Int64)">
            <summary>
            获取需要提醒的积分记录
            </summary>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.PointService.TrackPointRecord(System.Int64,Tunynet.Common.PointRecord)">
            <summary>
            跟踪用户的最新的积分记录
            </summary>
            <param name="userId"></param>
            <param name="pointRecord"></param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.PointService.UpdatePointItem(Tunynet.Common.PointItem)">
            <summary>
            更新积分项目
            </summary>
            <param name="pointItem">待更新的积分项目</param>
        </member>
        <member name="M:Tunynet.Common.PointService.GetPointItem(System.String)">
            <summary>
            获取积分项目
            </summary>
            <param name="itemKey">积分项目标识</param>
            <returns>返回itemKey对应的PointItem，如果没有找到返回null</returns>
        </member>
        <member name="M:Tunynet.Common.PointService.GetPointItems(System.Nullable{System.Int32})">
            <summary>
            获取积分项目集合
            </summary>
            <param name="applicationId">应用Id</param>
            <returns>如果无满足条件的积分项目返回空集合</returns>
        </member>
        <member name="M:Tunynet.Common.PointService.GetPointItemsOfIncome">
            <summary>
            获取增加积分的积分项目集合
            </summary>
            <returns>如果无满足条件的积分项目返回空集合</returns>
        </member>
        <member name="M:Tunynet.Common.PointService.UpdatePointCategory(Tunynet.Common.PointCategory)">
            <summary>
            更新积分类型
            </summary>
            <param name="pointCategory">待更新的积分类型</param>
        </member>
        <member name="M:Tunynet.Common.PointService.GetPointCategory(System.String)">
            <summary>
            获取积分类型
            </summary>
            <param name="categoryKey">积分类型标识</param>
            <returns>返回itemKey对应的PointCategory，如果没有找到返回null</returns>
        </member>
        <member name="M:Tunynet.Common.PointService.GetPointCategories">
            <summary>
            获取积分类型集合
            </summary>
            <returns>如果无数据则返回空集合</returns>
        </member>
        <member name="M:Tunynet.Common.PointService.ChangeSystemTradePoints(System.Int64)">
            <summary>
            变更系统积分总额
            </summary>
            <param name="number">变更的积分值<remarks>减积分用负数</remarks></param>
        </member>
        <member name="M:Tunynet.Common.PointService.GetPointCategory2PointsDictionary(Tunynet.Common.PointItem)">
            <summary>
            根据指定积分分类获取积分项目中的积分
            </summary>
            <param name="pointItem">积分项目</param>
            <returns><remarks>key=PointCategory,value=Points</remarks>积分分类-积分字典</returns>
        </member>
        <member name="M:Tunynet.Common.PointService.TrackPointRecordCacheKey(System.Int64)">
            <summary>
            积分提醒的Cachekey
            </summary>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="T:Tunynet.Common.PointStatistic">
            <summary>
            积分统计实体类
            </summary>
        </member>
        <member name="M:Tunynet.Common.PointStatistic.New">
            <summary>
            新建实体时使用
            </summary>
        </member>
        <member name="P:Tunynet.Common.PointStatistic.Id">
             <summary>
            Id
             </summary>
        </member>
        <member name="P:Tunynet.Common.PointStatistic.UserId">
             <summary>
            用户Id
             </summary>
        </member>
        <member name="P:Tunynet.Common.PointStatistic.PointCategoryKey">
             <summary>
            积分类型标识
             </summary>
        </member>
        <member name="P:Tunynet.Common.PointStatistic.Points">
             <summary>
            积分值
             </summary>
        </member>
        <member name="P:Tunynet.Common.PointStatistic.StatisticalYear">
             <summary>
            统计年份
             </summary>
        </member>
        <member name="P:Tunynet.Common.PointStatistic.StatisticalMonth">
             <summary>
            统计月份
             </summary>
        </member>
        <member name="P:Tunynet.Common.PointStatistic.StatisticalDay">
             <summary>
            统计月份的第几天
             </summary>
        </member>
        <member name="T:Tunynet.Common.Repositories.IPointItemRepository">
            <summary>
            积分项目数据访问接口
            </summary>
        </member>
        <member name="M:Tunynet.Common.Repositories.IPointItemRepository.GetPointItems(System.Nullable{System.Int32})">
            <summary>
            获取积分项目集合
            </summary>
            <param name="applicationId">应用Id</param>
            <returns>如果无满足条件的积分项目返回空集合</returns>
        </member>
        <member name="T:Tunynet.Common.Repositories.IPointRecordRepository">
            <summary>
            积分记录数据访问接口
            </summary>
        </member>
        <member name="M:Tunynet.Common.Repositories.IPointRecordRepository.CleanPointRecords(System.Int32,System.Boolean)">
            <summary>
             清理积分记录
            </summary>
            <param name="beforeDays">清理beforeDays天以前的积分记录</param>
            <param name="cleanSystemPointRecords">是否也删除系统积分记录</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.IPointRecordRepository.GetPointRecords(System.Nullable{System.Int64},System.Nullable{System.Boolean},System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Int32,System.Int32)">
            <summary>
            查询用户积分记录
            </summary>
            <param name="userId">用户Id<remarks>系统积分的UserId=0</remarks></param>
            <param name="isIncome">是不是收入的积分</param>
            <param name="pointItemName">积分项目名称</param>
            <param name="startDate">开始时间</param>
            <param name="endDate">截止时间</param>
            <param name="pageIndex">当前页码</param>
            <param name="pageSize">每页条数</param>
            <returns></returns>
        </member>
        <member name="T:Tunynet.Common.Repositories.IPointStatisticRepository">
            <summary>
            积分项目数据访问接口
            </summary>
        </member>
        <member name="M:Tunynet.Common.Repositories.IPointStatisticRepository.UpdateStatistic(System.Int64,System.Collections.Generic.Dictionary{Tunynet.Common.PointCategory,System.Int32})">
            <summary>
            更新用户积分统计
            </summary>
            <param name="userId">用户Id</param>
            <param name="pointCategory2PointsDictionary"><remarks>key=PointCategory,value=Points</remarks>积分分类-积分字典</param>
            <returns>修订后应获取到的积分值</returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.IPointStatisticRepository.Clean(System.Int32)">
            <summary>
            删除beforeDays天以前的积分统计
            </summary>
            <param name="beforeDays">天数</param>
            <returns>清除的记录数</returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.IPointStatisticRepository.Gets(System.Int64,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            查询积分统计列表
            </summary>
            <param name="userId">用户Id</param>
            <param name="pointCategoryKey">积分分类Key</param>
            <param name="statisticalYear">统计年份</param>
            <param name="statisticalMonth">统计月份</param>
            <param name="statisticalDay">统计月份的第几天</param>
            <returns>积分统计列表</returns>
        </member>
        <member name="T:Tunynet.Common.Repositories.PointCategoryRepository">
            <summary>
            积分类型Repository
            </summary>
        </member>
        <member name="M:Tunynet.Common.Repositories.PointCategoryRepository.Update(Tunynet.Common.PointCategory)">
            <summary>
            更新积分类型
            </summary>
            <param name="entity">待更新的积分类型</param>
        </member>
        <member name="T:Tunynet.Common.Repositories.PointItemRepository">
            <summary>
            积分项目Repository
            </summary>
        </member>
        <member name="M:Tunynet.Common.Repositories.PointItemRepository.Update(Tunynet.Common.PointItem)">
            <summary>
            更新积分项目
            </summary>
            <param name="entity">待更新的积分项目</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.PointItemRepository.GetPointItems(System.Nullable{System.Int32})">
            <summary>
            获取积分项目集合
            </summary>
            <param name="applicationId">应用Id</param>
            <returns>如果无满足条件的积分项目返回空集合</returns>
        </member>
        <member name="T:Tunynet.Common.Repositories.PointRecordRepository">
            <summary>
            积分记录Repository
            </summary>
        </member>
        <member name="M:Tunynet.Common.Repositories.PointRecordRepository.CleanPointRecords(System.Int32,System.Boolean)">
            <summary>
             清理积分记录
            </summary>
            <param name="beforeDays">清理beforeDays天以前的积分记录</param>
            <param name="cleanSystemPointRecords">是否也删除系统积分记录</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.PointRecordRepository.GetPointRecords(System.Nullable{System.Int64},System.Nullable{System.Boolean},System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Int32,System.Int32)">
            <summary>
            查询用户积分记录
            </summary>
            <param name="userId">用户Id<remarks>系统积分的UserId=0</remarks></param>
            <param name="isIncome">是不是收入的积分</param>
            <param name="pointItemName">积分项目名称</param>
            <param name="startDate">开始时间</param>
            <param name="endDate">截止时间</param>
            <param name="pageIndex">当前页码</param>
            <param name="pageSize">每页条数</param>
            <returns></returns>
        </member>
        <member name="T:Tunynet.Common.Repositories.PointStatisticRepository">
            <summary>
            积分统计Repository
            </summary>
        </member>
        <member name="M:Tunynet.Common.Repositories.PointStatisticRepository.UpdateStatistic(System.Int64,System.Collections.Generic.Dictionary{Tunynet.Common.PointCategory,System.Int32})">
            <summary>
            更新积分统计
            </summary>
            <param name="userId">用户Id</param>
            <param name="pointCategory2PointsDictionary"><remarks>key=PointCategory,value=Points</remarks>积分分类-积分字典</param>
            <returns>修订后应获取到的积分值</returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.PointStatisticRepository.Clean(System.Int32)">
            <summary>
            删除beforeDays天以前的积分统计
            </summary>
            <param name="beforeDays">天数</param>
            <returns>清除的记录数</returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.PointStatisticRepository.Gets(System.Int64,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            查询积分统计列表
            </summary>
            <param name="userId">用户Id</param>
            <param name="PointCategoryKey">积分项目Key</param>
            <param name="statisticalYear">统计年份</param>
            <param name="statisticalMonth">统计月份</param>
            <param name="statisticalDay">统计月份的第几天</param>
            <returns>积分统计列表</returns>
        </member>
        <member name="T:Tunynet.Common.Repositories.IUserInRoleRepository">
            <summary>
            UserInRole数据访问接口
            </summary>
        </member>
        <member name="M:Tunynet.Common.Repositories.IUserInRoleRepository.AddUserToRoles(System.Int64,System.Collections.Generic.List{System.String})">
            <summary>
            把用户加入到一组角色中
            </summary>
            <param name="userId">用户Id</param>
            <param name="roleNames">赋予用户的用户角色</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.IUserInRoleRepository.GetRoleNamesOfUser(System.Int64,System.Boolean)">
            <summary>
            获取用户的角色名称
            </summary>
            <param name="userId">用户Id</param>
            <param name="onlyPublic">是否仅获取对外公开的角色</param>
            <returns>返回用户的所有角色，如果该用户没有用户角色返回空集合</returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.IUserInRoleRepository.RemoveUserRoles(System.Int64)">
            <summary>
            移除用户的所有角色
            </summary>
            <param name="userId">用户Id</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.IUserInRoleRepository.Delete(System.Int64,System.String)">
            <summary>
            删除用户的一个角色
            </summary>
            <param name="userId">用户Id</param>
            <param name="roleName">角色名</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.IUserInRoleRepository.GetUserIdsOfRole(System.String)">
            <summary>
            查询拥有管理员角色的用户Id集合
            </summary>
            <param name="administratorRoleName">管理员角色名称</param>
            <returns></returns>
        </member>
        <member name="T:Tunynet.Common.Repositories.RoleRepository">
            <summary>
            用户角色Repository
            </summary>
        </member>
        <member name="M:Tunynet.Common.Repositories.RoleRepository.Delete(Tunynet.Common.Role)">
            <summary>
            删除用户角色
            </summary>
            <param name="role">待删除的用户角色</param>
            <returns>删除成功返回1，否则返回0</returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.RoleRepository.Update(Tunynet.Common.Role)">
            <summary>
            更新用户角色
            </summary>
            <param name="role">待更新的用户角色</param>
        </member>
        <member name="T:Tunynet.Common.Repositories.UserInRoleRepository">
            <summary>
            用户角色与用户关联Repository
            </summary>
        </member>
        <member name="M:Tunynet.Common.Repositories.UserInRoleRepository.AddUserToRoles(System.Int64,System.Collections.Generic.List{System.String})">
            <summary>
            把用户加入到一组角色中
            </summary>
            <param name="userId">用户Id</param>
            <param name="roleNames">赋予用户的用户角色</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.UserInRoleRepository.Delete(System.Int64,System.String)">
            <summary>
            删除用户的一个角色
            </summary>
            <param name="userId">用户Id</param>
            <param name="roleName">角色名</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.UserInRoleRepository.GetRoleNamesOfUser(System.Int64,System.Boolean)">
            <summary>
            获取用户的角色名称
            </summary>
            <param name="userId">用户Id</param>
            <param name="onlyPublic">是否仅获取对外公开的角色</param>
            <returns>用户的所有角色，如果该用户没有用户角色返回空集合</returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.UserInRoleRepository.GetUserIdsOfRole(System.String)">
            <summary>
            查询拥有管理员角色的用户Id集合
            </summary>
            <param name="administratorRoleName">管理员角色名称</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.UserInRoleRepository.RemoveUserRoles(System.Int64)">
            <summary>
            移除用户的所有角色
            </summary>
            <param name="userId">用户Id</param>
        </member>
        <member name="T:Tunynet.Common.Role">
            <summary>
            用户角色
            </summary>
        </member>
        <member name="P:Tunynet.Common.Role.RoleName">
            <summary>
            角色名称
            </summary>
        </member>
        <member name="P:Tunynet.Common.Role.FriendlyRoleName">
            <summary>
            角色友好名称（用于对外显示）
            </summary>
        </member>
        <member name="P:Tunynet.Common.Role.IsBuiltIn">
            <summary>
            是否是系统内置的
            </summary>
        </member>
        <member name="P:Tunynet.Common.Role.ConnectToUser">
            <summary>
            是否直接关联到用户（例如：版主、注册用户 无需直接赋给用户）
            </summary>
        </member>
        <member name="P:Tunynet.Common.Role.ApplicationId">
            <summary>
            哪个应用模块
            </summary>
        </member>
        <member name="P:Tunynet.Common.Role.IsPublic">
            <summary>
            是否对外显示
            </summary>
        </member>
        <member name="P:Tunynet.Common.Role.Description">
            <summary>
            描述
            </summary>
        </member>
        <member name="P:Tunynet.Common.Role.RoleImage">
            <summary>
            角色标识图片名称
            </summary>
        </member>
        <member name="P:Tunynet.Common.Role.IsEnabled">
            <summary>
            是否启用
            </summary>
        </member>
        <member name="T:Tunynet.Common.RoleNames">
            <summary>
            RoleName配置类（用于强类型获取RoleName）
            </summary>
        </member>
        <member name="M:Tunynet.Common.RoleNames.Instance">
            <summary>
            获取单例
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.RoleNames.SuperAdministrator">
            <summary>
            超级管理员
            </summary>
        </member>
        <member name="M:Tunynet.Common.RoleNames.ContentAdministrator">
            <summary>
            内容管理员
            </summary>
        </member>
        <member name="M:Tunynet.Common.RoleNames.RegisteredUsers">
            <summary>
            注册用户
            </summary>
        </member>
        <member name="M:Tunynet.Common.RoleNames.ModeratedUser">
            <summary>
            管制用户
            </summary>
        </member>
        <member name="M:Tunynet.Common.RoleNames.Anonymous">
            <summary>
            匿名用户
            </summary>
        </member>
        <member name="M:Tunynet.Common.RoleNames.Owner">
            <summary>
            拥有者
            </summary>
        </member>
        <member name="M:Tunynet.Common.RoleNames.Moderator">
            <summary>
            版主
            </summary>
        </member>
        <member name="M:Tunynet.Common.RoleNames.OrganizationMember">
            <summary>
            组织成员
            </summary>
        </member>
        <member name="M:Tunynet.Common.RoleNames.OrganizationManager">
            <summary>
            组织管理人
            </summary>
        </member>
        <member name="T:Tunynet.Common.RoleService">
            <summary>
            用户角色业务逻辑类
            </summary>
        </member>
        <member name="M:Tunynet.Common.RoleService.#ctor">
            <summary>
            构造器
            </summary>
        </member>
        <member name="M:Tunynet.Common.RoleService.#ctor(Tunynet.Repositories.IRepository{Tunynet.Common.Role},Tunynet.Common.Repositories.IUserInRoleRepository)">
            <summary>
            构造器
            </summary>
            <param name="roleRepository">Role仓储</param>
            <param name="userInRoleRepository"><see cref="T:Tunynet.Common.Repositories.IUserInRoleRepository"/></param>
        </member>
        <member name="M:Tunynet.Common.RoleService.Create(Tunynet.Common.Role,System.IO.Stream)">
            <summary>
            添加角色
            </summary>
            <param name="role"><see cref="T:Tunynet.Common.Role"/>要添加的角色</param>
            <param name="stream">输入流</param>
        </member>
        <member name="M:Tunynet.Common.RoleService.Update(Tunynet.Common.Role,System.IO.Stream)">
            <summary>
            更新角色
            </summary>
            <param name="role"><see cref="T:Tunynet.Common.Role"/>要更新的角色</param>
            <param name="stream">输入流</param>
        </member>
        <member name="M:Tunynet.Common.RoleService.Delete(System.String)">
            <summary>
            删除角色
            </summary>
            <param name="roleName">角色名称</param>
        </member>
        <member name="M:Tunynet.Common.RoleService.Get(System.String)">
            <summary>
            获取Role
            </summary>
            <param name="roleName">角色名称</param>
            <returns><see cref="T:Tunynet.Common.Role"/></returns>
        </member>
        <member name="M:Tunynet.Common.RoleService.GetRoles">
            <summary>
            获取所有角色
            </summary>
            <remarks>
            按是否内置及角色名称排序
            </remarks>
            <returns>符合查询条件的Role集合</returns>
        </member>
        <member name="M:Tunynet.Common.RoleService.GetRoles(System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <summary>
            根据条件获取Role
            </summary>
            <param name="connectToUser">是否可关联到用户</param>
            <param name="applicationId">应用Id</param>
            <param name="isEnabled">是否启用</param>
            <returns>符合查询条件的Role集合</returns>
        </member>
        <member name="M:Tunynet.Common.RoleService.GetRoles(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            根据角色名组装角色实体
            </summary>
            <param name="roleNames"></param>
            <returns>Role集合</returns>
        </member>
        <member name="M:Tunynet.Common.RoleService.AddUserToRoles(System.Int64,System.Collections.Generic.List{System.String})">
            <summary>
            把用户加入到一组角色中
            </summary>  
        </member>
        <member name="M:Tunynet.Common.RoleService.AddUserToRole(System.Int64,System.String)">
            <summary>
            给用户添加角色
            </summary>
            <param name="userId">用户Id</param>
            <param name="roleName">角色名称</param>
        </member>
        <member name="M:Tunynet.Common.RoleService.RemoveUserFromRole(System.Int64,System.String)">
            <summary>
            移除用户的一个角色
            </summary>
            <param name="userId">用户Id</param>
            <param name="roleName">角色名称</param>
        </member>
        <member name="M:Tunynet.Common.RoleService.RemoveUserRoles(System.Int64)">
            <summary>
            移除用户的所有角色
            </summary>
            <remarks>
            删除用户时使用
            </remarks>
        </member>
        <member name="M:Tunynet.Common.RoleService.GetRoleNamesOfUser(System.Int64,System.Boolean)">
            <summary>
            获取用户的角色
            </summary>
            <param name="userId">用户Id</param>
            <param name="onlyPublic">是否仅获取对外公开的角色</param>
            <returns>返回用户的所有角色，如果该用户没有用户角色返回空集合</returns>
        </member>
        <member name="M:Tunynet.Common.RoleService.IsUserInRoles(System.Int64,System.String[])">
            <summary>
            判断UserId是否至少拥有roleNames的一个用户角色
            </summary>
            <param name="userId">用户Id</param>
            <param name="roleNames">用户角色集合</param>
            <returns></returns>
        </member>
        <member name="T:Tunynet.Common.UserExtensionByRole">
            <summary>
            为IUser扩展与角色相关的功能
            </summary>
        </member>
        <member name="M:Tunynet.Common.UserExtensionByRole.IsSuperAdministrator(Tunynet.Common.IUser)">
            <summary>
            判断用户是否为超级管理员
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.UserExtensionByRole.IsContentAdministrator(Tunynet.Common.IUser)">
            <summary>
            判断用户是否为超级管理员
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.UserExtensionByRole.UserRoleNames(Tunynet.Common.IUser,System.Boolean)">
            <summary>
            判断用户是否为超级管理员
            </summary>
            <param name="user"></param>
            <param name="onlyPublic">是否仅获取对外公开的角色</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.UserExtensionByRole.IsInRoles(Tunynet.Common.IUser,System.String[])">
            <summary>
            判断用户是否至少含有requiredRoleNames的一个用户角色
            </summary>
            <param name="user"><see cref="T:Tunynet.Common.IUser"/></param>
            <param name="requiredRoleNames">待检测用户角色集合</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.UserExtensionByRole.IsAllowEntryControlPannel(Tunynet.Common.IUser)">
            <summary>
            判断用户是否可以进入后台
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="T:Tunynet.Common.UserInRole">
            <summary>
            用户和角色的关联关系
            </summary>
        </member>
        <member name="P:Tunynet.Common.UserInRole.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:Tunynet.Common.UserInRole.UserId">
            <summary>
            用户ID
            </summary>
        </member>
        <member name="P:Tunynet.Common.UserInRole.RoleName">
            <summary>
            角色名称
            </summary>
        </member>
        <member name="T:Tunynet.Common.Repositories.IUserRankRepository">
            <summary>
            用户等级的数据访问接口
            </summary>
        </member>
        <member name="M:Tunynet.Common.Repositories.IUserRankRepository.ResetAllUser">
            <summary>
            依据现行规则重置所有用户等级
            </summary>
        </member>
        <member name="T:Tunynet.Common.Repositories.UserRankRepository">
            <summary>
            用户等级的数据访问类
            </summary>
        </member>
        <member name="M:Tunynet.Common.Repositories.UserRankRepository.ResetAllUser">
            <summary>
            根据一定规则重置所有的用户等级
            </summary>
        </member>
        <member name="M:Tunynet.Common.Repositories.UserRankRepository.Insert(Tunynet.Common.UserRank)">
            <summary>
            插入一条用户等级数据
            </summary>
            <param name="entity">用户等级</param>
            <returns>受影响条数</returns>
        </member>
        <member name="T:Tunynet.Common.UserRank">
            <summary>
            用户等级实体
            </summary>
        </member>
        <member name="P:Tunynet.Common.UserRank.Rank">
             <summary>
            级别（从1开始）
             </summary>
        </member>
        <member name="P:Tunynet.Common.UserRank.PointLower">
             <summary>
            积分下限
             </summary>
        </member>
        <member name="P:Tunynet.Common.UserRank.RankName">
             <summary>
            等级名称
             </summary>
        </member>
        <member name="T:Tunynet.Common.UserRankService">
            <summary>
            用户等级的逻辑类
            </summary>
        </member>
        <member name="M:Tunynet.Common.UserRankService.#ctor(Tunynet.Common.Repositories.IUserRankRepository)">
            <summary>
            带参数的构造函数（测试使用）
            </summary>
            <param name="userRankRepository">IUserRankRepository</param>
        </member>
        <member name="M:Tunynet.Common.UserRankService.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Tunynet.Common.UserRankService.Create(Tunynet.Common.UserRank)">
            <summary>
            添加用户等级
            </summary>
            <param name="userRank">用户等级</param>
            <returns>添加成功返回true，否则返回false</returns>
        </member>
        <member name="M:Tunynet.Common.UserRankService.Update(Tunynet.Common.UserRank)">
            <summary>
            更新用户等级
            </summary>
            <param name="userRank">用户等级</param>
        </member>
        <member name="M:Tunynet.Common.UserRankService.Delete(System.Int32)">
            <summary>
            删除用户等级
            </summary>
            <param name="rank">用户级别</param>        
        </member>
        <member name="M:Tunynet.Common.UserRankService.ResetAllUser">
            <summary>
            依据现行规则重置所有用户等级
            </summary>
        </member>
        <member name="M:Tunynet.Common.UserRankService.Get(System.Int32)">
            <summary>
            获取用户等级
            </summary>
            <param name="rank">用户级别(int)</param>
            <returns>用户等级实体</returns>
        </member>
        <member name="M:Tunynet.Common.UserRankService.GetAll">
            <summary>
            获取所有用户等级
            </summary>
            <remarks>key=rank , value=UserRank</remarks>
            <returns>所有用户级别实体集合</returns>
        </member>
        <member name="T:Tunynet.Common.Repositories.IVisitRepository">
            <summary>
            VisitRecord数据访问接口
            </summary>
        </member>
        <member name="M:Tunynet.Common.Repositories.IVisitRepository.ExecQueue">
            <summary>
            执行队列
            </summary>
        </member>
        <member name="M:Tunynet.Common.Repositories.IVisitRepository.Clean(System.Nullable{System.Int32})">
            <summary>
            删除N天前的访客记录
            </summary>
            <param name="beforeDays">间隔天数</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.IVisitRepository.CleanByUser(System.Int64)">
            <summary>
            根据用户id删除访客记录
            </summary>
            <param name="userId">用户的id</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.IVisitRepository.CleanByToObjectId(System.String,System.Int64)">
            <summary>
            删除被访问对象的所有访问记录
            </summary>
            <param name="tenantTypeId">租户类型id</param>
            <param name="toObjectId">被访问对象id</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.IVisitRepository.Get(System.String,System.Int64,System.Int64)">
            <summary>
            获取访客记录
            </summary>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="visitorId">访客用户Id</param>
            <param name="toObjectId">被访问对象Id</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.IVisitRepository.GetTopMyVisits(System.String,System.Int64,System.Int32)">
            <summary>
            获取访客记录（我去看过谁的内容）前topNumber条记录
            </summary>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="visitorId">访客用户Id</param>
            <param name="topNumber">条数</param>
            <returns>访客记录列表（我去看过谁的内容）</returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.IVisitRepository.GetTopVisits(System.String,System.Int64,System.Int32)">
            <summary>
            获取访客记录（谁来看过我的内容）前topNumber条记录
            </summary>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="toObjectId">被访问对象Id</param>
            <param name="topNumber">条数</param>
            <returns>访客记录列表（谁来看过我的内容）</returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.IVisitRepository.GetVisitorAlsoVisitedObjectIds(System.String,System.Int64,System.Int32)">
            <summary>
            获取访问过某内容的人还访问过哪些内容，取前topNumber条记录
            </summary>
            <param name="toObjectId">被访问对象Id</param>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="topNumber">条数</param>
            <returns>内容项Id集合</returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.IVisitRepository.DeleteCachekey(System.String,System.Int64)">
            <summary>
            删除缓存
            </summary>
            <param name="tenantTypeId"></param>
            <param name="toObjectId"></param>
        </member>
        <member name="T:Tunynet.Common.Repositories.VisitRepository">
            <summary>
            访客记录Repository
            </summary>
        </member>
        <member name="M:Tunynet.Common.Repositories.VisitRepository.Insert(Tunynet.Common.Visit)">
            <summary>
            创建访客记录
            </summary>
            <param name="entity">准备插入的实体</param>
            <returns>插入数据的主键</returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.VisitRepository.Update(Tunynet.Common.Visit)">
            <summary>
            更新访客记录
            </summary>
            <param name="entity">准备更新的实体</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.VisitRepository.Delete(Tunynet.Common.Visit)">
            <summary>
            删除访客记录
            </summary>
            <param name="entity">访客记录</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.VisitRepository.Clean(System.Nullable{System.Int32})">
            <summary>
            清除数据
            </summary>
            <param name="beforeDays">多少天以前的数据</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.VisitRepository.CleanByUser(System.Int64)">
            <summary>
            根据userid删除访问记录
            </summary>
            <param name="userId">用户的id</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.VisitRepository.CleanByToObjectId(System.String,System.Int64)">
            <summary>
            清空被访问对象的所有访问记录
            </summary>
            <param name="tenantTypeId">租户类型id</param>
            <param name="toObjectId">被访问对象id</param>
        </member>
        <member name="M:Tunynet.Common.Repositories.VisitRepository.ExecQueue">
            <summary>
            执行队列
            </summary>
        </member>
        <member name="M:Tunynet.Common.Repositories.VisitRepository.Get(System.String,System.Int64,System.Int64)">
            <summary>
            获取访客记录
            </summary>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="visitorId">访客用户Id</param>
            <param name="toObjectId">被访问对象Id</param>'
            <returns>查找到的访问实体</returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.VisitRepository.GetTopMyVisits(System.String,System.Int64,System.Int32)">
            <summary>
            获取访客记录（我去看过谁的内容）前topNumber条记录
            </summary>
            <param name="visitorId">访客用户Id</param>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="topNumber">条数</param>
            <returns>访客记录列表（我去看过谁的内容）</returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.VisitRepository.GetTopVisits(System.String,System.Int64,System.Int32)">
            <summary>
            获取访客记录（谁来看过我的内容）前topNumber条记录
            </summary>
            <param name="toObjectId">被访问对象Id</param>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="topNumber">条数</param>
            <returns>访客记录列表（谁来看过我的内容）</returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.VisitRepository.GetVisitorAlsoVisitedObjectIds(System.String,System.Int64,System.Int32)">
            <summary>
            获取访问过某内容的人还访问过哪些内容，取前topNumber条记录
            </summary>
            <param name="toObjectId">被访问对象Id</param>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="topNumber">条数</param>
            <returns>内容项Id集合</returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.VisitRepository.GetTopVisitIds(System.String,System.Int64)">
            <summary>
            获取前一千条谁来看过我的id集合
            </summary>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="toObjectId">被访问对象Id</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.VisitRepository.GetCacheKey_TopMyVisits(System.String,System.Int64)">
            <summary>
            我去看过谁的缓存名称
            </summary>
            <param name="tenantTypeId">租户类型id</param>
            <param name="visitorId">访客用户Id</param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.Repositories.VisitRepository.GetCacheKey_TopVisits(System.String,System.Int64)">
            <summary>
            谁来看过的的缓存名称
            </summary>
            <param name="tenantTypeId">租户类型id</param>
            <param name="toObjectId">被访问对象的id</param>
            <returns></returns>
        </member>
        <member name="T:Tunynet.Common.ExecVisitQueueTask">
            <summary>
            执行访客记录队列任务
            </summary>
            <remarks>
            分布式部署时，要求每个web服务器都要部署，不允许集中部署
            </remarks>
        </member>
        <member name="M:Tunynet.Common.ExecVisitQueueTask.Execute(Tunynet.Tasks.TaskDetail)">
            <summary>
            任务执行的内容
            </summary>
            <param name="taskDetail">任务配置状态信息</param>
        </member>
        <member name="T:Tunynet.Common.Visit">
            <summary>
            访客记录实体
            </summary>
        </member>
        <member name="M:Tunynet.Common.Visit.New">
            <summary>
            新建实体时使用
            </summary>
        </member>
        <member name="P:Tunynet.Common.Visit.Id">
             <summary>
            id
             </summary>
        </member>
        <member name="P:Tunynet.Common.Visit.TenantTypeId">
             <summary>
            租户类型id
             </summary>
        </member>
        <member name="P:Tunynet.Common.Visit.VisitorId">
             <summary>
            访客用户id
             </summary>
        </member>
        <member name="P:Tunynet.Common.Visit.Visitor">
             <summary>
            访客名称
             </summary>
        </member>
        <member name="P:Tunynet.Common.Visit.ToObjectId">
             <summary>
            被访问对象id
             </summary>
        </member>
        <member name="P:Tunynet.Common.Visit.ToObjectName">
             <summary>
            被访问对象名称
             </summary>
        </member>
        <member name="P:Tunynet.Common.Visit.LastVisitTime">
             <summary>
            最后访问时间
             </summary>
        </member>
        <member name="T:Tunynet.Common.VisitService">
            <summary>
            用户访客记录业务逻辑类
            </summary>
        </member>
        <member name="M:Tunynet.Common.VisitService.#ctor(System.String)">
            <summary>
            构造器
            </summary>
            <param name="tenantTypeId">租户类型Id</param>
        </member>
        <member name="M:Tunynet.Common.VisitService.#ctor(System.String,Tunynet.Common.Repositories.IVisitRepository)">
            <summary>
            构造器
            </summary>        
            <param name="tenantTypeId">租户类型Id</param>
            <param name="visitRepository"><see cref="T:Tunynet.Common.Repositories.IVisitRepository"/></param>
        </member>
        <member name="M:Tunynet.Common.VisitService.CreateVisit(System.Int64,System.String,System.Int64,System.String)">
            <summary>
            访客访问了某内容
            </summary>                
            <param name="visitorId">访客用户Id</param>
            <param name="visitor">访客名称</param>
            <param name="toObjectId">被访问对象Id</param>
            <param name="toObjectName">被访问对象名称</param>
            <remarks>如果记录已经存在，则更新</remarks>
        </member>
        <member name="M:Tunynet.Common.VisitService.Delete(System.Int64)">
            <summary>
            删除访客记录
            </summary>
            <param name="Id">访客记录Id</param>
        </member>
        <member name="M:Tunynet.Common.VisitService.Clean(System.Nullable{System.Int32})">
            <summary>
            删除N天前的访客记录
            </summary>
            <param name="beforeDays">间隔天数</param>
        </member>
        <member name="M:Tunynet.Common.VisitService.CleanByUser(System.Int64)">
            <summary>
            根据用户删除访问记录
            </summary>
        </member>
        <member name="M:Tunynet.Common.VisitService.CleanByToObjectId(System.Int64)">
            <summary>
            删除被访问对象的所有id
            </summary>
            <param name="toObjectId"></param>
        </member>
        <member name="M:Tunynet.Common.VisitService.GetTopMyVisits(System.Int64,System.Int32)">
            <summary>
            获取我的访客记录（我去看过谁的内容）前topNumber条记录
            </summary>
            <param name="visitorId">访客用户Id</param>
            <param name="topNumber">条数</param>
            <returns>访客记录列表（我去看过谁的内容）</returns>
        </member>
        <member name="M:Tunynet.Common.VisitService.GetTopVisits(System.Int64,System.Int32)">
            <summary>
            获取访客记录（谁来看过我的内容）前topNumber条记录
            </summary>
            <param name="toObjectId">被访问对象Id</param>
            <param name="topNumber">条数</param>
            <returns>访客记录列表（谁来看过我的内容）</returns>
        </member>
        <member name="M:Tunynet.Common.VisitService.DeleteCachekey(System.Int64)">
            <summary>
            删除信息删除缓存
            </summary>
            <param name="toObjectId"></param>
            <returns></returns>
        </member>
        <member name="M:Tunynet.Common.VisitService.GetVisitorAlsoVisitedObjectIds(System.Int64,System.Int32)">
            <summary>
            获取访问过某内容的人还访问过哪些内容，取前topNumber条记录
            </summary>
            <param name="toObjectId">被访问对象Id</param>
            <param name="topNumber">条数</param>
            <returns>内容项Id集合</returns>
        </member>
    </members>
</doc>
